{"version":3,"file":"xterm.js","sources":["../src/xterm.ts","../src/utils/ScreenDprMonitor.ts","../src/utils/RenderDebouncer.ts","../src/utils/MouseHelper.ts","../src/utils/Dom.ts","../src/utils/CircularList.ts","../src/utils/CharMeasure.ts","../src/shared/utils/Browser.ts","../src/shared/CharAtlasGenerator.ts","../src/renderer/Types.ts","../src/renderer/TextRenderLayer.ts","../src/renderer/SelectionRenderLayer.ts","../src/renderer/Renderer.ts","../src/renderer/LinkRenderLayer.ts","../src/renderer/GridCache.ts","../src/renderer/CursorRenderLayer.ts","../src/renderer/ColorManager.ts","../src/renderer/CharAtlas.ts","../src/renderer/BaseRenderLayer.ts","../src/input/MouseZoneManager.ts","../src/handlers/Clipboard.ts","../src/handlers/AltClickHandler.ts","../src/Viewport.ts","../src/Types.ts","../src/Terminal.ts","../src/Strings.ts","../src/SoundManager.ts","../src/SelectionModel.ts","../src/SelectionManager.ts","../src/Parser.ts","../src/Linkifier.ts","../src/InputHandler.ts","../src/EventEmitter.ts","../src/EscapeSequences.ts","../src/CompositionHelper.ts","../src/Charsets.ts","../src/CharWidth.ts","../src/BufferSet.ts","../src/Buffer.ts","../src/AccessibilityManager.ts","../node_modules/browser-pack/_prelude.js"],"sourcesContent":["/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This file is the entry point for browserify.\n */\n\nimport { Terminal } from './Terminal';\n\nmodule.exports = Terminal;\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\n\n/**\n * The screen device pixel ratio monitor allows listening for when the\n * window.devicePixelRatio value changes. This is done not with polling but with\n * the use of window.matchMedia to watch media queries. When the event fires,\n * the listener will be reattached using a different media query to ensure that\n * any further changes will register.\n *\n * The listener should fire on both window zoom changes and switching to a\n * monitor with a different DPI.\n */\nexport class ScreenDprMonitor {\n  private _currentDevicePixelRatio: number;\n  private _outerListener: MediaQueryListListener;\n  private _listener: ScreenDprListener;\n  private _resolutionMediaMatchList: MediaQueryList;\n\n  public setListener(listener: ScreenDprListener): void {\n    if (this._listener) {\n      this.clearListener();\n    }\n    this._listener = listener;\n    this._outerListener = () => {\n      this._listener(window.devicePixelRatio, this._currentDevicePixelRatio);\n      this._updateDpr();\n    };\n    this._updateDpr();\n  }\n\n  private _updateDpr(): void {\n    // Clear listeners for old DPR\n    if (this._resolutionMediaMatchList) {\n      this._resolutionMediaMatchList.removeListener(this._outerListener);\n    }\n    // Add listeners for new DPR\n    this._currentDevicePixelRatio = window.devicePixelRatio;\n    this._resolutionMediaMatchList = window.matchMedia(`screen and (resolution: ${window.devicePixelRatio}dppx)`);\n    this._resolutionMediaMatchList.addListener(this._outerListener);\n  }\n\n  public clearListener(): void {\n    if (!this._listener) {\n      return;\n    }\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\n    this._listener = null;\n    this._outerListener = null;\n  }\n}\n","import { ITerminal } from '../Types';\r\nimport { IDisposable } from 'xterm';\r\n\r\n/**\r\n * Debounces calls to render terminal rows using animation frames.\r\n */\r\nexport class RenderDebouncer implements IDisposable {\r\n  private _rowStart: number;\r\n  private _rowEnd: number;\r\n  private _animationFrame: number = null;\r\n\r\n  constructor(\r\n    private _terminal: ITerminal,\r\n    private _callback: (start: number, end: number) => void\r\n  ) {\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this._animationFrame) {\r\n      window.cancelAnimationFrame(this._animationFrame);\r\n      this._animationFrame = null;\r\n    }\r\n  }\r\n\r\n  public refresh(rowStart?: number, rowEnd?: number): void {\r\n    rowStart = rowStart || 0;\r\n    rowEnd = rowEnd || this._terminal.rows - 1;\r\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\r\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\r\n\r\n    if (this._animationFrame) {\r\n      return;\r\n    }\r\n\r\n    this._animationFrame = window.requestAnimationFrame(() => this._innerRefresh());\r\n  }\r\n\r\n  private _innerRefresh(): void {\r\n    // Clamp values\r\n    this._rowStart = Math.max(this._rowStart, 0);\r\n    this._rowEnd = Math.min(this._rowEnd, this._terminal.rows - 1);\r\n\r\n    // Run render callback\r\n    this._callback(this._rowStart, this._rowEnd);\r\n\r\n    // Reset debouncer\r\n    this._rowStart = null;\r\n    this._rowEnd = null;\r\n    this._animationFrame = null;\r\n  }\r\n}\r\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharMeasure } from '../Types';\nimport { IRenderer } from '../renderer/Types';\n\nexport class MouseHelper {\n  constructor(private _renderer: IRenderer) {}\n\n  public static getCoordsRelativeToElement(event: {pageX: number, pageY: number}, element: HTMLElement): [number, number] {\n    // Ignore browsers that don't support MouseEvent.pageX\n    if (event.pageX == null) {\n      return null;\n    }\n\n    const originalElement = element;\n    let x = event.pageX;\n    let y = event.pageY;\n\n    // Converts the coordinates from being relative to the document to being\n    // relative to the terminal.\n    while (element) {\n      x -= element.offsetLeft;\n      y -= element.offsetTop;\n      element = <HTMLElement>element.offsetParent;\n    }\n    element = originalElement;\n    while (element && element !== element.ownerDocument.body) {\n      x += element.scrollLeft;\n      y += element.scrollTop;\n      element = <HTMLElement>element.parentElement;\n    }\n    return [x, y];\n  }\n\n  /**\n   * Gets coordinates within the terminal for a particular mouse event. The result\n   * is returned as an array in the form [x, y] instead of an object as it's a\n   * little faster and this function is used in some low level code.\n   * @param event The mouse event.\n   * @param element The terminal's container element.\n   * @param charMeasure The char measure object used to determine character sizes.\n   * @param colCount The number of columns in the terminal.\n   * @param rowCount The number of rows n the terminal.\n   * @param isSelection Whether the request is for the selection or not. This will\n   * apply an offset to the x value such that the left half of the cell will\n   * select that cell and the right half will select the next cell.\n   */\n  public getCoords(event: {pageX: number, pageY: number}, element: HTMLElement, charMeasure: ICharMeasure, lineHeight: number, colCount: number, rowCount: number, isSelection?: boolean): [number, number] {\n    // Coordinates cannot be measured if charMeasure has not been initialized\n    if (!charMeasure.width || !charMeasure.height) {\n      return null;\n    }\n\n    const coords = MouseHelper.getCoordsRelativeToElement(event, element);\n    if (!coords) {\n      return null;\n    }\n\n    coords[0] = Math.ceil((coords[0] + (isSelection ? this._renderer.dimensions.actualCellWidth / 2 : 0)) / this._renderer.dimensions.actualCellWidth);\n    coords[1] = Math.ceil(coords[1] / this._renderer.dimensions.actualCellHeight);\n\n    // Ensure coordinates are within the terminal viewport. Note that selections\n    // need an addition point of precision to cover the end point (as characters\n    // cover half of one char and half of the next).\n    coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n    coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n\n    return coords;\n  }\n\n  /**\n   * Gets coordinates within the terminal for a particular mouse event, wrapping\n   * them to the bounds of the terminal and adding 32 to both the x and y values\n   * as expected by xterm.\n   * @param event The mouse event.\n   * @param element The terminal's container element.\n   * @param charMeasure The char measure object used to determine character sizes.\n   * @param colCount The number of columns in the terminal.\n   * @param rowCount The number of rows in the terminal.\n   */\n  public getRawByteCoords(event: MouseEvent, element: HTMLElement, charMeasure: ICharMeasure, lineHeight: number, colCount: number, rowCount: number): { x: number, y: number } {\n    const coords = this.getCoords(event, element, charMeasure, lineHeight, colCount, rowCount);\n    let x = coords[0];\n    let y = coords[1];\n\n    // xterm sends raw bytes and starts at 32 (SP) for each.\n    x += 32;\n    y += 32;\n\n    return { x, y };\n  }\n}\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IDisposable } from 'xterm';\r\n\r\n/**\r\n * Adds a disposabe listener to a node in the DOM, returning the disposable.\r\n * @param type The event type.\r\n * @param handler The handler for the listener.\r\n */\r\nexport function addDisposableListener(\r\n  node: Element | Window | Document,\r\n  type: string,\r\n  handler: (e: any) => void,\r\n  useCapture?: boolean\r\n): IDisposable {\r\n  node.addEventListener(type, handler, useCapture);\r\n  return {\r\n    dispose: () => {\r\n      if (!handler) {\r\n        // Already disposed\r\n        return;\r\n      }\r\n      node.removeEventListener(type, handler, useCapture);\r\n      node = null;\r\n      handler = null;\r\n    }\r\n  };\r\n}\r\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from '../EventEmitter';\nimport { ICircularList } from '../Types';\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> extends EventEmitter implements ICircularList<T> {\n  protected _array: T[];\n  private _startIndex: number;\n  private _length: number;\n\n  constructor(\n    private _maxLength: number\n  ) {\n    super();\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    let newArray = new Array<T>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  public get forEach(): (callbackfn: (value: T, index: number) => void) => void {\n    return (callbackfn: (value: T, index: number) => void) => {\n      let i = 0;\n      let length = this.length;\n      for (let i = 0; i < length; i++) {\n        callbackfn(this.get(i), i);\n      }\n    };\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @return The value corresponding to the index.\n   */\n  public get(index: number): T {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex++;\n      if (this._startIndex === this._maxLength) {\n        this._startIndex = 0;\n      }\n      this.emit('trim', 1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @return The popped value.\n   */\n  public pop(): T {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n    }\n\n    if (items && items.length) {\n      // Add items\n      for (let i = this._length - 1; i >= start; i--) {\n        this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n      }\n      for (let i = 0; i < items.length; i++) {\n        this._array[this._getCyclicIndex(start + i)] = items[i];\n      }\n\n      // Adjust length as needed\n      if (this._length + items.length > this.maxLength) {\n        const countToTrim = (this._length + items.length) - this.maxLength;\n        this._startIndex += countToTrim;\n        this._length = this.maxLength;\n        this.emit('trim', countToTrim);\n      } else {\n        this._length += items.length;\n      }\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.emit('trim', count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this.maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.emit('trim', 1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this.maxLength;\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharMeasure, ITerminal, ITerminalOptions } from '../Types';\nimport { EventEmitter } from '../EventEmitter';\n\n/**\n * Utility class that measures the size of a character. Measurements are done in\n * the DOM rather than with a canvas context because support for extracting the\n * height of characters is patchy across browsers.\n */\nexport class CharMeasure extends EventEmitter implements ICharMeasure {\n  private _document: Document;\n  private _parentElement: HTMLElement;\n  private _measureElement: HTMLElement;\n  private _width: number;\n  private _height: number;\n\n  constructor(document: Document, parentElement: HTMLElement) {\n    super();\n    this._document = document;\n    this._parentElement = parentElement;\n    this._measureElement = this._document.createElement('span');\n    this._measureElement.style.position = 'absolute';\n    this._measureElement.style.top = '0';\n    this._measureElement.style.left = '-9999em';\n    this._measureElement.style.lineHeight = 'normal';\n    this._measureElement.textContent = 'W';\n    this._measureElement.setAttribute('aria-hidden', 'true');\n    this._parentElement.appendChild(this._measureElement);\n  }\n\n  public get width(): number {\n    return this._width;\n  }\n\n  public get height(): number {\n    return this._height;\n  }\n\n  public measure(options: ITerminalOptions): void {\n    this._measureElement.style.fontFamily = options.fontFamily;\n    this._measureElement.style.fontSize = `${options.fontSize}px`;\n    const geometry = this._measureElement.getBoundingClientRect();\n    // The element is likely currently display:none, we should retain the\n    // previous value.\n    if (geometry.width === 0 || geometry.height === 0) {\n      return;\n    }\n    if (this._width !== geometry.width || this._height !== geometry.height) {\n      this._width = geometry.width;\n      this._height = Math.ceil(geometry.height);\n      this.emit('charsizechanged');\n    }\n  }\n\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = !!~userAgent.indexOf('Firefox');\nexport const isMSIE = !!~userAgent.indexOf('MSIE') || !!~userAgent.indexOf('Trident');\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = contains(['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'], platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isMSWindows = contains(['Windows', 'Win16', 'Win32', 'WinCE'], platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n\n/**\n * Return if the given array contains the given element\n * @param {Array} array The array to search for the given element.\n * @param {Object} el The element to look for into the array\n */\nfunction contains(arr: any[], el: any): boolean {\n  return arr.indexOf(el) >= 0;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { FontWeight } from 'xterm';\nimport { isFirefox } from './utils/Browser';\n\ndeclare const Promise: any;\n\nexport interface IOffscreenCanvas {\n  width: number;\n  height: number;\n  getContext(type: '2d', config?: Canvas2DContextAttributes): CanvasRenderingContext2D;\n  transferToImageBitmap(): ImageBitmap;\n}\n\nexport interface ICharAtlasRequest {\n  scaledCharWidth: number;\n  scaledCharHeight: number;\n  fontSize: number;\n  fontFamily: string;\n  fontWeight: FontWeight;\n  fontWeightBold: FontWeight;\n  background: string;\n  foreground: string;\n  ansiColors: string[];\n  devicePixelRatio: number;\n  allowTransparency: boolean;\n}\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n\n/**\n * Generates a char atlas.\n * @param context The window or worker context.\n * @param canvasFactory A function to generate a canvas with a width or height.\n * @param request The config for the new char atlas.\n */\nexport function generateCharAtlas(context: Window, canvasFactory: (width: number, height: number) => HTMLCanvasElement | IOffscreenCanvas, request: ICharAtlasRequest): HTMLCanvasElement | Promise<ImageBitmap> {\n  const cellWidth = request.scaledCharWidth + CHAR_ATLAS_CELL_SPACING;\n  const cellHeight = request.scaledCharHeight + CHAR_ATLAS_CELL_SPACING;\n  const canvas = canvasFactory(\n    /*255 ascii chars*/255 * cellWidth,\n    (/*default+default bold*/2 + /*0-15*/16) * cellHeight\n  );\n  const ctx = canvas.getContext('2d', {alpha: request.allowTransparency});\n\n  ctx.fillStyle = request.background;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  ctx.save();\n  ctx.fillStyle = request.foreground;\n  ctx.font = getFont(request.fontWeight, request);\n  ctx.textBaseline = 'top';\n\n  // Default color\n  for (let i = 0; i < 256; i++) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(i * cellWidth, 0, cellWidth, cellHeight);\n    ctx.clip();\n    ctx.fillText(String.fromCharCode(i), i * cellWidth, 0);\n    ctx.restore();\n  }\n  // Default color bold\n  ctx.save();\n  ctx.font = getFont(request.fontWeightBold, request);\n  for (let i = 0; i < 256; i++) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(i * cellWidth, cellHeight, cellWidth, cellHeight);\n    ctx.clip();\n    ctx.fillText(String.fromCharCode(i), i * cellWidth, cellHeight);\n    ctx.restore();\n  }\n  ctx.restore();\n\n  // Colors 0-15\n  ctx.font = getFont(request.fontWeight, request);\n  for (let colorIndex = 0; colorIndex < 16; colorIndex++) {\n    // colors 8-15 are bold\n    if (colorIndex === 8) {\n      ctx.font = getFont(request.fontWeightBold, request);\n    }\n    const y = (colorIndex + 2) * cellHeight;\n    // Draw ascii characters\n    for (let i = 0; i < 256; i++) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\n      ctx.clip();\n      ctx.fillStyle = request.ansiColors[colorIndex];\n      ctx.fillText(String.fromCharCode(i), i * cellWidth, y);\n      ctx.restore();\n    }\n  }\n  ctx.restore();\n\n  // Support is patchy for createImageBitmap at the moment, pass a canvas back\n  // if support is lacking as drawImage works there too. Firefox is also\n  // included here as ImageBitmap appears both buggy and has horrible\n  // performance (tested on v55).\n  if (!('createImageBitmap' in context) || isFirefox) {\n    // Don't attempt to clear background colors if createImageBitmap is not supported\n    if (canvas instanceof HTMLCanvasElement) {\n      // Just return the HTMLCanvas if it's a HTMLCanvasElement\n      return canvas;\n    } else {\n      // Transfer to an ImageBitmap is this is an OffscreenCanvas\n      return new Promise(r => r(canvas.transferToImageBitmap()));\n    }\n  }\n\n  const charAtlasImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n  // Remove the background color from the image so characters may overlap\n  const r = parseInt(request.background.substr(1, 2), 16);\n  const g = parseInt(request.background.substr(3, 2), 16);\n  const b = parseInt(request.background.substr(5, 2), 16);\n  clearColor(charAtlasImageData, r, g, b);\n\n  return context.createImageBitmap(charAtlasImageData);\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n */\nfunction clearColor(imageData: ImageData, r: number, g: number, b: number): void {\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    }\n  }\n}\n\nfunction getFont(fontWeight: FontWeight, request: ICharAtlasRequest): string {\n  return `${fontWeight} ${request.fontSize * request.devicePixelRatio}px ${request.fontFamily}`;\n}\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from '../Types';\r\nimport { IEventEmitter, ITheme } from 'xterm';\r\n\r\n/**\r\n * Flags used to render terminal text properly.\r\n */\r\nexport enum FLAGS {\r\n  BOLD = 1,\r\n  UNDERLINE = 2,\r\n  BLINK = 4,\r\n  INVERSE = 8,\r\n  INVISIBLE = 16,\r\n  DIM = 32\r\n}\r\n\r\nexport interface IRenderer extends IEventEmitter {\r\n  dimensions: IRenderDimensions;\r\n  colorManager: IColorManager;\r\n\r\n  setTheme(theme: ITheme): IColorSet;\r\n  onWindowResize(devicePixelRatio: number): void;\r\n  onResize(cols: number, rows: number, didCharSizeChange: boolean): void;\r\n  onCharSizeChanged(): void;\r\n  onBlur(): void;\r\n  onFocus(): void;\r\n  onSelectionChanged(start: [number, number], end: [number, number]): void;\r\n  onCursorMove(): void;\r\n  onOptionsChanged(): void;\r\n  clear(): void;\r\n  refreshRows(start: number, end: number): void;\r\n}\r\n\r\nexport interface IColorManager {\r\n  colors: IColorSet;\r\n}\r\n\r\nexport interface IColorSet {\r\n  foreground: string;\r\n  background: string;\r\n  cursor: string;\r\n  cursorAccent: string;\r\n  selection: string;\r\n  ansi: string[];\r\n}\r\n\r\nexport interface IRenderDimensions {\r\n  scaledCharWidth: number;\r\n  scaledCharHeight: number;\r\n  scaledCellWidth: number;\r\n  scaledCellHeight: number;\r\n  scaledCharLeft: number;\r\n  scaledCharTop: number;\r\n  scaledCanvasWidth: number;\r\n  scaledCanvasHeight: number;\r\n  canvasWidth: number;\r\n  canvasHeight: number;\r\n  actualCellWidth: number;\r\n  actualCellHeight: number;\r\n}\r\n\r\nexport interface IRenderLayer {\r\n  /**\r\n   * Called when the terminal loses focus.\r\n   */\r\n  onBlur(terminal: ITerminal): void;\r\n\r\n  /**\r\n   * * Called when the terminal gets focus.\r\n   */\r\n  onFocus(terminal: ITerminal): void;\r\n\r\n  /**\r\n   * Called when the cursor is moved.\r\n   */\r\n  onCursorMove(terminal: ITerminal): void;\r\n\r\n  /**\r\n   * Called when options change.\r\n   */\r\n  onOptionsChanged(terminal: ITerminal): void;\r\n\r\n  /**\r\n   * Called when the theme changes.\r\n   */\r\n  onThemeChanged(terminal: ITerminal, colorSet: IColorSet): void;\r\n\r\n  /**\r\n   * Called when the data in the grid has changed (or needs to be rendered\r\n   * again).\r\n   */\r\n  onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void;\r\n\r\n  /**\r\n   * Calls when the selection changes.\r\n   */\r\n  onSelectionChanged(terminal: ITerminal, start: [number, number], end: [number, number]): void;\r\n\r\n  /**\r\n   * Resize the render layer.\r\n   */\r\n  resize(terminal: ITerminal, dim: IRenderDimensions, charSizeChanged: boolean): void;\r\n\r\n  /**\r\n   * Clear the state of the render layer.\r\n   */\r\n  reset(terminal: ITerminal): void;\r\n}\r\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_ATTR_INDEX, CHAR_DATA_CODE_INDEX, CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX } from '../Buffer';\nimport { FLAGS, IColorSet, IRenderDimensions } from './Types';\nimport { CharData, IBuffer, ICharMeasure, ITerminal } from '../Types';\nimport { GridCache } from './GridCache';\nimport { BaseRenderLayer, INVERTED_DEFAULT_COLOR } from './BaseRenderLayer';\n\n/**\n * This CharData looks like a null character, which will forc a clear and render\n * when the character changes (a regular space ' ' character may not as it's\n * drawn state is a cleared cell).\n */\nconst OVERLAP_OWNED_CHAR_DATA: CharData = [null, '', 0, -1];\n\nexport class TextRenderLayer extends BaseRenderLayer {\n  private _state: GridCache<CharData>;\n  private _characterWidth: number;\n  private _characterFont: string;\n  private _characterOverlapCache: { [key: string]: boolean } = {};\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, alpha: boolean) {\n    super(container, 'text', zIndex, alpha, colors);\n    this._state = new GridCache<CharData>();\n  }\n\n  public resize(terminal: ITerminal, dim: IRenderDimensions, charSizeChanged: boolean): void {\n    super.resize(terminal, dim, charSizeChanged);\n\n    // Clear the character width cache if the font or width has changed\n    const terminalFont = this._getFont(terminal, false);\n    if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\n      this._characterWidth = dim.scaledCharWidth;\n      this._characterFont = terminalFont;\n      this._characterOverlapCache = {};\n    }\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state.clear();\n    this._state.resize(terminal.cols, terminal.rows);\n  }\n\n  public reset(terminal: ITerminal): void {\n    this._state.clear();\n    this.clearAll();\n  }\n\n  public onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void {\n    // Resize has not been called yet\n    if (this._state.cache.length === 0) {\n      return;\n    }\n\n    for (let y = startRow; y <= endRow; y++) {\n      const row = y + terminal.buffer.ydisp;\n      const line = terminal.buffer.lines.get(row);\n\n      this.clearCells(0, y, terminal.cols, 1);\n      // for (let x = 0; x < terminal.cols; x++) {\n      //   this._state.cache[x][y] = null;\n      // }\n\n      for (let x = 0; x < terminal.cols; x++) {\n        const charData = line[x];\n        const code: number = <number>charData[CHAR_DATA_CODE_INDEX];\n        const char: string = charData[CHAR_DATA_CHAR_INDEX];\n        const attr: number = charData[CHAR_DATA_ATTR_INDEX];\n        let width: number = charData[CHAR_DATA_WIDTH_INDEX];\n\n        // The character to the left is a wide character, drawing is owned by\n        // the char at x-1\n        if (width === 0) {\n          // this._state.cache[x][y] = null;\n          continue;\n        }\n\n        // If the character is a space and the character to the left is an\n        // overlapping character, skip the character and allow the overlapping\n        // char to take full control over this character's cell.\n        if (code === 32 /*' '*/) {\n          if (x > 0) {\n            const previousChar: CharData = line[x - 1];\n            if (this._isOverlapping(previousChar)) {\n              continue;\n            }\n          }\n        }\n\n        // Skip rendering if the character is identical\n        // const state = this._state.cache[x][y];\n        // if (state && state[CHAR_DATA_CHAR_INDEX] === char && state[CHAR_DATA_ATTR_INDEX] === attr) {\n        //   // Skip render, contents are identical\n        //   this._state.cache[x][y] = charData;\n        //   continue;\n        // }\n\n        // Clear the old character was not a space with the default background\n        // const wasInverted = !!(state && state[CHAR_DATA_ATTR_INDEX] && state[CHAR_DATA_ATTR_INDEX] >> 18 & FLAGS.INVERSE);\n        // if (state && !(state[CHAR_DATA_CODE_INDEX] === 32 /*' '*/ && (state[CHAR_DATA_ATTR_INDEX] & 0x1ff) >= 256 && !wasInverted)) {\n        //   this._clearChar(x, y);\n        // }\n        // this._state.cache[x][y] = charData;\n\n        const flags = attr >> 18;\n        let bg = attr & 0x1ff;\n\n        // Skip rendering if the character is invisible\n        const isDefaultBackground = bg >= 256;\n        const isInvisible = flags & FLAGS.INVISIBLE;\n        const isInverted = flags & FLAGS.INVERSE;\n        if (!code || (code === 32 /*' '*/ && isDefaultBackground && !isInverted) || isInvisible) {\n          continue;\n        }\n\n        // If the character is an overlapping char and the character to the right is a\n        // space, take ownership of the cell to the right.\n        if (width !== 0 && this._isOverlapping(charData)) {\n          // If the character is overlapping, we want to force a re-render on every\n          // frame. This is specifically to work around the case where two\n          // overlaping chars `a` and `b` are adjacent, the cursor is moved to b and a\n          // space is added. Without this, the first half of `b` would never\n          // get removed, and `a` would not re-render because it thinks it's\n          // already in the correct state.\n          // this._state.cache[x][y] = OVERLAP_OWNED_CHAR_DATA;\n          if (x < line.length - 1 && line[x + 1][CHAR_DATA_CODE_INDEX] === 32 /*' '*/) {\n            width = 2;\n            // this._clearChar(x + 1, y);\n            // The overlapping char's char data will force a clear and render when the\n            // overlapping char is no longer to the left of the character and also when\n            // the space changes to another character.\n            // this._state.cache[x + 1][y] = OVERLAP_OWNED_CHAR_DATA;\n          }\n        }\n\n        let fg = (attr >> 9) & 0x1ff;\n\n        // If inverse flag is on, the foreground should become the background.\n        if (isInverted) {\n          const temp = bg;\n          bg = fg;\n          fg = temp;\n          if (fg === 256) {\n            fg = INVERTED_DEFAULT_COLOR;\n          }\n          if (bg === 257) {\n            bg = INVERTED_DEFAULT_COLOR;\n          }\n        }\n\n        // Clear the cell next to this character if it's wide\n        if (width === 2) {\n          // this.clearCells(x + 1, y, 1, 1);\n        }\n\n        // Draw background\n        if (bg < 256) {\n          this._ctx.save();\n          this._ctx.fillStyle = (bg === INVERTED_DEFAULT_COLOR ? this._colors.foreground : this._colors.ansi[bg]);\n          this.fillCells(x, y, width, 1);\n          this._ctx.restore();\n        }\n\n        this._ctx.save();\n        if (flags & FLAGS.BOLD) {\n          this._ctx.font = this._getFont(terminal, true);\n          // Convert the FG color to the bold variant\n          if (fg < 8) {\n            fg += 8;\n          }\n        }\n\n        if (flags & FLAGS.UNDERLINE) {\n          if (fg === INVERTED_DEFAULT_COLOR) {\n            this._ctx.fillStyle = this._colors.background;\n          } else if (fg < 256) {\n            // 256 color support\n            this._ctx.fillStyle = this._colors.ansi[fg];\n          } else {\n            this._ctx.fillStyle = this._colors.foreground;\n          }\n          this.fillBottomLineAtCells(x, y);\n        }\n\n        this.drawChar(terminal, char, code, width, x, y, fg, bg, !!(flags & FLAGS.BOLD), !!(flags & FLAGS.DIM));\n\n        this._ctx.restore();\n      }\n    }\n  }\n\n  public onOptionsChanged(terminal: ITerminal): void {\n    this.setTransparency(terminal, terminal.options.allowTransparency);\n  }\n\n  /**\n   * Whether a character is overlapping to the next cell.\n   */\n  private _isOverlapping(charData: CharData): boolean {\n    // Only single cell characters can be overlapping, rendering issues can\n    // occur without this check\n    if (charData[CHAR_DATA_WIDTH_INDEX] !== 1) {\n      return false;\n    }\n\n    // We assume that any ascii character will not overlap\n    const code = charData[CHAR_DATA_CODE_INDEX];\n    if (code < 256) {\n      return false;\n    }\n\n    // Deliver from cache if available\n    const char = charData[CHAR_DATA_CHAR_INDEX];\n    if (this._characterOverlapCache.hasOwnProperty(char)) {\n      return this._characterOverlapCache[char];\n    }\n\n    // Setup the font\n    this._ctx.save();\n    this._ctx.font = this._characterFont;\n\n    // Measure the width of the character, but Math.floor it\n    // because that is what the renderer does when it calculates\n    // the character dimensions we are comparing against\n    const overlaps = Math.floor(this._ctx.measureText(char).width) > this._characterWidth;\n\n    // Restore the original context\n    this._ctx.restore();\n\n    // Cache and return\n    this._characterOverlapCache[char] = overlaps;\n    return overlaps;\n  }\n\n  /**\n   * Clear the charcater at the cell specified.\n   * @param x The column of the char.\n   * @param y The row of the char.\n   */\n  private _clearChar(x: number, y: number): void {\n    let colsToClear = 1;\n    // Clear the adjacent character if it was wide\n    const state = this._state.cache[x][y];\n    if (state && state[CHAR_DATA_WIDTH_INDEX] === 2) {\n      colsToClear = 2;\n    }\n    this.clearCells(x, y, colsToClear, 1);\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer, ICharMeasure, ITerminal } from '../Types';\nimport { CHAR_DATA_ATTR_INDEX } from '../Buffer';\nimport { GridCache } from './GridCache';\nimport { FLAGS, IColorSet, IRenderDimensions } from './Types';\nimport { BaseRenderLayer } from './BaseRenderLayer';\n\nexport class SelectionRenderLayer extends BaseRenderLayer {\n  private _state: {start: [number, number], end: [number, number]};\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet) {\n    super(container, 'selection', zIndex, true, colors);\n    this._state = {\n      start: null,\n      end: null\n    };\n  }\n\n  public resize(terminal: ITerminal, dim: IRenderDimensions, charSizeChanged: boolean): void {\n    super.resize(terminal, dim, charSizeChanged);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      start: null,\n      end: null\n    };\n  }\n\n  public reset(terminal: ITerminal): void {\n    if (this._state.start && this._state.end) {\n      this._state = {\n        start: null,\n        end: null\n      };\n      this.clearAll();\n    }\n  }\n\n  public onSelectionChanged(terminal: ITerminal, start: [number, number], end: [number, number]): void {\n    // Selection has not changed\n    if (this._state.start === start || this._state.end === end) {\n      return;\n    }\n\n    // Remove all selections\n    this.clearAll();\n\n    // Selection does not exist\n    if (!start || !end) {\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.ydisp;\n    const viewportEndRow = end[1] - terminal.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    // Draw first row\n    const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n    const startRowEndCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : terminal.cols;\n    this._ctx.fillStyle = this._colors.selection;\n    this.fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\n\n    // Draw middle rows\n    const middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\n    this.fillCells(0, viewportCappedStartRow + 1, terminal.cols, middleRowsCount);\n\n    // Draw final row\n    if (viewportCappedStartRow !== viewportCappedEndRow) {\n      // Only draw viewportEndRow if it's not the same as viewportStartRow\n      const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : terminal.cols;\n      this.fillCells(0, viewportCappedEndRow, endCol, 1);\n    }\n\n    // Save state for next render\n    this._state.start = [start[0], start[1]];\n    this._state.end = [end[0], end[1]];\n  }\n}\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from '../Buffer';\r\nimport { TextRenderLayer } from './TextRenderLayer';\r\nimport { SelectionRenderLayer } from './SelectionRenderLayer';\r\nimport { CursorRenderLayer } from './CursorRenderLayer';\r\nimport { ColorManager } from './ColorManager';\r\nimport { BaseRenderLayer } from './BaseRenderLayer';\r\nimport { IRenderLayer, IColorSet, IRenderer, IRenderDimensions } from './Types';\r\nimport { ITerminal } from '../Types';\r\nimport { LinkRenderLayer } from './LinkRenderLayer';\r\nimport { EventEmitter } from '../EventEmitter';\r\nimport { RenderDebouncer } from '../utils/RenderDebouncer';\r\nimport { ScreenDprMonitor } from '../utils/ScreenDprMonitor';\r\nimport { ITheme } from 'xterm';\r\n\r\nexport class Renderer extends EventEmitter implements IRenderer {\r\n  private _renderDebouncer: RenderDebouncer;\r\n\r\n  private _renderLayers: IRenderLayer[];\r\n  private _devicePixelRatio: number;\r\n  private _screenDprMonitor: ScreenDprMonitor;\r\n  private _isPaused: boolean = false;\r\n  private _needsFullRefresh: boolean = false;\r\n\r\n  public colorManager: ColorManager;\r\n  public dimensions: IRenderDimensions;\r\n\r\n  constructor(private _terminal: ITerminal, theme: ITheme) {\r\n    super();\r\n    this.colorManager = new ColorManager();\r\n    if (theme) {\r\n      this.colorManager.setTheme(theme);\r\n    }\r\n\r\n    this._renderLayers = [\r\n      new TextRenderLayer(this._terminal.screenElement, 0, this.colorManager.colors, this._terminal.options.allowTransparency),\r\n      new SelectionRenderLayer(this._terminal.screenElement, 1, this.colorManager.colors),\r\n      new LinkRenderLayer(this._terminal.screenElement, 2, this.colorManager.colors, this._terminal),\r\n      new CursorRenderLayer(this._terminal.screenElement, 3, this.colorManager.colors)\r\n    ];\r\n    this.dimensions = {\r\n      scaledCharWidth: null,\r\n      scaledCharHeight: null,\r\n      scaledCellWidth: null,\r\n      scaledCellHeight: null,\r\n      scaledCharLeft: null,\r\n      scaledCharTop: null,\r\n      scaledCanvasWidth: null,\r\n      scaledCanvasHeight: null,\r\n      canvasWidth: null,\r\n      canvasHeight: null,\r\n      actualCellWidth: null,\r\n      actualCellHeight: null\r\n    };\r\n    this._devicePixelRatio = window.devicePixelRatio;\r\n    this._updateDimensions();\r\n    this.onOptionsChanged();\r\n\r\n    this._renderDebouncer = new RenderDebouncer(this._terminal, this._renderRows.bind(this));\r\n    this._screenDprMonitor = new ScreenDprMonitor();\r\n    this._screenDprMonitor.setListener(() => this.onWindowResize(window.devicePixelRatio));\r\n\r\n    // Detect whether IntersectionObserver is detected and enable renderer pause\r\n    // and resume based on terminal visibility if so\r\n    if ('IntersectionObserver' in window) {\r\n      const observer = new IntersectionObserver(e => this.onIntersectionChange(e[0]), {threshold: 0});\r\n      observer.observe(this._terminal.element);\r\n    }\r\n  }\r\n\r\n  public onIntersectionChange(entry: IntersectionObserverEntry): void {\r\n    this._isPaused = entry.intersectionRatio === 0;\r\n    if (!this._isPaused && this._needsFullRefresh) {\r\n      this._terminal.refresh(0, this._terminal.rows - 1);\r\n    }\r\n  }\r\n\r\n  public onWindowResize(devicePixelRatio: number): void {\r\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\r\n    // and the terminal needs to refreshed\r\n    if (this._devicePixelRatio !== devicePixelRatio) {\r\n      this._devicePixelRatio = devicePixelRatio;\r\n      this.onResize(this._terminal.cols, this._terminal.rows, true);\r\n    }\r\n  }\r\n\r\n  public setTheme(theme: ITheme): IColorSet {\r\n    this.colorManager.setTheme(theme);\r\n\r\n    // Clear layers and force a full render\r\n    this._renderLayers.forEach(l => {\r\n      l.onThemeChanged(this._terminal, this.colorManager.colors);\r\n      l.reset(this._terminal);\r\n    });\r\n\r\n    if (this._isPaused) {\r\n      this._needsFullRefresh = true;\r\n    } else {\r\n      this._terminal.refresh(0, this._terminal.rows - 1);\r\n    }\r\n\r\n    return this.colorManager.colors;\r\n  }\r\n\r\n  public onResize(cols: number, rows: number, didCharSizeChange: boolean): void {\r\n    // Update character and canvas dimensions\r\n    this._updateDimensions();\r\n\r\n    // Resize all render layers\r\n    this._renderLayers.forEach(l => l.resize(this._terminal, this.dimensions, didCharSizeChange));\r\n\r\n    // Force a refresh\r\n    if (this._isPaused) {\r\n      this._needsFullRefresh = true;\r\n    } else {\r\n      this._terminal.refresh(0, this._terminal.rows - 1);\r\n    }\r\n\r\n    // Resize the screen\r\n    this._terminal.screenElement.style.width = `${this.dimensions.canvasWidth}px`;\r\n    this._terminal.screenElement.style.height = `${this.dimensions.canvasHeight}px`;\r\n\r\n    this.emit('resize', {\r\n      width: this.dimensions.canvasWidth,\r\n      height: this.dimensions.canvasHeight\r\n    });\r\n  }\r\n\r\n  public onCharSizeChanged(): void {\r\n    this.onResize(this._terminal.cols, this._terminal.rows, true);\r\n  }\r\n\r\n  public onBlur(): void {\r\n    this._runOperation(l => l.onBlur(this._terminal));\r\n  }\r\n\r\n  public onFocus(): void {\r\n    this._runOperation(l => l.onFocus(this._terminal));\r\n  }\r\n\r\n  public onSelectionChanged(start: [number, number], end: [number, number]): void {\r\n    this._runOperation(l => l.onSelectionChanged(this._terminal, start, end));\r\n  }\r\n\r\n  public onCursorMove(): void {\r\n    this._runOperation(l => l.onCursorMove(this._terminal));\r\n  }\r\n\r\n  public onOptionsChanged(): void {\r\n    this._runOperation(l => l.onOptionsChanged(this._terminal));\r\n  }\r\n\r\n  public clear(): void {\r\n    this._runOperation(l => l.reset(this._terminal));\r\n  }\r\n\r\n  private _runOperation(operation: (layer: IRenderLayer) => void): void {\r\n    if (this._isPaused) {\r\n      this._needsFullRefresh = true;\r\n    } else {\r\n      this._renderLayers.forEach(l => operation(l));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queues a refresh between two rows (inclusive), to be done on next animation\r\n   * frame.\r\n   * @param {number} start The start row.\r\n   * @param {number} end The end row.\r\n   */\r\n  public refreshRows(start: number, end: number): void {\r\n    if (this._isPaused) {\r\n      this._needsFullRefresh = true;\r\n      return;\r\n    }\r\n    this._renderDebouncer.refresh(start, end);\r\n  }\r\n\r\n  /**\r\n   * Performs the refresh loop callback, calling refresh only if a refresh is\r\n   * necessary before queueing up the next one.\r\n   */\r\n  private _renderRows(start: number, end: number): void {\r\n    this._renderLayers.forEach(l => l.onGridChanged(this._terminal, start, end));\r\n    this._terminal.emit('refresh', {start, end});\r\n  }\r\n\r\n  /**\r\n   * Recalculates the character and canvas dimensions.\r\n   */\r\n  private _updateDimensions(): void {\r\n    // Perform a new measure if the CharMeasure dimensions are not yet available\r\n    if (!this._terminal.charMeasure.width || !this._terminal.charMeasure.height) {\r\n      return;\r\n    }\r\n\r\n    // Calculate the scaled character width. Width is floored as it must be\r\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\r\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\r\n    // clipped to ensure there is no overlap with the next cell.\r\n    this.dimensions.scaledCharWidth = Math.floor(this._terminal.charMeasure.width * window.devicePixelRatio);\r\n\r\n    // Calculate the scaled character height. Height is ceiled in case\r\n    // devicePixelRatio is a floating point number in order to ensure there is\r\n    // enough space to draw the character to the cell.\r\n    this.dimensions.scaledCharHeight = Math.ceil(this._terminal.charMeasure.height * window.devicePixelRatio);\r\n\r\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\r\n    // will be floored because since lineHeight can never be lower then 1, there\r\n    // is a guarentee that the scaled line height will always be larger than\r\n    // scaled char height.\r\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\r\n\r\n    // Calculate the y coordinate within a cell that text should draw from in\r\n    // order to draw in the center of a cell.\r\n    this.dimensions.scaledCharTop = this._terminal.options.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\r\n\r\n    // Calculate the scaled cell width, taking the letterSpacing into account.\r\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\r\n\r\n    // Calculate the x coordinate with a cell that text should draw from in\r\n    // order to draw in the center of a cell.\r\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.options.letterSpacing / 2);\r\n\r\n    // Recalculate the canvas dimensions; scaled* define the actual number of\r\n    // pixel in the canvas\r\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\r\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\r\n\r\n    // The the size of the canvas on the page. It's very important that this\r\n    // rounds to nearest integer and not ceils as browsers often set\r\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\r\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\r\n    // pixel too large for the canvas element size.\r\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\r\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\r\n\r\n    // Get the _actual_ dimensions of an individual cell. This needs to be\r\n    // derived from the canvasWidth/Height calculated above which takes into\r\n    // account window.devicePixelRatio. CharMeasure.width/height by itself is\r\n    // insufficient when the page is not at 100% zoom level as CharMeasure is\r\n    // measured in CSS pixels, but the actual char size on the canvas can\r\n    // differ.\r\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\r\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\r\n  }\r\n}\r\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkHoverEvent, ITerminal, ILinkifierAccessor, IBuffer, ICharMeasure, LinkHoverEventTypes } from '../Types';\nimport { CHAR_DATA_ATTR_INDEX } from '../Buffer';\nimport { GridCache } from './GridCache';\nimport { FLAGS, IColorSet, IRenderDimensions } from './Types';\nimport { BaseRenderLayer, INVERTED_DEFAULT_COLOR } from './BaseRenderLayer';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkHoverEvent = null;\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ILinkifierAccessor) {\n    super(container, 'link', zIndex, true, colors);\n    terminal.linkifier.on(LinkHoverEventTypes.HOVER, (e: ILinkHoverEvent) => this._onLinkHover(e));\n    terminal.linkifier.on(LinkHoverEventTypes.LEAVE, (e: ILinkHoverEvent) => this._onLinkLeave(e));\n  }\n\n  public resize(terminal: ITerminal, dim: IRenderDimensions, charSizeChanged: boolean): void {\n    super.resize(terminal, dim, charSizeChanged);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = null;\n  }\n\n  public reset(terminal: ITerminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this.clearCells(this._state.x, this._state.y, this._state.length, 1);\n      this._state = null;\n    }\n  }\n\n  private _onLinkHover(e: ILinkHoverEvent): void {\n    this._ctx.fillStyle = this._colors.foreground;\n    this.fillBottomLineAtCells(e.x, e.y, e.length);\n    this._state = e;\n  }\n\n  private _onLinkLeave(e: ILinkHoverEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class GridCache<T> {\n  public cache: T[][];\n\n  public constructor() {\n    this.cache = [];\n  }\n\n  public resize(width: number, height: number): void {\n    for (let x = 0; x < width; x++) {\n      if (this.cache.length <= x) {\n        this.cache.push([]);\n      }\n      for (let y = this.cache[x].length; y < height; y++) {\n        this.cache[x].push(null);\n      }\n      this.cache[x].length = height;\n    }\n    this.cache.length = width;\n  }\n\n  public clear(): void {\n    for (let x = 0; x < this.cache.length; x++) {\n      for (let y = 0; y < this.cache[x].length; y++) {\n        this.cache[x][y] = null;\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CODE_INDEX, CHAR_DATA_CHAR_INDEX } from '../Buffer';\nimport { GridCache } from './GridCache';\nimport { FLAGS, IColorSet, IRenderDimensions } from './Types';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { CharData, IBuffer, ICharMeasure, ITerminal, ITerminalOptions } from '../Types';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (terminal: ITerminal, x: number, y: number, charData: CharData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager;\n  private _isFocused: boolean;\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet) {\n    super(container, 'cursor', zIndex, true, colors);\n    this._state = {\n      x: null,\n      y: null,\n      isFocused: null,\n      style: null,\n      width: null,\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n    // TODO: Consider initial options? Maybe onOptionsChanged should be called at the end of open?\n  }\n\n  public resize(terminal: ITerminal, dim: IRenderDimensions, charSizeChanged: boolean): void {\n    super.resize(terminal, dim, charSizeChanged);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: null,\n      y: null,\n      isFocused: null,\n      style: null,\n      width: null,\n    };\n  }\n\n  public reset(terminal: ITerminal): void {\n    this._clearCursor();\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this._cursorBlinkStateManager = null;\n      this.onOptionsChanged(terminal);\n    }\n  }\n\n  public onBlur(terminal: ITerminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.pause();\n    }\n    terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n  }\n\n  public onFocus(terminal: ITerminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.resume(terminal);\n    } else {\n      terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n    }\n  }\n\n  public onOptionsChanged(terminal: ITerminal): void {\n    if (terminal.options.cursorBlink) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, () => {\n          this._render(terminal, true);\n        });\n      }\n    } else {\n      if (this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager.dispose();\n        this._cursorBlinkStateManager = null;\n      }\n      // Request a refresh from the terminal as management of rendering is being\n      // moved back to the terminal\n      terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n    }\n  }\n\n  public onCursorMove(terminal: ITerminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  public onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  private _render(terminal: ITerminal, triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    if (!terminal.cursorState || terminal.cursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = terminal.buffer.ybase + terminal.buffer.y;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.ydisp;\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    const charData = terminal.buffer.lines.get(cursorY)[terminal.buffer.x];\n    if (!charData) {\n      return;\n    }\n\n    if (!terminal.isFocused) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor;\n      this._renderBlurCursor(terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\n      this._ctx.restore();\n      this._state.x = terminal.buffer.x;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = terminal.options.cursorStyle;\n      this._state.width = charData[CHAR_DATA_WIDTH_INDEX];\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === terminal.buffer.x &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === terminal.isFocused &&\n          this._state.style === terminal.options.cursorStyle &&\n          this._state.width === charData[CHAR_DATA_WIDTH_INDEX]) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[terminal.options.cursorStyle || 'block'](terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\n    this._ctx.restore();\n\n    this._state.x = terminal.buffer.x;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.options.cursorStyle;\n    this._state.width = charData[CHAR_DATA_WIDTH_INDEX];\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      this.clearCells(this._state.x, this._state.y, this._state.width, 1);\n      this._state = {\n        x: null,\n        y: null,\n        isFocused: null,\n        style: null,\n        width: null,\n      };\n    }\n  }\n\n  private _renderBarCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor;\n    this.fillLeftLineAtCell(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor;\n    this.fillCells(x, y, charData[CHAR_DATA_WIDTH_INDEX], 1);\n    this._ctx.fillStyle = this._colors.cursorAccent;\n    this.fillCharTrueColor(terminal, charData, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor;\n    this.fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor;\n    this.strokeRectAtCell(x, y, charData[CHAR_DATA_WIDTH_INDEX], 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number;\n  private _blinkStartTimeout: number;\n  private _blinkInterval: number;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number;\n\n  constructor(\n    terminal: ITerminal,\n    private renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (terminal.isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = null;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = null;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n  }\n\n  public restartBlinkAnimation(terminal: ITerminal): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this.renderCallback();\n        this._animationFrame = null;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = <number><any>setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = null;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this.renderCallback();\n        this._animationFrame = null;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = <number><any>setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = null;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this.renderCallback();\n          this._animationFrame = null;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = null;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = null;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n  }\n\n  public resume(terminal: ITerminal): void {\n    this._animationTimeRestarted = null;\n    this._restartInterval();\n    this.restartBlinkAnimation(terminal);\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorSet, IColorManager } from './Types';\nimport { ITheme } from 'xterm';\n\nconst DEFAULT_FOREGROUND = '#ffffff';\nconst DEFAULT_BACKGROUND = '#000000';\nconst DEFAULT_CURSOR = '#ffffff';\nconst DEFAULT_CURSOR_ACCENT = '#000000';\nconst DEFAULT_SELECTION = 'rgba(255, 255, 255, 0.3)';\nexport const DEFAULT_ANSI_COLORS = [\n  // dark:\n  '#2e3436',\n  '#cc0000',\n  '#4e9a06',\n  '#c4a000',\n  '#3465a4',\n  '#75507b',\n  '#06989a',\n  '#d3d7cf',\n  // bright:\n  '#555753',\n  '#ef2929',\n  '#8ae234',\n  '#fce94f',\n  '#729fcf',\n  '#ad7fa8',\n  '#34e2e2',\n  '#eeeeec'\n];\n\n/**\n * Fills an existing 16 length string with the remaining 240 ANSI colors.\n * @param first16Colors The first 16 ANSI colors.\n */\nfunction generate256Colors(first16Colors: string[]): string[] {\n  let colors = first16Colors.slice();\n\n  // Generate colors (16-231)\n  let v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = toPaddedHex(v[(i / 36) % 6 | 0]);\n    const g = toPaddedHex(v[(i / 6) % 6 | 0]);\n    const b = toPaddedHex(v[i % 6]);\n    colors.push(`#${r}${g}${b}`);\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = toPaddedHex(8 + i * 10);\n    colors.push(`#${c}${c}${c}`);\n  }\n\n  return colors;\n}\n\nfunction toPaddedHex(c: number): string {\n  let s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Manages the source of truth for a terminal's colors.\n */\nexport class ColorManager implements IColorManager {\n  public colors: IColorSet;\n\n  constructor() {\n    this.colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selection: DEFAULT_SELECTION,\n      ansi: generate256Colors(DEFAULT_ANSI_COLORS)\n    };\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  public setTheme(theme: ITheme): void {\n    this.colors.foreground = theme.foreground || DEFAULT_FOREGROUND;\n    this.colors.background = theme.background || DEFAULT_BACKGROUND;\n    this.colors.cursor = theme.cursor || DEFAULT_CURSOR;\n    this.colors.cursorAccent = theme.cursorAccent || DEFAULT_CURSOR_ACCENT;\n    this.colors.selection = theme.selection || DEFAULT_SELECTION;\n    this.colors.ansi[0] = theme.black || DEFAULT_ANSI_COLORS[0];\n    this.colors.ansi[1] = theme.red || DEFAULT_ANSI_COLORS[1];\n    this.colors.ansi[2] = theme.green || DEFAULT_ANSI_COLORS[2];\n    this.colors.ansi[3] = theme.yellow || DEFAULT_ANSI_COLORS[3];\n    this.colors.ansi[4] = theme.blue || DEFAULT_ANSI_COLORS[4];\n    this.colors.ansi[5] = theme.magenta || DEFAULT_ANSI_COLORS[5];\n    this.colors.ansi[6] = theme.cyan || DEFAULT_ANSI_COLORS[6];\n    this.colors.ansi[7] = theme.white || DEFAULT_ANSI_COLORS[7];\n    this.colors.ansi[8] = theme.brightBlack || DEFAULT_ANSI_COLORS[8];\n    this.colors.ansi[9] = theme.brightRed || DEFAULT_ANSI_COLORS[9];\n    this.colors.ansi[10] = theme.brightGreen || DEFAULT_ANSI_COLORS[10];\n    this.colors.ansi[11] = theme.brightYellow || DEFAULT_ANSI_COLORS[11];\n    this.colors.ansi[12] = theme.brightBlue || DEFAULT_ANSI_COLORS[12];\n    this.colors.ansi[13] = theme.brightMagenta || DEFAULT_ANSI_COLORS[13];\n    this.colors.ansi[14] = theme.brightCyan || DEFAULT_ANSI_COLORS[14];\n    this.colors.ansi[15] = theme.brightWhite || DEFAULT_ANSI_COLORS[15];\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal } from '../Types';\nimport { IColorSet } from './Types';\nimport { isFirefox } from '../shared/utils/Browser';\nimport { generateCharAtlas, ICharAtlasRequest } from '../shared/CharAtlasGenerator';\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n\ninterface ICharAtlasConfig {\n  fontSize: number;\n  fontFamily: string;\n  fontWeight: string;\n  fontWeightBold: string;\n  scaledCharWidth: number;\n  scaledCharHeight: number;\n  allowTransparency: boolean;\n  colors: IColorSet;\n}\n\ninterface ICharAtlasCacheEntry {\n  bitmap: HTMLCanvasElement | Promise<ImageBitmap>;\n  config: ICharAtlasConfig;\n  ownedBy: ITerminal[];\n}\n\nlet charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n * @param terminal The terminal.\n * @param colors The colors to use.\n */\nexport function acquireCharAtlas(terminal: ITerminal, colors: IColorSet, scaledCharWidth: number, scaledCharHeight: number): HTMLCanvasElement | Promise<ImageBitmap> {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.bitmap;\n      } else {\n        // The configs differ, release the terminal from the entry\n        if (entry.ownedBy.length === 1) {\n          charAtlasCache.splice(i, 1);\n        } else {\n          entry.ownedBy.splice(ownedByIndex, 1);\n        }\n        break;\n      }\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.bitmap;\n    }\n  }\n\n  const canvasFactory = (width: number, height: number) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  };\n\n  const charAtlasConfig: ICharAtlasRequest = {\n    scaledCharWidth,\n    scaledCharHeight,\n    fontSize: terminal.options.fontSize,\n    fontFamily: terminal.options.fontFamily,\n    fontWeight: terminal.options.fontWeight,\n    fontWeightBold: terminal.options.fontWeightBold,\n    background: colors.background,\n    foreground: colors.foreground,\n    ansiColors: colors.ansi,\n    devicePixelRatio: window.devicePixelRatio,\n    allowTransparency: terminal.options.allowTransparency\n  };\n\n  const newEntry: ICharAtlasCacheEntry = {\n    bitmap: generateCharAtlas(window, canvasFactory, charAtlasConfig),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.bitmap;\n}\n\nfunction generateConfig(scaledCharWidth: number, scaledCharHeight: number, terminal: ITerminal, colors: IColorSet): ICharAtlasConfig {\n  const clonedColors = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: null,\n    cursorAccent: null,\n    selection: null,\n    ansi: colors.ansi.slice(0, 16)\n  };\n  return {\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: terminal.options.fontFamily,\n    fontSize: terminal.options.fontSize,\n    fontWeight: terminal.options.fontWeight,\n    fontWeightBold: terminal.options.fontWeightBold,\n    allowTransparency: terminal.options.allowTransparency,\n    colors: clonedColors\n  };\n}\n\nfunction configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i] !== b.colors.ansi[i]) {\n      return false;\n    }\n  }\n  return a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer, IColorSet, IRenderDimensions } from './Types';\nimport { CharData, ITerminal, ITerminalOptions } from '../Types';\nimport { acquireCharAtlas, CHAR_ATLAS_CELL_SPACING } from './CharAtlas';\nimport { CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from '../Buffer';\n\nexport const INVERTED_DEFAULT_COLOR = -1;\nconst DIM_OPACITY = 0.5;\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  private _charAtlas: HTMLCanvasElement | ImageBitmap;\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  private _initCanvas(): void {\n    this._ctx = this._canvas.getContext('2d', {alpha: this._alpha});\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this.clearAll();\n    }\n  }\n\n  public onOptionsChanged(terminal: ITerminal): void {}\n  public onBlur(terminal: ITerminal): void {}\n  public onFocus(terminal: ITerminal): void {}\n  public onCursorMove(terminal: ITerminal): void {}\n  public onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void {}\n  public onSelectionChanged(terminal: ITerminal, start: [number, number], end: [number, number]): void {}\n\n  public onThemeChanged(terminal: ITerminal, colorSet: IColorSet): void {\n    this._refreshCharAtlas(terminal, colorSet);\n  }\n\n  protected setTransparency(terminal: ITerminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = <HTMLCanvasElement>this._canvas.cloneNode();\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._colors);\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: ITerminal, colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = null;\n    const result = acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n    if (result instanceof HTMLCanvasElement) {\n      this._charAtlas = result;\n    } else {\n      result.then(bitmap => this._charAtlas = bitmap);\n    }\n  }\n\n  public resize(terminal: ITerminal, dim: IRenderDimensions, charSizeChanged: boolean): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this.clearAll();\n    }\n\n    if (charSizeChanged) {\n      this._refreshCharAtlas(terminal, this._colors);\n    }\n  }\n\n  public abstract reset(terminal: ITerminal): void;\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n        width * this._scaledCellWidth,\n        window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected fillLeftLineAtCell(x: number, y: number): void {\n    this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        window.devicePixelRatio,\n        this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n        x * this._scaledCellWidth + window.devicePixelRatio / 2,\n        y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n        width * this._scaledCellWidth - window.devicePixelRatio,\n        (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n          x * this._scaledCellWidth,\n          y * this._scaledCellHeight,\n          width * this._scaledCellWidth,\n          height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background;\n      this._ctx.fillRect(\n          x * this._scaledCellWidth,\n          y * this._scaledCellHeight,\n          width * this._scaledCellWidth,\n          height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param charData The char data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected fillCharTrueColor(terminal: ITerminal, charData: CharData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false);\n    this._ctx.textBaseline = 'top';\n    this._clipRow(terminal, y);\n    this._ctx.fillText(\n        charData[CHAR_DATA_CHAR_INDEX],\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop);\n  }\n\n  /**\n   * Draws a character at a cell. If possible this will draw using the character\n   * atlas to reduce draw time.\n   * @param terminal The terminal.\n   * @param char The character.\n   * @param code The character code.\n   * @param width The width of the character.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param bg The background color, in the format stored within the attributes.\n   * This is used to validate whether a cached image can be used.\n   * @param bold Whether the text is bold.\n   */\n  protected drawChar(terminal: ITerminal, char: string, code: number, width: number, x: number, y: number, fg: number, bg: number, bold: boolean, dim: boolean): void {\n    let colorIndex = 0;\n    if (fg < 256) {\n      colorIndex = fg + 2;\n    } else {\n      // If default color and bold\n      if (bold && terminal.options.enableBold) {\n        colorIndex = 1;\n      }\n    }\n    const isAscii = code < 256;\n    // A color is basic if it is one of the standard normal or bold weight\n    // colors of the characters held in the char atlas. Note that this excludes\n    // the normal weight _light_ color characters.\n    const isBasicColor = (colorIndex > 1 && fg < 16) && (fg < 8 || bold);\n    const isDefaultColor = fg >= 256;\n    const isDefaultBackground = bg >= 256;\n    if (this._charAtlas && isAscii && (isBasicColor || isDefaultColor) && isDefaultBackground) {\n      // ImageBitmap's draw about twice as fast as from a canvas\n      const charAtlasCellWidth = this._scaledCharWidth + CHAR_ATLAS_CELL_SPACING;\n      const charAtlasCellHeight = this._scaledCharHeight + CHAR_ATLAS_CELL_SPACING;\n\n      // Apply alpha to dim the character\n      if (dim) {\n        this._ctx.globalAlpha = DIM_OPACITY;\n      }\n\n      // Draw the non-bold version of the same color if bold is not enabled\n      if (bold && !terminal.options.enableBold) {\n        // Ignore default color as it's not touched above\n        if (colorIndex > 1) {\n          colorIndex -= 8;\n        }\n      }\n\n      this._ctx.drawImage(this._charAtlas,\n          code * charAtlasCellWidth,\n          colorIndex * charAtlasCellHeight,\n          charAtlasCellWidth,\n          this._scaledCharHeight,\n          x * this._scaledCellWidth + this._scaledCharLeft,\n          y * this._scaledCellHeight + this._scaledCharTop,\n          charAtlasCellWidth,\n          this._scaledCharHeight);\n    } else {\n      this._drawUncachedChar(terminal, char, width, fg, x, y, bold && terminal.options.enableBold, dim);\n    }\n    // This draws the atlas (for debugging purposes)\n    // this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    // this._ctx.drawImage(this._charAtlas, 0, 0);\n  }\n\n  /**\n   * Draws a character at a cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character.\n   * @param terminal The terminal.\n   * @param char The character.\n   * @param width The width of the character.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   */\n  private _drawUncachedChar(terminal: ITerminal, char: string, width: number, fg: number, x: number, y: number, bold: boolean, dim: boolean): void {\n    this._ctx.save();\n    this._ctx.font = this._getFont(terminal, bold);\n    this._ctx.textBaseline = 'top';\n\n    if (fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background;\n    } else if (fg < 256) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[fg];\n    } else {\n      this._ctx.fillStyle = this._colors.foreground;\n    }\n\n    this._clipRow(terminal, y);\n\n    // Apply alpha to dim the character\n    if (dim) {\n      this._ctx.globalAlpha = DIM_OPACITY;\n    }\n    // Draw the character\n    this._ctx.fillText(\n        char,\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop);\n    this._ctx.restore();\n  }\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param terminal The terminal.\n   * @param y The row to clip.\n   */\n  private _clipRow(terminal: ITerminal, y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n        0,\n        y * this._scaledCellHeight,\n        terminal.cols * this._scaledCellWidth,\n        this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: ITerminal, isBold: boolean): string {\n    const fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\n\n    return `${fontWeight} ${terminal.options.fontSize * window.devicePixelRatio}px ${terminal.options.fontFamily}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal } from '../Types';\nimport { IMouseZoneManager, IMouseZone } from './Types';\n\nconst HOVER_DURATION = 500;\n\n/**\n * The MouseZoneManager allows components to register zones within the terminal\n * that trigger hover and click callbacks.\n *\n * This class was intentionally made not so robust initially as the only case it\n * needed to support was single-line links which never overlap. Improvements can\n * be made in the future.\n */\nexport class MouseZoneManager implements IMouseZoneManager {\n  private _zones: IMouseZone[] = [];\n\n  private _areZonesActive: boolean = false;\n  private _mouseMoveListener: (e: MouseEvent) => any;\n  private _clickListener: (e: MouseEvent) => any;\n\n  private _tooltipTimeout: number = null;\n  private _currentZone: IMouseZone = null;\n  private _lastHoverCoords: [number, number] = [null, null];\n\n  constructor(\n    private _terminal: ITerminal\n  ) {\n    this._terminal.element.addEventListener('mousedown', e => this._onMouseDown(e));\n\n    // These events are expensive, only listen to it when mouse zones are active\n    this._mouseMoveListener = e => this._onMouseMove(e);\n    this._clickListener = e => this._onClick(e);\n  }\n\n  public add(zone: IMouseZone): void {\n    this._zones.push(zone);\n    if (this._zones.length === 1) {\n      this._activate();\n    }\n  }\n\n  public clearAll(start?: number, end?: number): void {\n    // Exit if there's nothing to clear\n    if (this._zones.length === 0) {\n      return;\n    }\n\n    // Clear all if start/end weren't set\n    if (!end) {\n      start = 0;\n      end = this._terminal.rows - 1;\n    }\n\n    // Iterate through zones and clear them out if they're within the range\n    for (let i = 0; i < this._zones.length; i++) {\n      const zone = this._zones[i];\n      if (zone.y > start && zone.y <= end + 1) {\n        if (this._currentZone && this._currentZone === zone) {\n          this._currentZone.leaveCallback();\n          this._currentZone = null;\n        }\n        this._zones.splice(i--, 1);\n      }\n    }\n\n    // Deactivate the mouse zone manager if all the zones have been removed\n    if (this._zones.length === 0) {\n      this._deactivate();\n    }\n  }\n\n  private _activate(): void {\n    if (!this._areZonesActive) {\n      this._areZonesActive = true;\n      this._terminal.element.addEventListener('mousemove', this._mouseMoveListener);\n      this._terminal.element.addEventListener('click', this._clickListener);\n    }\n  }\n\n  private _deactivate(): void {\n    if (this._areZonesActive) {\n      this._areZonesActive = false;\n      this._terminal.element.removeEventListener('mousemove', this._mouseMoveListener);\n      this._terminal.element.removeEventListener('click', this._clickListener);\n    }\n  }\n\n  private _onMouseMove(e: MouseEvent): void {\n    // TODO: Ideally this would only clear the hover state when the mouse moves\n    // outside of the mouse zone\n    if (this._lastHoverCoords[0] !== e.pageX || this._lastHoverCoords[1] !== e.pageY) {\n      this._onHover(e);\n      // Record the current coordinates\n      this._lastHoverCoords = [e.pageX, e.pageY];\n    }\n  }\n\n  private _onHover(e: MouseEvent): void {\n    const zone = this._findZoneEventAt(e);\n\n    // Do nothing if the zone is the same\n    if (zone === this._currentZone) {\n      return;\n    }\n\n    // Fire the hover end callback and cancel any existing timer if a new zone\n    // is being hovered\n    if (this._currentZone) {\n      this._currentZone.leaveCallback();\n      this._currentZone = null;\n      if (this._tooltipTimeout) {\n        clearTimeout(this._tooltipTimeout);\n      }\n    }\n\n    // Exit if there is not zone\n    if (!zone) {\n      return;\n    }\n    this._currentZone = zone;\n\n    // Trigger the hover callback\n    if (zone.hoverCallback) {\n      zone.hoverCallback(e);\n    }\n\n    // Restart the tooltip timeout\n    this._tooltipTimeout = <number><any>setTimeout(() => this._onTooltip(e), HOVER_DURATION);\n  }\n\n  private _onTooltip(e: MouseEvent): void {\n    this._tooltipTimeout = null;\n    const zone = this._findZoneEventAt(e);\n    if (zone && zone.tooltipCallback) {\n      zone.tooltipCallback(e);\n    }\n  }\n\n  private _onMouseDown(e: MouseEvent): void {\n    // Ignore the event if there are no zones active\n    if (!this._areZonesActive) {\n      return;\n    }\n\n    // Find the active zone, prevent event propagation if found to prevent other\n    // components from handling the mouse event.\n    const zone = this._findZoneEventAt(e);\n    if (zone) {\n      if (zone.willLinkActivate(e)) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    }\n  }\n\n  private _onClick(e: MouseEvent): void {\n    // Find the active zone and click it if found\n    const zone = this._findZoneEventAt(e);\n    if (zone) {\n      zone.clickCallback(e);\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  private _findZoneEventAt(e: MouseEvent): IMouseZone {\n    const coords = this._terminal.mouseHelper.getCoords(e, this._terminal.screenElement, this._terminal.charMeasure, this._terminal.options.lineHeight, this._terminal.cols, this._terminal.rows);\n    if (!coords) {\n      return null;\n    }\n    for (let i = 0; i < this._zones.length; i++) {\n      const zone = this._zones[i];\n      if (zone.y === coords[1] && zone.x1 <= coords[0] && zone.x2 > coords[0]) {\n        return zone;\n      }\n    }\n    return null;\n  }\n}\n\nexport class MouseZone implements IMouseZone {\n  constructor(\n    public x1: number,\n    public x2: number,\n    public y: number,\n    public clickCallback: (e: MouseEvent) => any,\n    public hoverCallback: (e: MouseEvent) => any,\n    public tooltipCallback: (e: MouseEvent) => any,\n    public leaveCallback: () => void,\n    public willLinkActivate: (e: MouseEvent) => boolean\n  ) {\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal, ISelectionManager } from '../Types';\n\ninterface IWindow extends Window {\n  clipboardData?: {\n    getData(format: string): string;\n    setData(format: string, data: string): void;\n  };\n}\n\ndeclare var window: IWindow;\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string, isMSWindows: boolean): string {\n  if (isMSWindows) {\n    return text.replace(/\\r?\\n/g, '\\r');\n  }\n  return text;\n}\n\n/**\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\n * @param text The pasted text to bracket\n */\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\n  if (bracketedPasteMode) {\n    return '\\x1b[200~' + text + '\\x1b[201~';\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param {ClipboardEvent} ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, term: ITerminal, selectionManager: ISelectionManager): void {\n  if (term.browser.isMSIE) {\n    window.clipboardData.setData('Text', selectionManager.selectionText);\n  } else {\n    ev.clipboardData.setData('text/plain', selectionManager.selectionText);\n  }\n\n  // Prevent or the original text will be copied.\n  ev.preventDefault();\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n * @param {ClipboardEvent} ev The original paste event to be handled\n * @param {Terminal} term The terminal on which to apply the handled paste event\n */\nexport function pasteHandler(ev: ClipboardEvent, term: ITerminal): void {\n  ev.stopPropagation();\n\n  let text: string;\n\n  let dispatchPaste = function(text: string): void {\n    text = prepareTextForTerminal(text, term.browser.isMSWindows);\n    text = bracketTextForPaste(text, term.bracketedPasteMode);\n    term.handler(text);\n    term.textarea.value = '';\n    term.emit('paste', text);\n    term.cancel(ev);\n  };\n\n  if (term.browser.isMSIE) {\n    if (window.clipboardData) {\n      text = window.clipboardData.getData('Text');\n      dispatchPaste(text);\n    }\n  } else {\n    if (ev.clipboardData) {\n      text = ev.clipboardData.getData('text/plain');\n      dispatchPaste(text);\n    }\n  }\n}\n\n/**\n * Moves the textarea under the mouse cursor and focuses it.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n */\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement): void {\n  // Bring textarea at the cursor position\n  textarea.style.position = 'fixed';\n  textarea.style.width = '20px';\n  textarea.style.height = '20px';\n  textarea.style.left = (ev.clientX - 10) + 'px';\n  textarea.style.top = (ev.clientY - 10) + 'px';\n  textarea.style.zIndex = '1000';\n\n  textarea.focus();\n\n  // Reset the terminal textarea's styling\n  // Timeout needs to be long enough for click event to be handled.\n  setTimeout(() => {\n    textarea.style.position = null;\n    textarea.style.width = null;\n    textarea.style.height = null;\n    textarea.style.left = null;\n    textarea.style.top = null;\n    textarea.style.zIndex = null;\n  }, 200);\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n * @param selectionManager The terminal's selection manager.\n * @param shouldSelectWord If true and there is no selection the current word will be selected\n */\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, selectionManager: ISelectionManager, shouldSelectWord: boolean): void {\n  moveTextAreaUnderMouseCursor(ev, textarea);\n\n  if (shouldSelectWord && !selectionManager.isClickInSelection(ev)) {\n    selectionManager.selectWordAtCursor(ev);\n  }\n\n  // Get textarea ready to copy from the context menu\n  textarea.value = selectionManager.selectionText;\n  textarea.select();\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal, ICircularList, LineData } from '../Types';\nimport { C0 } from '../EscapeSequences';\n\nenum Direction {\n  Up = 'A',\n  Down = 'B',\n  Right = 'C',\n  Left = 'D'\n}\n\nexport class AltClickHandler {\n  private _startRow: number;\n  private _startCol: number;\n  private _endRow: number;\n  private _endCol: number;\n  private _lines: ICircularList<LineData>;\n\n  constructor(\n    private _mouseEvent: MouseEvent,\n    private _terminal: ITerminal\n  ) {\n    this._lines = this._terminal.buffer.lines;\n    this._startCol = this._terminal.buffer.x;\n    this._startRow = this._terminal.buffer.y;\n\n    [this._endCol, this._endRow] = this._terminal.mouseHelper.getCoords(\n      this._mouseEvent,\n      this._terminal.element,\n      this._terminal.charMeasure,\n      this._terminal.options.lineHeight,\n      this._terminal.cols,\n      this._terminal.rows,\n      false\n    ).map((coordinate: number) => {\n      return coordinate - 1;\n    });\n  }\n\n  /**\n   * Writes the escape sequences of arrows to the terminal\n   */\n  public move(): void {\n    if (this._mouseEvent.altKey) {\n      this._terminal.send(this._arrowSequences());\n    }\n  }\n\n  /**\n   * Concatenates all the arrow sequences together.\n   * Resets the starting row to an unwrapped row, moves to the requested row,\n   * then moves to requested col.\n   */\n  private _arrowSequences(): string {\n    return this._resetStartingRow() +\n      this._moveToRequestedRow() +\n      this._moveToRequestedCol();\n  }\n\n  /**\n   * If the initial position of the cursor is on a row that is wrapped, move the\n   * cursor up to the first row that is not wrapped to have accurate vertical\n   * positioning.\n   */\n  private _resetStartingRow(): string {\n    let startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n    let endRow = this._endRow;\n\n    if (this._moveToRequestedRow().length === 0) {\n      return '';\n    } else {\n      return repeat(this._bufferLine(\n        this._startCol, this._startRow, this._startCol,\n        this._startRow - this._wrappedRowsForRow(this._startRow), false\n      ).length, this._sequence(Direction.Left));\n    }\n  }\n\n  /**\n   * Using the reset starting and ending row, move to the requested row,\n   * ignoring wrapped rows\n   */\n  private _moveToRequestedRow(): string {\n    let startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\n    let endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n\n    let rowsToMove = Math.abs(startRow - endRow) - this._wrappedRowsCount();\n\n    return repeat(rowsToMove, this._sequence(this._verticalDirection()));\n  }\n\n  /**\n   * Move to the requested col on the ending row\n   */\n  private _moveToRequestedCol(): string {\n    let startRow;\n    if (this._moveToRequestedRow().length > 0) {\n      startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n    } else {\n      startRow = this._startRow;\n    }\n\n    let endRow = this._endRow;\n    let direction = this._horizontalDirection();\n\n    return repeat(this._bufferLine(\n      this._startCol, startRow, this._endCol, endRow,\n      direction === Direction.Right\n    ).length, this._sequence(direction));\n  }\n\n  /**\n   * Utility functions\n   */\n\n  /**\n   * Calculates the number of wrapped rows between the unwrapped starting and\n   * ending rows. These rows need to ignored since the cursor skips over them.\n   */\n  private _wrappedRowsCount(): number {\n    let wrappedRows = 0;\n    let startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\n    let endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n\n    for (let i = 0; i < Math.abs(startRow - endRow); i++) {\n      let direction = this._verticalDirection() === Direction.Up ? -1 : 1;\n\n      if ((<any>this._lines.get(startRow + (direction * i))).isWrapped) {\n        wrappedRows++;\n      }\n    }\n\n    return wrappedRows;\n  }\n\n  /**\n   * Calculates the number of wrapped rows that make up a given row.\n   * @param currentRow The row to determine how many wrapped rows make it up\n   */\n  private _wrappedRowsForRow(currentRow: number): number {\n    let rowCount = 0;\n    let lineWraps = (<any>this._lines.get(currentRow)).isWrapped;\n\n    while (lineWraps && currentRow >= 0 && currentRow < this._terminal.rows) {\n      rowCount++;\n      currentRow--;\n      lineWraps = (<any>this._lines.get(currentRow)).isWrapped;\n    }\n\n    return rowCount;\n  }\n\n  /**\n   * Direction determiners\n   */\n\n  /**\n   * Determines if the right or left arrow is needed\n   */\n  private _horizontalDirection(): Direction {\n    let startRow;\n    if (this._moveToRequestedRow().length > 0) {\n      startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n    } else {\n      startRow = this._startRow;\n    }\n\n    if ((this._startCol < this._endCol &&\n      startRow <= this._endRow) || // down/right or same y/right\n      (this._startCol >= this._endCol &&\n      startRow < this._endRow)) {  // down/left or same y/left\n      return Direction.Right;\n    } else {\n      return Direction.Left;\n    }\n  }\n\n  /**\n   * Determines if the up or down arrow is needed\n   */\n  private _verticalDirection(): Direction {\n    if (this._startRow > this._endRow) {\n      return Direction.Up;\n    } else {\n      return Direction.Down;\n    }\n  }\n\n  /**\n   * Constructs the string of chars in the buffer from a starting row and col\n   * to an ending row and col\n   * @param startCol The starting column position\n   * @param startRow The starting row position\n   * @param endCol The ending column position\n   * @param endRow The ending row position\n   * @param forward Direction to move\n   */\n  private _bufferLine(\n    startCol: number,\n    startRow: number,\n    endCol: number,\n    endRow: number,\n    forward: boolean\n  ): string {\n    let currentCol = startCol;\n    let currentRow = startRow;\n    let bufferStr = '';\n\n    while (currentCol !== endCol || currentRow !== endRow) {\n      currentCol += forward ? 1 : -1;\n\n      if (forward && currentCol > this._terminal.cols - 1) {\n        bufferStr += this._terminal.buffer.translateBufferLineToString(\n          currentRow, false, startCol, currentCol\n        );\n        currentCol = 0;\n        startCol = 0;\n        currentRow++;\n      } else if (!forward && currentCol < 0) {\n        bufferStr += this._terminal.buffer.translateBufferLineToString(\n          currentRow, false, 0, startCol + 1\n        );\n        currentCol = this._terminal.cols - 1;\n        startCol = currentCol;\n        currentRow--;\n      }\n    }\n\n    return bufferStr + this._terminal.buffer.translateBufferLineToString(\n      currentRow, false, startCol, currentCol\n    );\n  }\n\n  /**\n   * Constructs the escape sequence for clicking an arrow\n   * @param direction The direction to move\n   */\n  private _sequence(direction: Direction): string {\n    const mod = this._terminal.applicationCursor ? 'O' : '[';\n    return C0.ESC + mod + direction;\n  }\n}\n\n/**\n * Returns a string repeated a given number of times\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n * @param count The number of times to repeat the string\n * @param string The string that is to be repeated\n */\nfunction repeat(count: number, str: string): string {\n  count = Math.floor(count);\n  let rpt = '';\n  for (let i = 0; i < count; i++) {\n    rpt += str;\n  }\n  return rpt;\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorSet } from './renderer/Types';\nimport { ITerminal, IViewport } from './Types';\nimport { CharMeasure } from './utils/CharMeasure';\n\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport implements IViewport {\n  public scrollBarWidth: number = 0;\n  private currentRowHeight: number = 0;\n  private lastRecordedBufferLength: number = 0;\n  private lastRecordedViewportHeight: number = 0;\n  private lastRecordedBufferHeight: number = 0;\n  private lastTouchY: number;\n\n  /**\n   * Creates a new Viewport.\n   * @param terminal The terminal this viewport belongs to.\n   * @param viewportElement The DOM element acting as the viewport.\n   * @param scrollArea The DOM element acting as the scroll area.\n   * @param charMeasure A DOM element used to measure the character size of. the terminal.\n   */\n  constructor(\n    private terminal: ITerminal,\n    private viewportElement: HTMLElement,\n    private scrollArea: HTMLElement,\n    private charMeasure: CharMeasure\n  ) {\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that case,\n    // therefore we account for a standard amount to make it visible\n    this.scrollBarWidth = (this.viewportElement.offsetWidth - this.scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    this.viewportElement.addEventListener('scroll', this.onScroll.bind(this));\n\n    // Perform this async to ensure the CharMeasure is ready.\n    setTimeout(() => this.syncScrollArea(), 0);\n  }\n\n  public onThemeChanged(colors: IColorSet): void {\n    this.viewportElement.style.backgroundColor = colors.background;\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   */\n  private refresh(): void {\n    if (this.charMeasure.height > 0) {\n      this.currentRowHeight = this.terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio;\n      this.lastRecordedViewportHeight = this.viewportElement.offsetHeight;\n      const newBufferHeight = Math.round(this.currentRowHeight * this.lastRecordedBufferLength) + (this.lastRecordedViewportHeight - this.terminal.renderer.dimensions.canvasHeight);\n      if (this.lastRecordedBufferHeight !== newBufferHeight) {\n        this.lastRecordedBufferHeight = newBufferHeight;\n        this.scrollArea.style.height = this.lastRecordedBufferHeight + 'px';\n      }\n    }\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(): void {\n    if (this.lastRecordedBufferLength !== this.terminal.buffer.lines.length) {\n      // If buffer height changed\n      this.lastRecordedBufferLength = this.terminal.buffer.lines.length;\n      this.refresh();\n    } else if (this.lastRecordedViewportHeight !== (<any>this.terminal).renderer.dimensions.canvasHeight) {\n      // If viewport height changed\n      this.refresh();\n    } else {\n      // If size has changed, refresh viewport\n      if (this.terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio !== this.currentRowHeight) {\n        this.refresh();\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this.terminal.buffer.ydisp * this.currentRowHeight;\n    if (this.viewportElement.scrollTop !== scrollTop) {\n      this.viewportElement.scrollTop = scrollTop;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private onScroll(ev: Event): void {\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\n    // which causes the terminal to scroll the buffer to the top\n    if (!this.viewportElement.offsetParent) {\n      return;\n    }\n\n    const newRow = Math.round(this.viewportElement.scrollTop / this.currentRowHeight);\n    const diff = newRow - this.terminal.buffer.ydisp;\n    this.terminal.scrollLines(diff, true);\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public onWheel(ev: WheelEvent): void {\n    if (ev.deltaY === 0) {\n      // Do nothing if it's not a vertical scroll event\n      return;\n    }\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let multiplier = 1;\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      multiplier = this.currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      multiplier = this.currentRowHeight * this.terminal.rows;\n    }\n    this.viewportElement.scrollTop += ev.deltaY * multiplier;\n    // Prevent the page from scrolling when the terminal scrolls\n    ev.preventDefault();\n  }\n\n  /**\n   * Handles the touchstart event, recording the touch occurred.\n   * @param ev The touch event.\n   */\n  public onTouchStart(ev: TouchEvent): void {\n    this.lastTouchY = ev.touches[0].pageY;\n  }\n\n  /**\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\n   * @param ev The touch event.\n   */\n  public onTouchMove(ev: TouchEvent): void {\n    let deltaY = this.lastTouchY - ev.touches[0].pageY;\n    this.lastTouchY = ev.touches[0].pageY;\n    if (deltaY === 0) {\n      return;\n    }\n    this.viewportElement.scrollTop += deltaY;\n    ev.preventDefault();\n  }\n}\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { Terminal as PublicTerminal, ITerminalOptions as IPublicTerminalOptions, IEventEmitter as IPublicEventEmitter, IEventEmitter } from 'xterm';\r\nimport { IColorSet, IRenderer } from './renderer/Types';\r\nimport { IMouseZoneManager } from './input/Types';\r\n\r\nexport type CustomKeyEventHandler = (event: KeyboardEvent) => boolean;\r\n\r\nexport type XtermListener = (...args: any[]) => void;\r\n\r\nexport type CharData = [number, string, number, number];\r\nexport type LineData = CharData[];\r\n\r\nexport type LinkMatcherHandler = (event: MouseEvent, uri: string) => boolean | void;\r\nexport type LinkMatcherValidationCallback = (uri: string, callback: (isValid: boolean) => void) => void;\r\n\r\nexport enum LinkHoverEventTypes {\r\n  HOVER = 'linkhover',\r\n  TOOLTIP = 'linktooltip',\r\n  LEAVE = 'linkleave'\r\n}\r\n\r\n/**\r\n * This interface encapsulates everything needed from the Terminal by the\r\n * InputHandler. This cleanly separates the large amount of methods needed by\r\n * InputHandler cleanly from the ITerminal interface.\r\n */\r\nexport interface IInputHandlingTerminal extends IEventEmitter {\r\n  element: HTMLElement;\r\n  options: ITerminalOptions;\r\n  cols: number;\r\n  rows: number;\r\n  charset: ICharset;\r\n  gcharset: number;\r\n  glevel: number;\r\n  charsets: ICharset[];\r\n  applicationKeypad: boolean;\r\n  applicationCursor: boolean;\r\n  originMode: boolean;\r\n  insertMode: boolean;\r\n  wraparoundMode: boolean;\r\n  bracketedPasteMode: boolean;\r\n  defAttr: number;\r\n  curAttr: number;\r\n  prefix: string;\r\n  savedCols: number;\r\n  x10Mouse: boolean;\r\n  vt200Mouse: boolean;\r\n  normalMouse: boolean;\r\n  mouseEvents: boolean;\r\n  sendFocus: boolean;\r\n  utfMouse: boolean;\r\n  sgrMouse: boolean;\r\n  urxvtMouse: boolean;\r\n  cursorHidden: boolean;\r\n\r\n  buffers: IBufferSet;\r\n  buffer: IBuffer;\r\n  viewport: IViewport;\r\n  selectionManager: ISelectionManager;\r\n\r\n  bell(): void;\r\n  focus(): void;\r\n  convertEol: boolean;\r\n  updateRange(y: number): void;\r\n  scroll(isWrapped?: boolean): void;\r\n  setgLevel(g: number): void;\r\n  eraseAttr(): number;\r\n  eraseRight(x: number, y: number): void;\r\n  eraseLine(y: number): void;\r\n  eraseLeft(x: number, y: number): void;\r\n  blankLine(cur?: boolean, isWrapped?: boolean): LineData;\r\n  is(term: string): boolean;\r\n  send(data: string): void;\r\n  setgCharset(g: number, charset: ICharset): void;\r\n  resize(x: number, y: number): void;\r\n  log(text: string, data?: any): void;\r\n  reset(): void;\r\n  showCursor(): void;\r\n  refresh(start: number, end: number): void;\r\n  matchColor(r1: number, g1: number, b1: number): number;\r\n  error(text: string, data?: any): void;\r\n  setOption(key: string, value: any): void;\r\n}\r\n\r\nexport interface IViewport {\r\n  scrollBarWidth: number;\r\n  syncScrollArea(): void;\r\n  onWheel(ev: WheelEvent): void;\r\n  onTouchStart(ev: TouchEvent): void;\r\n  onTouchMove(ev: TouchEvent): void;\r\n  onThemeChanged(colors: IColorSet): void;\r\n}\r\n\r\nexport interface ICompositionHelper {\r\n  compositionstart(): void;\r\n  compositionupdate(ev: CompositionEvent): void;\r\n  compositionend(): void;\r\n  updateCompositionElements(dontRecurse?: boolean): void;\r\n  keydown(ev: KeyboardEvent): boolean;\r\n}\r\n\r\n/**\r\n * Handles actions generated by the parser.\r\n */\r\nexport interface IInputHandler {\r\n  addChar(char: string, code: number): void;\r\n\r\n  /** C0 BEL */ bell(): void;\r\n  /** C0 LF */ lineFeed(): void;\r\n  /** C0 CR */ carriageReturn(): void;\r\n  /** C0 BS */ backspace(): void;\r\n  /** C0 HT */ tab(): void;\r\n  /** C0 SO */ shiftOut(): void;\r\n  /** C0 SI */ shiftIn(): void;\r\n\r\n  /** CSI @ */ insertChars(params?: number[]): void;\r\n  /** CSI A */ cursorUp(params?: number[]): void;\r\n  /** CSI B */ cursorDown(params?: number[]): void;\r\n  /** CSI C */ cursorForward(params?: number[]): void;\r\n  /** CSI D */ cursorBackward(params?: number[]): void;\r\n  /** CSI E */ cursorNextLine(params?: number[]): void;\r\n  /** CSI F */ cursorPrecedingLine(params?: number[]): void;\r\n  /** CSI G */ cursorCharAbsolute(params?: number[]): void;\r\n  /** CSI H */ cursorPosition(params?: number[]): void;\r\n  /** CSI I */ cursorForwardTab(params?: number[]): void;\r\n  /** CSI J */ eraseInDisplay(params?: number[]): void;\r\n  /** CSI K */ eraseInLine(params?: number[]): void;\r\n  /** CSI L */ insertLines(params?: number[]): void;\r\n  /** CSI M */ deleteLines(params?: number[]): void;\r\n  /** CSI P */ deleteChars(params?: number[]): void;\r\n  /** CSI S */ scrollUp(params?: number[]): void;\r\n  /** CSI T */ scrollDown(params?: number[]): void;\r\n  /** CSI X */ eraseChars(params?: number[]): void;\r\n  /** CSI Z */ cursorBackwardTab(params?: number[]): void;\r\n  /** CSI ` */ charPosAbsolute(params?: number[]): void;\r\n  /** CSI a */ HPositionRelative(params?: number[]): void;\r\n  /** CSI b */ repeatPrecedingCharacter(params?: number[]): void;\r\n  /** CSI c */ sendDeviceAttributes(params?: number[]): void;\r\n  /** CSI d */ linePosAbsolute(params?: number[]): void;\r\n  /** CSI e */ VPositionRelative(params?: number[]): void;\r\n  /** CSI f */ HVPosition(params?: number[]): void;\r\n  /** CSI g */ tabClear(params?: number[]): void;\r\n  /** CSI h */ setMode(params?: number[]): void;\r\n  /** CSI l */ resetMode(params?: number[]): void;\r\n  /** CSI m */ charAttributes(params?: number[]): void;\r\n  /** CSI n */ deviceStatus(params?: number[]): void;\r\n  /** CSI p */ softReset(params?: number[]): void;\r\n  /** CSI q */ setCursorStyle(params?: number[]): void;\r\n  /** CSI r */ setScrollRegion(params?: number[]): void;\r\n  /** CSI s */ saveCursor(params?: number[]): void;\r\n  /** CSI u */ restoreCursor(params?: number[]): void;\r\n}\r\n\r\nexport interface ILinkMatcher {\r\n  id: number;\r\n  regex: RegExp;\r\n  handler: LinkMatcherHandler;\r\n  hoverTooltipCallback?: LinkMatcherHandler;\r\n  hoverLeaveCallback?: () => void;\r\n  matchIndex?: number;\r\n  validationCallback?: LinkMatcherValidationCallback;\r\n  priority?: number;\r\n  willLinkActivate?: (event: MouseEvent, uri: string) => boolean;\r\n}\r\n\r\nexport interface ICharset {\r\n  [key: string]: string;\r\n}\r\n\r\nexport interface ILinkHoverEvent {\r\n  x: number;\r\n  y: number;\r\n  length: number;\r\n}\r\n\r\nexport interface ITerminal extends PublicTerminal, IElementAccessor, IBufferAccessor, ILinkifierAccessor {\r\n  screenElement: HTMLElement;\r\n  selectionManager: ISelectionManager;\r\n  charMeasure: ICharMeasure;\r\n  renderer: IRenderer;\r\n  browser: IBrowser;\r\n  writeBuffer: string[];\r\n  cursorHidden: boolean;\r\n  cursorState: number;\r\n  defAttr: number;\r\n  options: ITerminalOptions;\r\n  buffer: IBuffer;\r\n  buffers: IBufferSet;\r\n  isFocused: boolean;\r\n  mouseHelper: IMouseHelper;\r\n  viewport: IViewport;\r\n  bracketedPasteMode: boolean;\r\n  applicationCursor: boolean;\r\n\r\n  /**\r\n   * Emit the 'data' event and populate the given data.\r\n   * @param data The data to populate in the event.\r\n   */\r\n  handler(data: string): void;\r\n  send(data: string): void;\r\n  scrollLines(disp: number, suppressScrollEvent?: boolean): void;\r\n  cancel(ev: Event, force?: boolean): boolean | void;\r\n  log(text: string): void;\r\n  showCursor(): void;\r\n  blankLine(cur?: boolean, isWrapped?: boolean, cols?: number): LineData;\r\n}\r\n\r\nexport interface IBufferAccessor {\r\n  buffer: IBuffer;\r\n}\r\n\r\nexport interface IElementAccessor {\r\n  element: HTMLElement;\r\n}\r\n\r\nexport interface ILinkifierAccessor {\r\n  linkifier: ILinkifier;\r\n}\r\n\r\nexport interface IMouseHelper {\r\n  getCoords(event: {pageX: number, pageY: number}, element: HTMLElement, charMeasure: ICharMeasure, lineHeight: number, colCount: number, rowCount: number, isSelection?: boolean): [number, number];\r\n  getRawByteCoords(event: MouseEvent, element: HTMLElement, charMeasure: ICharMeasure, lineHeight: number, colCount: number, rowCount: number): { x: number, y: number };\r\n}\r\n\r\nexport interface ICharMeasure {\r\n  width: number;\r\n  height: number;\r\n  measure(options: ITerminalOptions): void;\r\n}\r\n\r\n// TODO: The options that are not in the public API should be reviewed\r\nexport interface ITerminalOptions extends IPublicTerminalOptions {\r\n  cancelEvents?: boolean;\r\n  convertEol?: boolean;\r\n  debug?: boolean;\r\n  handler?: (data: string) => void;\r\n  screenKeys?: boolean;\r\n  termName?: string;\r\n  useFlowControl?: boolean;\r\n}\r\n\r\nexport interface IBuffer {\r\n  lines: ICircularList<LineData>;\r\n  ydisp: number;\r\n  ybase: number;\r\n  y: number;\r\n  x: number;\r\n  tabs: any;\r\n  scrollBottom: number;\r\n  scrollTop: number;\r\n  savedY: number;\r\n  savedX: number;\r\n  isCursorInViewport: boolean;\r\n  translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol?: number, endCol?: number): string;\r\n  nextStop(x?: number): number;\r\n  prevStop(x?: number): number;\r\n}\r\n\r\nexport interface IBufferSet extends IEventEmitter {\r\n  alt: IBuffer;\r\n  normal: IBuffer;\r\n  active: IBuffer;\r\n\r\n  activateNormalBuffer(): void;\r\n  activateAltBuffer(): void;\r\n}\r\n\r\nexport interface ICircularList<T> extends IEventEmitter {\r\n  length: number;\r\n  maxLength: number;\r\n  forEach: (callbackfn: (value: T, index: number) => void) => void;\r\n\r\n  get(index: number): T;\r\n  set(index: number, value: T): void;\r\n  push(value: T): void;\r\n  pop(): T;\r\n  splice(start: number, deleteCount: number, ...items: T[]): void;\r\n  trimStart(count: number): void;\r\n  shiftElements(start: number, count: number, offset: number): void;\r\n}\r\n\r\nexport interface ISelectionManager {\r\n  selectionText: string;\r\n  selectionStart: [number, number];\r\n  selectionEnd: [number, number];\r\n\r\n  disable(): void;\r\n  enable(): void;\r\n  setSelection(row: number, col: number, length: number): void;\r\n  isClickInSelection(event: MouseEvent): boolean;\r\n  selectWordAtCursor(event: MouseEvent): void;\r\n}\r\n\r\nexport interface ILinkifier extends IEventEmitter {\r\n  attachToDom(mouseZoneManager: IMouseZoneManager): void;\r\n  linkifyRows(start: number, end: number): void;\r\n  setHypertextLinkHandler(handler: LinkMatcherHandler): void;\r\n  setHypertextValidationCallback(callback: LinkMatcherValidationCallback): void;\r\n  registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options?: ILinkMatcherOptions): number;\r\n  deregisterLinkMatcher(matcherId: number): boolean;\r\n}\r\n\r\nexport interface ILinkMatcherOptions {\r\n  /**\r\n   * The index of the link from the regex.match(text) call. This defaults to 0\r\n   * (for regular expressions without capture groups).\r\n   */\r\n  matchIndex?: number;\r\n  /**\r\n   * A callback that validates an individual link, returning true if valid and\r\n   * false if invalid.\r\n   */\r\n  validationCallback?: LinkMatcherValidationCallback;\r\n  /**\r\n   * A callback that fires when the mouse hovers over a link.\r\n   */\r\n  tooltipCallback?: LinkMatcherHandler;\r\n  /**\r\n   * A callback that fires when the mouse leaves a link that was hovered.\r\n   */\r\n  leaveCallback?: () => void;\r\n  /**\r\n   * The priority of the link matcher, this defines the order in which the link\r\n   * matcher is evaluated relative to others, from highest to lowest. The\r\n   * default value is 0.\r\n   */\r\n  priority?: number;\r\n  /**\r\n   * A callback that fires when the mousedown and click events occur that\r\n   * determines whether a link will be activated upon click. This enables\r\n   * only activating a link when a certain modifier is held down, if not the\r\n   * mouse event will continue propagation (eg. double click to select word).\r\n   */\r\n  willLinkActivate?: (event: MouseEvent, uri: string) => boolean;\r\n}\r\n\r\nexport interface IBrowser {\r\n  isNode: boolean;\r\n  userAgent: string;\r\n  platform: string;\r\n  isFirefox: boolean;\r\n  isMSIE: boolean;\r\n  isMac: boolean;\r\n  isIpad: boolean;\r\n  isIphone: boolean;\r\n  isMSWindows: boolean;\r\n}\r\n\r\nexport interface ISoundManager {\r\n  playBellSound(): void;\r\n}\r\n","/**\r\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\r\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\r\n * @license MIT\r\n *\r\n * Originally forked from (with the author's permission):\r\n *   Fabrice Bellard's javascript vt100 for jslinux:\r\n *   http://bellard.org/jslinux/\r\n *   Copyright (c) 2011 Fabrice Bellard\r\n *   The original design remains. The terminal itself\r\n *   has been extended to include xterm CSI codes, among\r\n *   other features.\r\n *\r\n * Terminal Emulation References:\r\n *   http://vt100.net/\r\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\r\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\r\n *   http://invisible-island.net/vttest/\r\n *   http://www.inwap.com/pdp10/ansicode.txt\r\n *   http://linux.die.net/man/4/console_codes\r\n *   http://linux.die.net/man/7/urxvt\r\n */\r\n\r\nimport { ICharset, IInputHandlingTerminal, IViewport, ICompositionHelper, ITerminalOptions, ITerminal, IBrowser, ILinkifier, ILinkMatcherOptions, CustomKeyEventHandler, LinkMatcherHandler, LinkMatcherValidationCallback, CharData, LineData } from './Types';\r\nimport { IMouseZoneManager } from './input/Types';\r\nimport { IRenderer } from './renderer/Types';\r\nimport { BufferSet } from './BufferSet';\r\nimport { Buffer, MAX_BUFFER_SIZE } from './Buffer';\r\nimport { CompositionHelper } from './CompositionHelper';\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { Viewport } from './Viewport';\r\nimport { rightClickHandler, moveTextAreaUnderMouseCursor, pasteHandler, copyHandler } from './handlers/Clipboard';\r\nimport { CircularList } from './utils/CircularList';\r\nimport { C0 } from './EscapeSequences';\r\nimport { InputHandler } from './InputHandler';\r\nimport { Parser } from './Parser';\r\nimport { Renderer } from './renderer/Renderer';\r\nimport { Linkifier } from './Linkifier';\r\nimport { SelectionManager } from './SelectionManager';\r\nimport { CharMeasure } from './utils/CharMeasure';\r\nimport * as Browser from './shared/utils/Browser';\r\nimport * as Strings from './Strings';\r\nimport { MouseHelper } from './utils/MouseHelper';\r\nimport { CHARSETS } from './Charsets';\r\nimport { DEFAULT_BELL_SOUND, SoundManager } from './SoundManager';\r\nimport { DEFAULT_ANSI_COLORS } from './renderer/ColorManager';\r\nimport { MouseZoneManager } from './input/MouseZoneManager';\r\nimport { AccessibilityManager } from './AccessibilityManager';\r\nimport { ScreenDprMonitor } from './utils/ScreenDprMonitor';\r\nimport { ITheme, ILocalizableStrings } from 'xterm';\r\n\r\n// reg + shift key mappings for digits and special chars\r\nconst KEYCODE_KEY_MAPPINGS = {\r\n  // digits 0-9\r\n  48: ['0', ')'],\r\n  49: ['1', '!'],\r\n  50: ['2', '@'],\r\n  51: ['3', '#'],\r\n  52: ['4', '$'],\r\n  53: ['5', '%'],\r\n  54: ['6', '^'],\r\n  55: ['7', '&'],\r\n  56: ['8', '*'],\r\n  57: ['9', '('],\r\n\r\n  // special chars\r\n  186: [';', ':'],\r\n  187: ['=', '+'],\r\n  188: [',', '<'],\r\n  189: ['-', '_'],\r\n  190: ['.', '>'],\r\n  191: ['/', '?'],\r\n  192: ['`', '~'],\r\n  219: ['[', '{'],\r\n  220: ['\\\\', '|'],\r\n  221: [']', '}'],\r\n  222: ['\\'', '\"']\r\n};\r\n\r\n// Let it work inside Node.js for automated testing purposes.\r\nconst document = (typeof window !== 'undefined') ? window.document : null;\r\n\r\n/**\r\n * The amount of write requests to queue before sending an XOFF signal to the\r\n * pty process. This number must be small in order for ^C and similar sequences\r\n * to be responsive.\r\n */\r\nconst WRITE_BUFFER_PAUSE_THRESHOLD = 5;\r\n\r\n/**\r\n * The number of writes to perform in a single batch before allowing the\r\n * renderer to catch up with a 0ms setTimeout.\r\n */\r\nconst WRITE_BATCH_SIZE = 300;\r\n\r\nconst DEFAULT_OPTIONS: ITerminalOptions = {\r\n  cols: 80,\r\n  rows: 24,\r\n  convertEol: false,\r\n  termName: 'xterm',\r\n  cursorBlink: false,\r\n  cursorStyle: 'block',\r\n  bellSound: DEFAULT_BELL_SOUND,\r\n  bellStyle: 'none',\r\n  enableBold: true,\r\n  fontFamily: 'courier-new, courier, monospace',\r\n  fontSize: 15,\r\n  fontWeight: 'normal',\r\n  fontWeightBold: 'bold',\r\n  lineHeight: 1.0,\r\n  letterSpacing: 0,\r\n  scrollback: 1000,\r\n  screenKeys: false,\r\n  screenReaderMode: false,\r\n  debug: false,\r\n  macOptionIsMeta: false,\r\n  cancelEvents: false,\r\n  disableStdin: false,\r\n  useFlowControl: false,\r\n  allowTransparency: false,\r\n  tabStopWidth: 8,\r\n  theme: null,\r\n  rightClickSelectsWord: Browser.isMac\r\n  // programFeatures: false,\r\n  // focusKeys: false,\r\n};\r\n\r\nexport class Terminal extends EventEmitter implements ITerminal, IInputHandlingTerminal {\r\n  public textarea: HTMLTextAreaElement;\r\n  public element: HTMLElement;\r\n  public screenElement: HTMLElement;\r\n\r\n  /**\r\n   * The HTMLElement that the terminal is created in, set by Terminal.open.\r\n   */\r\n  private parent: HTMLElement;\r\n  private context: Window;\r\n  private document: Document;\r\n  private body: HTMLBodyElement;\r\n  private viewportScrollArea: HTMLElement;\r\n  private viewportElement: HTMLElement;\r\n  private helperContainer: HTMLElement;\r\n  private compositionView: HTMLElement;\r\n  private charSizeStyleElement: HTMLStyleElement;\r\n\r\n  private visualBellTimer: number;\r\n\r\n  public browser: IBrowser = <any>Browser;\r\n\r\n  public options: ITerminalOptions;\r\n  private colors: any;\r\n\r\n  // TODO: This can be changed to an enum or boolean, 0 and 1 seem to be the only options\r\n  public cursorState: number;\r\n  public cursorHidden: boolean;\r\n  public convertEol: boolean;\r\n\r\n  private sendDataQueue: string;\r\n  private customKeyEventHandler: CustomKeyEventHandler;\r\n\r\n  // modes\r\n  public applicationKeypad: boolean;\r\n  public applicationCursor: boolean;\r\n  public originMode: boolean;\r\n  public insertMode: boolean;\r\n  public wraparoundMode: boolean; // defaults: xterm - true, vt100 - false\r\n  public bracketedPasteMode: boolean;\r\n\r\n  // charset\r\n  // The current charset\r\n  public charset: ICharset;\r\n  public gcharset: number;\r\n  public glevel: number;\r\n  public charsets: ICharset[];\r\n\r\n  // mouse properties\r\n  private decLocator: boolean; // This is unstable and never set\r\n  public x10Mouse: boolean;\r\n  public vt200Mouse: boolean;\r\n  private vt300Mouse: boolean; // This is unstable and never set\r\n  public normalMouse: boolean;\r\n  public mouseEvents: boolean;\r\n  public sendFocus: boolean;\r\n  public utfMouse: boolean;\r\n  public sgrMouse: boolean;\r\n  public urxvtMouse: boolean;\r\n\r\n  // misc\r\n  private refreshStart: number;\r\n  private refreshEnd: number;\r\n  public savedCols: number;\r\n\r\n  // stream\r\n  private readable: boolean;\r\n  private writable: boolean;\r\n\r\n  public defAttr: number;\r\n  public curAttr: number;\r\n\r\n  public params: (string | number)[];\r\n  public currentParam: string | number;\r\n  public prefix: string;\r\n  public postfix: string;\r\n\r\n  // user input states\r\n  public writeBuffer: string[];\r\n  private writeInProgress: boolean;\r\n\r\n  /**\r\n   * Whether _xterm.js_ sent XOFF in order to catch up with the pty process.\r\n   * This is a distinct state from writeStopped so that if the user requested\r\n   * XOFF via ^S that it will not automatically resume when the writeBuffer goes\r\n   * below threshold.\r\n   */\r\n  private xoffSentToCatchUp: boolean;\r\n\r\n  /** Whether writing has been stopped as a result of XOFF */\r\n  private writeStopped: boolean;\r\n\r\n  // leftover surrogate high from previous write invocation\r\n  private surrogateHigh: string;\r\n\r\n  // Store if user went browsing history in scrollback\r\n  private userScrolling: boolean;\r\n\r\n  private inputHandler: InputHandler;\r\n  public soundManager: SoundManager;\r\n  private parser: Parser;\r\n  public renderer: IRenderer;\r\n  public selectionManager: SelectionManager;\r\n  public linkifier: ILinkifier;\r\n  public buffers: BufferSet;\r\n  public viewport: IViewport;\r\n  private compositionHelper: ICompositionHelper;\r\n  public charMeasure: CharMeasure;\r\n  private _mouseZoneManager: IMouseZoneManager;\r\n  public mouseHelper: MouseHelper;\r\n  private _accessibilityManager: AccessibilityManager;\r\n  private _screenDprMonitor: ScreenDprMonitor;\r\n\r\n  public cols: number;\r\n  public rows: number;\r\n\r\n  /**\r\n   * Creates a new `Terminal` object.\r\n   *\r\n   * @param {object} options An object containing a set of options, the available options are:\r\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\r\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\r\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\r\n   *\r\n   * @public\r\n   * @class Xterm Xterm\r\n   * @alias module:xterm/src/xterm\r\n   */\r\n  constructor(\r\n    options: ITerminalOptions = {}\r\n  ) {\r\n    super();\r\n    this.options = options;\r\n    this.setup();\r\n  }\r\n\r\n  private setup(): void {\r\n    Object.keys(DEFAULT_OPTIONS).forEach((key) => {\r\n      if (this.options[key] == null) {\r\n        this.options[key] = DEFAULT_OPTIONS[key];\r\n      }\r\n      // TODO: We should move away from duplicate options on the Terminal object\r\n      this[key] = this.options[key];\r\n    });\r\n\r\n    // this.context = options.context || window;\r\n    // this.document = options.document || document;\r\n    // TODO: WHy not document.body?\r\n    this.parent = document ? document.body : null;\r\n\r\n    this.cols = this.options.cols;\r\n    this.rows = this.options.rows;\r\n\r\n    if (this.options.handler) {\r\n      this.on('data', this.options.handler);\r\n    }\r\n\r\n    this.cursorState = 0;\r\n    this.cursorHidden = false;\r\n    this.sendDataQueue = '';\r\n    this.customKeyEventHandler = null;\r\n\r\n    // modes\r\n    this.applicationKeypad = false;\r\n    this.applicationCursor = false;\r\n    this.originMode = false;\r\n    this.insertMode = false;\r\n    this.wraparoundMode = true; // defaults: xterm - true, vt100 - false\r\n    this.bracketedPasteMode = false;\r\n\r\n    // charset\r\n    this.charset = null;\r\n    this.gcharset = null;\r\n    this.glevel = 0;\r\n    // TODO: Can this be just []?\r\n    this.charsets = [null];\r\n\r\n    this.readable = true;\r\n    this.writable = true;\r\n\r\n    this.defAttr = (0 << 18) | (257 << 9) | (256 << 0);\r\n    this.curAttr = (0 << 18) | (257 << 9) | (256 << 0);\r\n\r\n    this.params = [];\r\n    this.currentParam = 0;\r\n    this.prefix = '';\r\n    this.postfix = '';\r\n\r\n    // user input states\r\n    this.writeBuffer = [];\r\n    this.writeInProgress = false;\r\n\r\n    this.xoffSentToCatchUp = false;\r\n    this.writeStopped = false;\r\n    this.surrogateHigh = '';\r\n    this.userScrolling = false;\r\n\r\n    this.inputHandler = new InputHandler(this);\r\n    this.parser = new Parser(this.inputHandler, this);\r\n    // Reuse renderer if the Terminal is being recreated via a reset call.\r\n    this.renderer = this.renderer || null;\r\n    this.selectionManager = this.selectionManager || null;\r\n    this.linkifier = this.linkifier || new Linkifier(this);\r\n    this._mouseZoneManager = this._mouseZoneManager || null;\r\n    this.soundManager = this.soundManager || new SoundManager(this);\r\n\r\n    // Create the terminal's buffers and set the current buffer\r\n    this.buffers = new BufferSet(this);\r\n    if (this.selectionManager) {\r\n      this.selectionManager.clearSelection();\r\n      this.selectionManager.initBuffersListeners();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convenience property to active buffer.\r\n   */\r\n  public get buffer(): Buffer {\r\n    return this.buffers.active;\r\n  }\r\n\r\n  public static get strings(): ILocalizableStrings {\r\n    return Strings;\r\n  }\r\n\r\n  /**\r\n   * back_color_erase feature for xterm.\r\n   */\r\n  public eraseAttr(): number {\r\n    // if (this.is('screen')) return this.defAttr;\r\n    return (this.defAttr & ~0x1ff) | (this.curAttr & 0x1ff);\r\n  }\r\n\r\n  /**\r\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\r\n   */\r\n  public focus(): void {\r\n    if (this.textarea) {\r\n      this.textarea.focus();\r\n    }\r\n  }\r\n\r\n  public get isFocused(): boolean {\r\n    return document.activeElement === this.textarea;\r\n  }\r\n\r\n  /**\r\n   * Retrieves an option's value from the terminal.\r\n   * @param {string} key The option key.\r\n   */\r\n  public getOption(key: string): any {\r\n    if (!(key in DEFAULT_OPTIONS)) {\r\n      throw new Error('No option with key \"' + key + '\"');\r\n    }\r\n\r\n    if (typeof this.options[key] !== 'undefined') {\r\n      return this.options[key];\r\n    }\r\n\r\n    return this[key];\r\n  }\r\n\r\n  /**\r\n   * Sets an option on the terminal.\r\n   * @param {string} key The option key.\r\n   * @param {any} value The option value.\r\n   */\r\n  public setOption(key: string, value: any): void {\r\n    if (!(key in DEFAULT_OPTIONS)) {\r\n      throw new Error('No option with key \"' + key + '\"');\r\n    }\r\n    switch (key) {\r\n      case 'bellStyle':\r\n        if (!value) {\r\n          value = 'none';\r\n        }\r\n        break;\r\n      case 'cursorStyle':\r\n        if (!value) {\r\n          value = 'block';\r\n        }\r\n        break;\r\n      case 'fontWeight':\r\n        if (!value) {\r\n          value = 'normal';\r\n        }\r\n        break;\r\n      case 'fontWeightBold':\r\n        if (!value) {\r\n          value = 'bold';\r\n        }\r\n        break;\r\n      case 'lineHeight':\r\n        if (value < 1) {\r\n          console.warn(`${key} cannot be less than 1, value: ${value}`);\r\n          return;\r\n        }\r\n      case 'tabStopWidth':\r\n        if (value < 1) {\r\n          console.warn(`${key} cannot be less than 1, value: ${value}`);\r\n          return;\r\n        }\r\n        break;\r\n      case 'theme':\r\n        // If open has been called we do not want to set options.theme as the\r\n        // source of truth is owned by the renderer.\r\n        if (this.renderer) {\r\n          this._setTheme(<ITheme>value);\r\n          return;\r\n        }\r\n        break;\r\n      case 'scrollback':\r\n        value = Math.min(value, MAX_BUFFER_SIZE);\r\n\r\n        if (value < 0) {\r\n          console.warn(`${key} cannot be less than 0, value: ${value}`);\r\n          return;\r\n        }\r\n        if (this.options[key] !== value) {\r\n          const newBufferLength = this.rows + value;\r\n          if (this.buffer.lines.length > newBufferLength) {\r\n            const amountToTrim = this.buffer.lines.length - newBufferLength;\r\n            const needsRefresh = (this.buffer.ydisp - amountToTrim < 0);\r\n            this.buffer.lines.trimStart(amountToTrim);\r\n            this.buffer.ybase = Math.max(this.buffer.ybase - amountToTrim, 0);\r\n            this.buffer.ydisp = Math.max(this.buffer.ydisp - amountToTrim, 0);\r\n            if (needsRefresh) {\r\n              this.refresh(0, this.rows - 1);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n    }\r\n    this[key] = value;\r\n    this.options[key] = value;\r\n    switch (key) {\r\n      case 'fontFamily':\r\n      case 'fontSize':\r\n        // When the font changes the size of the cells may change which requires a renderer clear\r\n        this.renderer.clear();\r\n        this.charMeasure.measure(this.options);\r\n        break;\r\n      case 'enableBold':\r\n      case 'letterSpacing':\r\n      case 'lineHeight':\r\n      case 'fontWeight':\r\n      case 'fontWeightBold':\r\n        const didCharSizeChange = (key === 'fontWeight' || key === 'fontWeightBold' || key === 'enableBold');\r\n\r\n        // When the font changes the size of the cells may change which requires a renderer clear\r\n        this.renderer.clear();\r\n        this.renderer.onResize(this.cols, this.rows, didCharSizeChange);\r\n        this.refresh(0, this.rows - 1);\r\n      case 'scrollback':\r\n        this.buffers.resize(this.cols, this.rows);\r\n        this.viewport.syncScrollArea();\r\n        break;\r\n      case 'screenReaderMode':\r\n        if (value) {\r\n          if (!this._accessibilityManager) {\r\n            this._accessibilityManager = new AccessibilityManager(this);\r\n          }\r\n        } else {\r\n          if (this._accessibilityManager) {\r\n            this._accessibilityManager.dispose();\r\n            this._accessibilityManager = null;\r\n          }\r\n        }\r\n        break;\r\n      case 'tabStopWidth': this.buffers.setupTabStops(); break;\r\n    }\r\n    // Inform renderer of changes\r\n    if (this.renderer) {\r\n      this.renderer.onOptionsChanged();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Binds the desired focus behavior on a given terminal object.\r\n   */\r\n  private _onTextAreaFocus(): void {\r\n    if (this.sendFocus) {\r\n      this.send(C0.ESC + '[I');\r\n    }\r\n    this.element.classList.add('focus');\r\n    this.showCursor();\r\n    this.emit('focus');\r\n  }\r\n\r\n  /**\r\n   * Blur the terminal, calling the blur function on the terminal's underlying\r\n   * textarea.\r\n   */\r\n  public blur(): void {\r\n    return this.textarea.blur();\r\n  }\r\n\r\n  /**\r\n   * Binds the desired blur behavior on a given terminal object.\r\n   */\r\n  private _onTextAreaBlur(): void {\r\n    // Text can safely be removed on blur. Doing it earlier could interfere with\r\n    // screen readers reading it out.\r\n    this.textarea.value = '';\r\n    this.refresh(this.buffer.y, this.buffer.y);\r\n    if (this.sendFocus) {\r\n      this.send(C0.ESC + '[O');\r\n    }\r\n    this.element.classList.remove('focus');\r\n    this.emit('blur');\r\n  }\r\n\r\n  /**\r\n   * Initialize default behavior\r\n   */\r\n  private initGlobal(): void {\r\n    this.bindKeys();\r\n\r\n    // Bind clipboard functionality\r\n    on(this.element, 'copy', (event: ClipboardEvent) => {\r\n      // If mouse events are active it means the selection manager is disabled and\r\n      // copy should be handled by the host program.\r\n      if (!this.hasSelection()) {\r\n        return;\r\n      }\r\n      copyHandler(event, this, this.selectionManager);\r\n    });\r\n    const pasteHandlerWrapper = event => pasteHandler(event, this);\r\n    on(this.textarea, 'paste', pasteHandlerWrapper);\r\n    on(this.element, 'paste', pasteHandlerWrapper);\r\n\r\n    // Handle right click context menus\r\n    if (Browser.isFirefox) {\r\n      // Firefox doesn't appear to fire the contextmenu event on right click\r\n      on(this.element, 'mousedown', (event: MouseEvent) => {\r\n        if (event.button === 2) {\r\n          rightClickHandler(event, this.textarea, this.selectionManager, this.options.rightClickSelectsWord);\r\n        }\r\n      });\r\n    } else {\r\n      on(this.element, 'contextmenu', (event: MouseEvent) => {\r\n        rightClickHandler(event, this.textarea, this.selectionManager, this.options.rightClickSelectsWord);\r\n      });\r\n    }\r\n\r\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\r\n    // middle click to paste selection works. This only appears to work in Chrome\r\n    // at the time is writing.\r\n    if (Browser.isLinux) {\r\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\r\n      // that the regular click event doesn't fire for the middle mouse button.\r\n      on(this.element, 'auxclick', (event: MouseEvent) => {\r\n        if (event.button === 1) {\r\n          moveTextAreaUnderMouseCursor(event, this.textarea);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply key handling to the terminal\r\n   */\r\n  private bindKeys(): void {\r\n    const self = this;\r\n    on(this.element, 'keydown', function (ev: KeyboardEvent): void {\r\n      if (document.activeElement !== this) {\r\n        return;\r\n      }\r\n      self._keyDown(ev);\r\n    }, true);\r\n\r\n    on(this.element, 'keypress', function (ev: KeyboardEvent): void {\r\n      if (document.activeElement !== this) {\r\n        return;\r\n      }\r\n      self._keyPress(ev);\r\n    }, true);\r\n\r\n    on(this.element, 'keyup', (ev: KeyboardEvent) => {\r\n      if (!wasMondifierKeyOnlyEvent(ev)) {\r\n        this.focus();\r\n      }\r\n    }, true);\r\n\r\n    on(this.textarea, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true);\r\n    on(this.textarea, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true);\r\n    on(this.textarea, 'compositionstart', () => this.compositionHelper.compositionstart());\r\n    on(this.textarea, 'compositionupdate', (e: CompositionEvent) => this.compositionHelper.compositionupdate(e));\r\n    on(this.textarea, 'compositionend', () => this.compositionHelper.compositionend());\r\n    this.on('refresh', () => this.compositionHelper.updateCompositionElements());\r\n    this.on('refresh', (data) => this.queueLinkification(data.start, data.end));\r\n  }\r\n\r\n  /**\r\n   * Opens the terminal within an element.\r\n   *\r\n   * @param {HTMLElement} parent The element to create the terminal within.\r\n   */\r\n  public open(parent: HTMLElement): void {\r\n    let i = 0;\r\n    let div;\r\n\r\n    this.parent = parent || this.parent;\r\n\r\n    if (!this.parent) {\r\n      throw new Error('Terminal requires a parent element.');\r\n    }\r\n\r\n    // Grab global elements\r\n    this.context = this.parent.ownerDocument.defaultView;\r\n    this.document = this.parent.ownerDocument;\r\n    this.body = <HTMLBodyElement>this.document.body;\r\n\r\n    this._screenDprMonitor = new ScreenDprMonitor();\r\n    this._screenDprMonitor.setListener(() => this.emit('dprchange', window.devicePixelRatio));\r\n\r\n    // Create main element container\r\n    this.element = this.document.createElement('div');\r\n    this.element.classList.add('terminal');\r\n    this.element.classList.add('xterm');\r\n    this.element.setAttribute('tabindex', '0');\r\n    this.parent.appendChild(this.element);\r\n\r\n    // Performance: Use a document fragment to build the terminal\r\n    // viewport and helper elements detached from the DOM\r\n    const fragment = document.createDocumentFragment();\r\n    this.viewportElement = document.createElement('div');\r\n    this.viewportElement.classList.add('xterm-viewport');\r\n    fragment.appendChild(this.viewportElement);\r\n    this.viewportScrollArea = document.createElement('div');\r\n    this.viewportScrollArea.classList.add('xterm-scroll-area');\r\n    this.viewportElement.appendChild(this.viewportScrollArea);\r\n\r\n    this.screenElement = document.createElement('div');\r\n    this.screenElement.classList.add('xterm-screen');\r\n    // Create the container that will hold helpers like the textarea for\r\n    // capturing DOM Events. Then produce the helpers.\r\n    this.helperContainer = document.createElement('div');\r\n    this.helperContainer.classList.add('xterm-helpers');\r\n    this.screenElement.appendChild(this.helperContainer);\r\n    fragment.appendChild(this.screenElement);\r\n\r\n    this._mouseZoneManager = new MouseZoneManager(this);\r\n    this.on('scroll', () => this._mouseZoneManager.clearAll());\r\n    this.linkifier.attachToDom(this._mouseZoneManager);\r\n\r\n    this.textarea = document.createElement('textarea');\r\n    this.textarea.classList.add('xterm-helper-textarea');\r\n    // TODO: New API to set title? This could say \"Terminal bash input\", etc.\r\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\r\n    this.textarea.setAttribute('aria-multiline', 'false');\r\n    this.textarea.setAttribute('autocorrect', 'off');\r\n    this.textarea.setAttribute('autocapitalize', 'off');\r\n    this.textarea.setAttribute('spellcheck', 'false');\r\n    this.textarea.tabIndex = 0;\r\n    this.textarea.addEventListener('focus', () => this._onTextAreaFocus());\r\n    this.textarea.addEventListener('blur', () => this._onTextAreaBlur());\r\n    this.helperContainer.appendChild(this.textarea);\r\n\r\n    this.compositionView = document.createElement('div');\r\n    this.compositionView.classList.add('composition-view');\r\n    this.compositionHelper = new CompositionHelper(this.textarea, this.compositionView, this);\r\n    this.helperContainer.appendChild(this.compositionView);\r\n\r\n    this.charSizeStyleElement = document.createElement('style');\r\n    this.helperContainer.appendChild(this.charSizeStyleElement);\r\n    this.charMeasure = new CharMeasure(document, this.helperContainer);\r\n\r\n    // Performance: Add viewport and helper elements from the fragment\r\n    this.element.appendChild(fragment);\r\n\r\n    this.renderer = new Renderer(this, this.options.theme);\r\n    this.options.theme = null;\r\n    this.viewport = new Viewport(this, this.viewportElement, this.viewportScrollArea, this.charMeasure);\r\n    this.viewport.onThemeChanged(this.renderer.colorManager.colors);\r\n\r\n    this.on('cursormove', () => this.renderer.onCursorMove());\r\n    this.on('resize', () => this.renderer.onResize(this.cols, this.rows, false));\r\n    this.on('blur', () => this.renderer.onBlur());\r\n    this.on('focus', () => this.renderer.onFocus());\r\n    this.on('dprchange', () => this.renderer.onWindowResize(window.devicePixelRatio));\r\n    // dprchange should handle this case, we need this as well for browsers that don't support the\r\n    // matchMedia query.\r\n    window.addEventListener('resize', () => this.renderer.onWindowResize(window.devicePixelRatio));\r\n    this.charMeasure.on('charsizechanged', () => this.renderer.onResize(this.cols, this.rows, true));\r\n    this.renderer.on('resize', (dimensions) => this.viewport.syncScrollArea());\r\n\r\n    this.selectionManager = new SelectionManager(this, this.charMeasure);\r\n    this.element.addEventListener('mousedown', (e: MouseEvent) => this.selectionManager.onMouseDown(e));\r\n    this.selectionManager.on('refresh', data => this.renderer.onSelectionChanged(data.start, data.end));\r\n    this.selectionManager.on('newselection', text => {\r\n      // If there's a new selection, put it into the textarea, focus and select it\r\n      // in order to register it as a selection on the OS. This event is fired\r\n      // only on Linux to enable middle click to paste selection.\r\n      this.textarea.value = text;\r\n      this.textarea.focus();\r\n      this.textarea.select();\r\n    });\r\n    this.on('scroll', () => {\r\n      this.viewport.syncScrollArea();\r\n      this.selectionManager.refresh();\r\n    });\r\n    this.viewportElement.addEventListener('scroll', () => this.selectionManager.refresh());\r\n\r\n    this.mouseHelper = new MouseHelper(this.renderer);\r\n\r\n    if (this.options.screenReaderMode) {\r\n      // Note that this must be done *after* the renderer is created in order to\r\n      // ensure the correct order of the dprchange event\r\n      this._accessibilityManager = new AccessibilityManager(this);\r\n    }\r\n\r\n    // Measure the character size\r\n    this.charMeasure.measure(this.options);\r\n\r\n    // Setup loop that draws to screen\r\n    this.refresh(0, this.rows - 1);\r\n\r\n    // Initialize global actions that need to be taken on the document.\r\n    this.initGlobal();\r\n\r\n    // Listen for mouse events and translate\r\n    // them into terminal mouse protocols.\r\n    this.bindMouse();\r\n\r\n  }\r\n\r\n  /**\r\n   * Sets the theme on the renderer. The renderer must have been initialized.\r\n   * @param theme The theme to ste.\r\n   */\r\n  private _setTheme(theme: ITheme): void {\r\n    const colors = this.renderer.setTheme(theme);\r\n    if (this.viewport) {\r\n      this.viewport.onThemeChanged(colors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply the provided addon on the `Terminal` class.\r\n   * @param addon The addon to apply.\r\n   */\r\n  public static applyAddon(addon: any): void {\r\n    addon.apply(Terminal);\r\n  }\r\n\r\n  /**\r\n   * XTerm mouse events\r\n   * http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#Mouse%20Tracking\r\n   * To better understand these\r\n   * the xterm code is very helpful:\r\n   * Relevant files:\r\n   *   button.c, charproc.c, misc.c\r\n   * Relevant functions in xterm/button.c:\r\n   *   BtnCode, EmitButtonCode, EditorButton, SendMousePosition\r\n   */\r\n  public bindMouse(): void {\r\n    const el = this.element;\r\n    const self = this;\r\n    let pressed = 32;\r\n\r\n    // mouseup, mousedown, wheel\r\n    // left click: ^[[M 3<^[[M#3<\r\n    // wheel up: ^[[M`3>\r\n    function sendButton(ev: MouseEvent | WheelEvent): void {\r\n      let button;\r\n      let pos;\r\n\r\n      // get the xterm-style button\r\n      button = getButton(ev);\r\n\r\n      // get mouse coordinates\r\n      pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.options.lineHeight, self.cols, self.rows);\r\n      if (!pos) return;\r\n\r\n      sendEvent(button, pos);\r\n\r\n      switch ((<any>ev).overrideType || ev.type) {\r\n        case 'mousedown':\r\n          pressed = button;\r\n          break;\r\n        case 'mouseup':\r\n          // keep it at the left\r\n          // button, just in case.\r\n          pressed = 32;\r\n          break;\r\n        case 'wheel':\r\n          // nothing. don't\r\n          // interfere with\r\n          // `pressed`.\r\n          break;\r\n      }\r\n    }\r\n\r\n    // motion example of a left click:\r\n    // ^[[M 3<^[[M@4<^[[M@5<^[[M@6<^[[M@7<^[[M#7<\r\n    function sendMove(ev: MouseEvent): void {\r\n      let button = pressed;\r\n      let pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.options.lineHeight, self.cols, self.rows);\r\n      if (!pos) return;\r\n\r\n      // buttons marked as motions\r\n      // are incremented by 32\r\n      button += 32;\r\n\r\n      sendEvent(button, pos);\r\n    }\r\n\r\n    // encode button and\r\n    // position to characters\r\n    function encode(data: number[], ch: number): void {\r\n      if (!self.utfMouse) {\r\n        if (ch === 255) {\r\n          data.push(0);\r\n          return;\r\n        }\r\n        if (ch > 127) ch = 127;\r\n        data.push(ch);\r\n      } else {\r\n        if (ch === 2047) {\r\n          data.push(0);\r\n          return;\r\n        }\r\n        if (ch < 127) {\r\n          data.push(ch);\r\n        } else {\r\n          if (ch > 2047) ch = 2047;\r\n          data.push(0xC0 | (ch >> 6));\r\n          data.push(0x80 | (ch & 0x3F));\r\n        }\r\n      }\r\n    }\r\n\r\n    // send a mouse event:\r\n    // regular/utf8: ^[[M Cb Cx Cy\r\n    // urxvt: ^[[ Cb ; Cx ; Cy M\r\n    // sgr: ^[[ Cb ; Cx ; Cy M/m\r\n    // vt300: ^[[ 24(1/3/5)~ [ Cx , Cy ] \\r\r\n    // locator: CSI P e ; P b ; P r ; P c ; P p & w\r\n    function sendEvent(button: number, pos: {x: number, y: number}): void {\r\n      // self.emit('mouse', {\r\n      //   x: pos.x - 32,\r\n      //   y: pos.x - 32,\r\n      //   button: button\r\n      // });\r\n\r\n      if (self.vt300Mouse) {\r\n        // NOTE: Unstable.\r\n        // http://www.vt100.net/docs/vt3xx-gp/chapter15.html\r\n        button &= 3;\r\n        pos.x -= 32;\r\n        pos.y -= 32;\r\n        let data = C0.ESC + '[24';\r\n        if (button === 0) data += '1';\r\n        else if (button === 1) data += '3';\r\n        else if (button === 2) data += '5';\r\n        else if (button === 3) return;\r\n        else data += '0';\r\n        data += '~[' + pos.x + ',' + pos.y + ']\\r';\r\n        self.send(data);\r\n        return;\r\n      }\r\n\r\n      if (self.decLocator) {\r\n        // NOTE: Unstable.\r\n        button &= 3;\r\n        pos.x -= 32;\r\n        pos.y -= 32;\r\n        if (button === 0) button = 2;\r\n        else if (button === 1) button = 4;\r\n        else if (button === 2) button = 6;\r\n        else if (button === 3) button = 3;\r\n        self.send(C0.ESC + '['\r\n                  + button\r\n                  + ';'\r\n                  + (button === 3 ? 4 : 0)\r\n                  + ';'\r\n                  + pos.y\r\n                  + ';'\r\n                  + pos.x\r\n                  + ';'\r\n                  // Not sure what page is meant to be\r\n                  + (<any>pos).page || 0\r\n                  + '&w');\r\n        return;\r\n      }\r\n\r\n      if (self.urxvtMouse) {\r\n        pos.x -= 32;\r\n        pos.y -= 32;\r\n        pos.x++;\r\n        pos.y++;\r\n        self.send(C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\r\n        return;\r\n      }\r\n\r\n      if (self.sgrMouse) {\r\n        pos.x -= 32;\r\n        pos.y -= 32;\r\n        self.send(C0.ESC + '[<'\r\n                  + (((button & 3) === 3 ? button & ~3 : button) - 32)\r\n                  + ';'\r\n                  + pos.x\r\n                  + ';'\r\n                  + pos.y\r\n                  + ((button & 3) === 3 ? 'm' : 'M'));\r\n        return;\r\n      }\r\n\r\n      let data: number[] = [];\r\n\r\n      encode(data, button);\r\n      encode(data, pos.x);\r\n      encode(data, pos.y);\r\n\r\n      self.send(C0.ESC + '[M' + String.fromCharCode.apply(String, data));\r\n    }\r\n\r\n    function getButton(ev: MouseEvent): number {\r\n      let button;\r\n      let shift;\r\n      let meta;\r\n      let ctrl;\r\n      let mod;\r\n\r\n      // two low bits:\r\n      // 0 = left\r\n      // 1 = middle\r\n      // 2 = right\r\n      // 3 = release\r\n      // wheel up/down:\r\n      // 1, and 2 - with 64 added\r\n      switch ((<any>ev).overrideType || ev.type) {\r\n        case 'mousedown':\r\n          button = ev.button != null\r\n            ? +ev.button\r\n          : ev.which != null\r\n            ? ev.which - 1\r\n          : null;\r\n\r\n          if (Browser.isMSIE) {\r\n            button = button === 1 ? 0 : button === 4 ? 1 : button;\r\n          }\r\n          break;\r\n        case 'mouseup':\r\n          button = 3;\r\n          break;\r\n        case 'DOMMouseScroll':\r\n          button = ev.detail < 0\r\n            ? 64\r\n          : 65;\r\n          break;\r\n        case 'wheel':\r\n          button = (<WheelEvent>ev).wheelDeltaY > 0\r\n            ? 64\r\n          : 65;\r\n          break;\r\n      }\r\n\r\n      // next three bits are the modifiers:\r\n      // 4 = shift, 8 = meta, 16 = control\r\n      shift = ev.shiftKey ? 4 : 0;\r\n      meta = ev.metaKey ? 8 : 0;\r\n      ctrl = ev.ctrlKey ? 16 : 0;\r\n      mod = shift | meta | ctrl;\r\n\r\n      // no mods\r\n      if (self.vt200Mouse) {\r\n        // ctrl only\r\n        mod &= ctrl;\r\n      } else if (!self.normalMouse) {\r\n        mod = 0;\r\n      }\r\n\r\n      // increment to SP\r\n      button = (32 + (mod << 2)) + button;\r\n\r\n      return button;\r\n    }\r\n\r\n    on(el, 'mousedown', (ev: MouseEvent) => {\r\n\r\n      // Prevent the focus on the textarea from getting lost\r\n      // and make sure we get focused on mousedown\r\n      ev.preventDefault();\r\n      this.focus();\r\n\r\n      // Don't send the mouse button to the pty if mouse events are disabled or\r\n      // if the selection manager is having selection forced (ie. a modifier is\r\n      // held).\r\n      if (!this.mouseEvents || this.selectionManager.shouldForceSelection(ev)) {\r\n        return;\r\n      }\r\n\r\n      // send the button\r\n      sendButton(ev);\r\n\r\n      // fix for odd bug\r\n      // if (this.vt200Mouse && !this.normalMouse) {\r\n      if (this.vt200Mouse) {\r\n        (<any>ev).overrideType = 'mouseup';\r\n        sendButton(ev);\r\n        return this.cancel(ev);\r\n      }\r\n\r\n      // bind events\r\n      if (this.normalMouse) on(this.document, 'mousemove', sendMove);\r\n\r\n      // x10 compatibility mode can't send button releases\r\n      if (!this.x10Mouse) {\r\n        const handler = (ev: MouseEvent) => {\r\n          sendButton(ev);\r\n          // TODO: Seems dangerous calling this on document?\r\n          if (this.normalMouse) off(this.document, 'mousemove', sendMove);\r\n          off(this.document, 'mouseup', handler);\r\n          return this.cancel(ev);\r\n        };\r\n        // TODO: Seems dangerous calling this on document?\r\n        on(this.document, 'mouseup', handler);\r\n      }\r\n\r\n      return this.cancel(ev);\r\n    });\r\n\r\n    // if (this.normalMouse) {\r\n    //  on(this.document, 'mousemove', sendMove);\r\n    // }\r\n\r\n    on(el, 'wheel', (ev: WheelEvent) => {\r\n      if (!this.mouseEvents) return;\r\n      if (this.x10Mouse || this.vt300Mouse || this.decLocator) return;\r\n      sendButton(ev);\r\n      ev.preventDefault();\r\n    });\r\n\r\n    // allow wheel scrolling in\r\n    // the shell for example\r\n    on(el, 'wheel', (ev: WheelEvent) => {\r\n      if (this.mouseEvents) return;\r\n      this.viewport.onWheel(ev);\r\n      return this.cancel(ev);\r\n    });\r\n\r\n    on(el, 'touchstart', (ev: TouchEvent) => {\r\n      if (this.mouseEvents) return;\r\n      this.viewport.onTouchStart(ev);\r\n      return this.cancel(ev);\r\n    });\r\n\r\n    on(el, 'touchmove', (ev: TouchEvent) => {\r\n      if (this.mouseEvents) return;\r\n      this.viewport.onTouchMove(ev);\r\n      return this.cancel(ev);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroys the terminal.\r\n   */\r\n  public destroy(): void {\r\n    super.destroy();\r\n    this.readable = false;\r\n    this.writable = false;\r\n    this.handler = () => {};\r\n    this.write = () => {};\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n    // this.emit('close');\r\n  }\r\n\r\n  /**\r\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\r\n   * opportunity.\r\n   * @param {number} start The row to start from (between 0 and this.rows - 1).\r\n   * @param {number} end The row to end at (between start and this.rows - 1).\r\n   */\r\n  public refresh(start: number, end: number): void {\r\n    if (this.renderer) {\r\n      this.renderer.refreshRows(start, end);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queues linkification for the specified rows.\r\n   * @param {number} start The row to start from (between 0 and this.rows - 1).\r\n   * @param {number} end The row to end at (between start and this.rows - 1).\r\n   */\r\n  private queueLinkification(start: number, end: number): void {\r\n    if (this.linkifier) {\r\n      this.linkifier.linkifyRows(start, end);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display the cursor element\r\n   */\r\n  public showCursor(): void {\r\n    if (!this.cursorState) {\r\n      this.cursorState = 1;\r\n      this.refresh(this.buffer.y, this.buffer.y);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scroll the terminal down 1 row, creating a blank line.\r\n   * @param isWrapped Whether the new line is wrapped from the previous line.\r\n   */\r\n  public scroll(isWrapped?: boolean): void {\r\n    const newLine = this.blankLine(undefined, isWrapped);\r\n    const topRow = this.buffer.ybase + this.buffer.scrollTop;\r\n    let bottomRow = this.buffer.ybase + this.buffer.scrollBottom;\r\n\r\n    if (this.buffer.scrollTop === 0) {\r\n      // Determine whether the buffer is going to be trimmed after insertion.\r\n      const willBufferBeTrimmed = this.buffer.lines.length === this.buffer.lines.maxLength;\r\n\r\n      // Insert the line using the fastest method\r\n      if (bottomRow === this.buffer.lines.length - 1) {\r\n        this.buffer.lines.push(newLine);\r\n      } else {\r\n        this.buffer.lines.splice(bottomRow + 1, 0, newLine);\r\n      }\r\n\r\n      // Only adjust ybase and ydisp when the buffer is not trimmed\r\n      if (!willBufferBeTrimmed) {\r\n        this.buffer.ybase++;\r\n        // Only scroll the ydisp with ybase if the user has not scrolled up\r\n        if (!this.userScrolling) {\r\n          this.buffer.ydisp++;\r\n        }\r\n      } else {\r\n        // When the buffer is full and the user has scrolled up, keep the text\r\n        // stable unless ydisp is right at the top\r\n        if (this.userScrolling) {\r\n          this.buffer.ydisp = Math.max(this.buffer.ydisp - 1, 0);\r\n        }\r\n      }\r\n    } else {\r\n      // scrollTop is non-zero which means no line will be going to the\r\n      // scrollback, instead we can just shift them in-place.\r\n      const scrollRegionHeight = bottomRow - topRow + 1/*as it's zero-based*/;\r\n      this.buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\r\n      this.buffer.lines.set(bottomRow, newLine);\r\n    }\r\n\r\n    // Move the viewport to the bottom of the buffer unless the user is\r\n    // scrolling.\r\n    if (!this.userScrolling) {\r\n      this.buffer.ydisp = this.buffer.ybase;\r\n    }\r\n\r\n    // Flag rows that need updating\r\n    this.updateRange(this.buffer.scrollTop);\r\n    this.updateRange(this.buffer.scrollBottom);\r\n\r\n    /**\r\n     * This event is emitted whenever the terminal is scrolled.\r\n     * The one parameter passed is the new y display position.\r\n     *\r\n     * @event scroll\r\n     */\r\n    this.emit('scroll', this.buffer.ydisp);\r\n  }\r\n\r\n  /**\r\n   * Scroll the display of the terminal\r\n   * @param {number} disp The number of lines to scroll down (negative scroll up).\r\n   * @param {boolean} suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\r\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\r\n   * viewport originally.\r\n   */\r\n  public scrollLines(disp: number, suppressScrollEvent?: boolean): void {\r\n    if (disp < 0) {\r\n      if (this.buffer.ydisp === 0) {\r\n        return;\r\n      }\r\n      this.userScrolling = true;\r\n    } else if (disp + this.buffer.ydisp >= this.buffer.ybase) {\r\n      this.userScrolling = false;\r\n    }\r\n\r\n    const oldYdisp = this.buffer.ydisp;\r\n    this.buffer.ydisp = Math.max(Math.min(this.buffer.ydisp + disp, this.buffer.ybase), 0);\r\n\r\n    // No change occurred, don't trigger scroll/refresh\r\n    if (oldYdisp === this.buffer.ydisp) {\r\n      return;\r\n    }\r\n\r\n    if (!suppressScrollEvent) {\r\n      this.emit('scroll', this.buffer.ydisp);\r\n    }\r\n\r\n    this.refresh(0, this.rows - 1);\r\n  }\r\n\r\n  /**\r\n   * Scroll the display of the terminal by a number of pages.\r\n   * @param {number} pageCount The number of pages to scroll (negative scrolls up).\r\n   */\r\n  public scrollPages(pageCount: number): void {\r\n    this.scrollLines(pageCount * (this.rows - 1));\r\n  }\r\n\r\n  /**\r\n   * Scrolls the display of the terminal to the top.\r\n   */\r\n  public scrollToTop(): void {\r\n    this.scrollLines(-this.buffer.ydisp);\r\n  }\r\n\r\n  /**\r\n   * Scrolls the display of the terminal to the bottom.\r\n   */\r\n  public scrollToBottom(): void {\r\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\r\n  }\r\n\r\n  /**\r\n   * Writes text to the terminal.\r\n   * @param {string} data The text to write to the terminal.\r\n   */\r\n  public write(data: string): void {\r\n    this.writeBuffer.push(data);\r\n\r\n    // Send XOFF to pause the pty process if the write buffer becomes too large so\r\n    // xterm.js can catch up before more data is sent. This is necessary in order\r\n    // to keep signals such as ^C responsive.\r\n    if (this.options.useFlowControl && !this.xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\r\n      // XOFF - stop pty pipe\r\n      // XON will be triggered by emulator before processing data chunk\r\n      this.send(C0.DC3);\r\n      this.xoffSentToCatchUp = true;\r\n    }\r\n\r\n    if (!this.writeInProgress && this.writeBuffer.length > 0) {\r\n      // Kick off a write which will write all data in sequence recursively\r\n      this.writeInProgress = true;\r\n      // Kick off an async innerWrite so more writes can come in while processing data\r\n      setTimeout(() => {\r\n        this.innerWrite();\r\n      });\r\n    }\r\n  }\r\n\r\n  private innerWrite(): void {\r\n    const writeBatch = this.writeBuffer.splice(0, WRITE_BATCH_SIZE);\r\n    while (writeBatch.length > 0) {\r\n      const data = writeBatch.shift();\r\n\r\n      // If XOFF was sent in order to catch up with the pty process, resume it if\r\n      // the writeBuffer is empty to allow more data to come in.\r\n      if (this.xoffSentToCatchUp && writeBatch.length === 0 && this.writeBuffer.length === 0) {\r\n        this.send(C0.DC1);\r\n        this.xoffSentToCatchUp = false;\r\n      }\r\n\r\n      this.refreshStart = this.buffer.y;\r\n      this.refreshEnd = this.buffer.y;\r\n\r\n      // HACK: Set the parser state based on it's state at the time of return.\r\n      // This works around the bug #662 which saw the parser state reset in the\r\n      // middle of parsing escape sequence in two chunks. For some reason the\r\n      // state of the parser resets to 0 after exiting parser.parse. This change\r\n      // just sets the state back based on the correct return statement.\r\n      const state = this.parser.parse(data);\r\n      this.parser.setState(state);\r\n\r\n      this.updateRange(this.buffer.y);\r\n      this.refresh(this.refreshStart, this.refreshEnd);\r\n    }\r\n    if (this.writeBuffer.length > 0) {\r\n      // Allow renderer to catch up before processing the next batch\r\n      setTimeout(() => this.innerWrite(), 0);\r\n    } else {\r\n      this.writeInProgress = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes text to the terminal, followed by a break line character (\\n).\r\n   * @param {string} data The text to write to the terminal.\r\n   */\r\n  public writeln(data: string): void {\r\n    this.write(data + '\\r\\n');\r\n  }\r\n\r\n  /**\r\n   * Attaches a custom key event handler which is run before keys are processed,\r\n   * giving consumers of xterm.js ultimate control as to what keys should be\r\n   * processed by the terminal and what keys should not.\r\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\r\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\r\n   * propogation and/or prevent the default action. The function returns whether\r\n   * the event should be processed by xterm.js.\r\n   */\r\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\r\n    this.customKeyEventHandler = customKeyEventHandler;\r\n  }\r\n\r\n  /**\r\n   * Attaches a http(s) link handler, forcing web links to behave differently to\r\n   * regular <a> tags. This will trigger a refresh as links potentially need to be\r\n   * reconstructed. Calling this with null will remove the handler.\r\n   * @param handler The handler callback function.\r\n   */\r\n  public setHypertextLinkHandler(handler: LinkMatcherHandler): void {\r\n    if (!this.linkifier) {\r\n      throw new Error('Cannot attach a hypertext link handler before Terminal.open is called');\r\n    }\r\n    this.linkifier.setHypertextLinkHandler(handler);\r\n    // Refresh to force links to refresh\r\n    this.refresh(0, this.rows - 1);\r\n  }\r\n\r\n  /**\r\n   * Attaches a validation callback for hypertext links. This is useful to use\r\n   * validation logic or to do something with the link's element and url.\r\n   * @param callback The callback to use, this can\r\n   * be cleared with null.\r\n   */\r\n  public setHypertextValidationCallback(callback: LinkMatcherValidationCallback): void {\r\n    if (!this.linkifier) {\r\n      throw new Error('Cannot attach a hypertext validation callback before Terminal.open is called');\r\n    }\r\n    this.linkifier.setHypertextValidationCallback(callback);\r\n    // // Refresh to force links to refresh\r\n    this.refresh(0, this.rows - 1);\r\n  }\r\n\r\n  /**\r\n   * Registers a link matcher, allowing custom link patterns to be matched and\r\n   * handled.\r\n   * @param regex The regular expression to search for, specifically\r\n   * this searches the textContent of the rows. You will want to use \\s to match\r\n   * a space ' ' character for example.\r\n   * @param handler The callback when the link is called.\r\n   * @param options Options for the link matcher.\r\n   * @return The ID of the new matcher, this can be used to deregister.\r\n   */\r\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options?: ILinkMatcherOptions): number {\r\n    if (this.linkifier) {\r\n      const matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\r\n      this.refresh(0, this.rows - 1);\r\n      return matcherId;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Deregisters a link matcher if it has been registered.\r\n   * @param matcherId The link matcher's ID (returned after register)\r\n   */\r\n  public deregisterLinkMatcher(matcherId: number): void {\r\n    if (this.linkifier) {\r\n      if (this.linkifier.deregisterLinkMatcher(matcherId)) {\r\n        this.refresh(0, this.rows - 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets whether the terminal has an active selection.\r\n   */\r\n  public hasSelection(): boolean {\r\n    return this.selectionManager ? this.selectionManager.hasSelection : false;\r\n  }\r\n\r\n  /**\r\n   * Gets the terminal's current selection, this is useful for implementing copy\r\n   * behavior outside of xterm.js.\r\n   */\r\n  public getSelection(): string {\r\n    return this.selectionManager ? this.selectionManager.selectionText : '';\r\n  }\r\n\r\n  /**\r\n   * Clears the current terminal selection.\r\n   */\r\n  public clearSelection(): void {\r\n    if (this.selectionManager) {\r\n      this.selectionManager.clearSelection();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects all text within the terminal.\r\n   */\r\n  public selectAll(): void {\r\n    if (this.selectionManager) {\r\n      this.selectionManager.selectAll();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle a keydown event\r\n   * Key Resources:\r\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\r\n   * @param {KeyboardEvent} ev The keydown event to be handled.\r\n   */\r\n  protected _keyDown(ev: KeyboardEvent): boolean {\r\n    if (this.customKeyEventHandler && this.customKeyEventHandler(ev) === false) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.compositionHelper.keydown(ev)) {\r\n      if (this.buffer.ybase !== this.buffer.ydisp) {\r\n        this.scrollToBottom();\r\n      }\r\n      return false;\r\n    }\r\n\r\n    const result = this._evaluateKeyEscapeSequence(ev);\r\n\r\n    if (result.key === C0.DC3) { // XOFF\r\n      this.writeStopped = true;\r\n    } else if (result.key === C0.DC1) { // XON\r\n      this.writeStopped = false;\r\n    }\r\n\r\n    if (result.scrollLines) {\r\n      this.scrollLines(result.scrollLines);\r\n      return this.cancel(ev, true);\r\n    }\r\n\r\n    if (this._isThirdLevelShift(this.browser, ev)) {\r\n      return true;\r\n    }\r\n\r\n    if (result.cancel) {\r\n      // The event is canceled at the end already, is this necessary?\r\n      this.cancel(ev, true);\r\n    }\r\n\r\n    if (!result.key) {\r\n      return true;\r\n    }\r\n\r\n    this.emit('keydown', ev);\r\n    this.emit('key', result.key, ev);\r\n    this.showCursor();\r\n    this.handler(result.key);\r\n\r\n    return this.cancel(ev, true);\r\n  }\r\n\r\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\r\n    const thirdLevelKey =\r\n        (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\r\n        (browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\r\n\r\n    if (ev.type === 'keypress') {\r\n      return thirdLevelKey;\r\n    }\r\n\r\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\r\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\r\n  }\r\n\r\n  /**\r\n   * Returns an object that determines how a KeyboardEvent should be handled. The key of the\r\n   * returned value is the new key code to pass to the PTY.\r\n   *\r\n   * Reference: http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\r\n   * @param ev The keyboard event to be translated to key escape sequence.\r\n   */\r\n  protected _evaluateKeyEscapeSequence(ev: KeyboardEvent): {cancel: boolean, key: string, scrollLines: number} {\r\n    const result: {cancel: boolean, key: string, scrollLines: number} = {\r\n      // Whether to cancel event propogation (NOTE: this may not be needed since the event is\r\n      // canceled at the end of keyDown\r\n      cancel: false,\r\n      // The new key even to emit\r\n      key: undefined,\r\n      // The number of characters to scroll, if this is defined it will cancel the event\r\n      scrollLines: undefined\r\n    };\r\n    const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\r\n    switch (ev.keyCode) {\r\n      case 0:\r\n        if (ev.key === 'UIKeyInputUpArrow') {\r\n          if (this.applicationCursor) {\r\n            result.key = C0.ESC + 'OA';\r\n          } else {\r\n            result.key = C0.ESC + '[A';\r\n          }\r\n        }\r\n        else if (ev.key === 'UIKeyInputLeftArrow') {\r\n          if (this.applicationCursor) {\r\n            result.key = C0.ESC + 'OD';\r\n          } else {\r\n            result.key = C0.ESC + '[D';\r\n          }\r\n        }\r\n        else if (ev.key === 'UIKeyInputRightArrow') {\r\n          if (this.applicationCursor) {\r\n            result.key = C0.ESC + 'OC';\r\n          } else {\r\n            result.key = C0.ESC + '[C';\r\n          }\r\n        }\r\n        else if (ev.key === 'UIKeyInputDownArrow') {\r\n          if (this.applicationCursor) {\r\n            result.key = C0.ESC + 'OB';\r\n          } else {\r\n            result.key = C0.ESC + '[B';\r\n          }\r\n        }\r\n        break;\r\n      case 8:\r\n        // backspace\r\n        if (ev.shiftKey) {\r\n          result.key = C0.BS; // ^H\r\n          break;\r\n        } else if (ev.altKey) {\r\n          result.key = C0.ESC + C0.DEL; // \\e ^?\r\n          break;\r\n        }\r\n        result.key = C0.DEL; // ^?\r\n        break;\r\n      case 9:\r\n        // tab\r\n        if (ev.shiftKey) {\r\n          result.key = C0.ESC + '[Z';\r\n          break;\r\n        }\r\n        result.key = C0.HT;\r\n        result.cancel = true;\r\n        break;\r\n      case 13:\r\n        // return/enter\r\n        result.key = C0.CR;\r\n        result.cancel = true;\r\n        break;\r\n      case 27:\r\n        // escape\r\n        result.key = C0.ESC;\r\n        result.cancel = true;\r\n        break;\r\n      case 37:\r\n        // left-arrow\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\r\n          // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\r\n          // http://unix.stackexchange.com/a/108106\r\n          // macOS uses different escape sequences than linux\r\n          if (result.key === C0.ESC + '[1;3D') {\r\n            result.key = (this.browser.isMac) ? C0.ESC + 'b' : C0.ESC + '[1;5D';\r\n          }\r\n        } else if (this.applicationCursor) {\r\n          result.key = C0.ESC + 'OD';\r\n        } else {\r\n          result.key = C0.ESC + '[D';\r\n        }\r\n        break;\r\n      case 39:\r\n        // right-arrow\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\r\n          // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\r\n          // http://unix.stackexchange.com/a/108106\r\n          // macOS uses different escape sequences than linux\r\n          if (result.key === C0.ESC + '[1;3C') {\r\n            result.key = (this.browser.isMac) ? C0.ESC + 'f' : C0.ESC + '[1;5C';\r\n          }\r\n        } else if (this.applicationCursor) {\r\n          result.key = C0.ESC + 'OC';\r\n        } else {\r\n          result.key = C0.ESC + '[C';\r\n        }\r\n        break;\r\n      case 38:\r\n        // up-arrow\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\r\n          // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\r\n          // http://unix.stackexchange.com/a/108106\r\n          if (result.key === C0.ESC + '[1;3A') {\r\n            result.key = C0.ESC + '[1;5A';\r\n          }\r\n        } else if (this.applicationCursor) {\r\n          result.key = C0.ESC + 'OA';\r\n        } else {\r\n          result.key = C0.ESC + '[A';\r\n        }\r\n        break;\r\n      case 40:\r\n        // down-arrow\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\r\n          // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\r\n          // http://unix.stackexchange.com/a/108106\r\n          if (result.key === C0.ESC + '[1;3B') {\r\n            result.key = C0.ESC + '[1;5B';\r\n          }\r\n        } else if (this.applicationCursor) {\r\n          result.key = C0.ESC + 'OB';\r\n        } else {\r\n          result.key = C0.ESC + '[B';\r\n        }\r\n        break;\r\n      case 45:\r\n        // insert\r\n        if (!ev.shiftKey && !ev.ctrlKey) {\r\n          // <Ctrl> or <Shift> + <Insert> are used to\r\n          // copy-paste on some systems.\r\n          result.key = C0.ESC + '[2~';\r\n        }\r\n        break;\r\n      case 46:\r\n        // delete\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\r\n        } else {\r\n          result.key = C0.ESC + '[3~';\r\n        }\r\n        break;\r\n      case 36:\r\n        // home\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\r\n        } else if (this.applicationCursor) {\r\n          result.key = C0.ESC + 'OH';\r\n        } else {\r\n          result.key = C0.ESC + '[H';\r\n        }\r\n        break;\r\n      case 35:\r\n        // end\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\r\n        } else if (this.applicationCursor) {\r\n          result.key = C0.ESC + 'OF';\r\n        } else {\r\n          result.key = C0.ESC + '[F';\r\n        }\r\n        break;\r\n      case 33:\r\n        // page up\r\n        if (ev.shiftKey) {\r\n          result.scrollLines = -(this.rows - 1);\r\n        } else {\r\n          result.key = C0.ESC + '[5~';\r\n        }\r\n        break;\r\n      case 34:\r\n        // page down\r\n        if (ev.shiftKey) {\r\n          result.scrollLines = this.rows - 1;\r\n        } else {\r\n          result.key = C0.ESC + '[6~';\r\n        }\r\n        break;\r\n      case 112:\r\n        // F1-F12\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\r\n        } else {\r\n          result.key = C0.ESC + 'OP';\r\n        }\r\n        break;\r\n      case 113:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\r\n        } else {\r\n          result.key = C0.ESC + 'OQ';\r\n        }\r\n        break;\r\n      case 114:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\r\n        } else {\r\n          result.key = C0.ESC + 'OR';\r\n        }\r\n        break;\r\n      case 115:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\r\n        } else {\r\n          result.key = C0.ESC + 'OS';\r\n        }\r\n        break;\r\n      case 116:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\r\n        } else {\r\n          result.key = C0.ESC + '[15~';\r\n        }\r\n        break;\r\n      case 117:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\r\n        } else {\r\n          result.key = C0.ESC + '[17~';\r\n        }\r\n        break;\r\n      case 118:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\r\n        } else {\r\n          result.key = C0.ESC + '[18~';\r\n        }\r\n        break;\r\n      case 119:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\r\n        } else {\r\n          result.key = C0.ESC + '[19~';\r\n        }\r\n        break;\r\n      case 120:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\r\n        } else {\r\n          result.key = C0.ESC + '[20~';\r\n        }\r\n        break;\r\n      case 121:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\r\n        } else {\r\n          result.key = C0.ESC + '[21~';\r\n        }\r\n        break;\r\n      case 122:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\r\n        } else {\r\n          result.key = C0.ESC + '[23~';\r\n        }\r\n        break;\r\n      case 123:\r\n        if (modifiers) {\r\n          result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\r\n        } else {\r\n          result.key = C0.ESC + '[24~';\r\n        }\r\n        break;\r\n      default:\r\n        // a-z and space\r\n        if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\r\n          if (ev.keyCode >= 65 && ev.keyCode <= 90) {\r\n            result.key = String.fromCharCode(ev.keyCode - 64);\r\n          } else if (ev.keyCode === 32) {\r\n            // NUL\r\n            result.key = String.fromCharCode(0);\r\n          } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\r\n            // escape, file sep, group sep, record sep, unit sep\r\n            result.key = String.fromCharCode(ev.keyCode - 51 + 27);\r\n          } else if (ev.keyCode === 56) {\r\n            // delete\r\n            result.key = String.fromCharCode(127);\r\n          } else if (ev.keyCode === 219) {\r\n            // ^[ - Control Sequence Introducer (CSI)\r\n            result.key = String.fromCharCode(27);\r\n          } else if (ev.keyCode === 220) {\r\n            // ^\\ - String Terminator (ST)\r\n            result.key = String.fromCharCode(28);\r\n          } else if (ev.keyCode === 221) {\r\n            // ^] - Operating System Command (OSC)\r\n            result.key = String.fromCharCode(29);\r\n          }\r\n        } else if ((!this.browser.isMac || this.options.macOptionIsMeta) && ev.altKey && !ev.metaKey) {\r\n          // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\r\n          const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\r\n          const key = keyMapping && keyMapping[!ev.shiftKey ? 0 : 1];\r\n          if (key) {\r\n            result.key = C0.ESC + key;\r\n          } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\r\n            const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\r\n            result.key = C0.ESC + String.fromCharCode(keyCode);\r\n          }\r\n        } else if (this.browser.isMac && !ev.altKey && !ev.ctrlKey && ev.metaKey) {\r\n          if (ev.keyCode === 65) { // cmd + a\r\n            this.selectAll();\r\n          }\r\n        }\r\n        break;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Set the G level of the terminal\r\n   * @param g\r\n   */\r\n  public setgLevel(g: number): void {\r\n    this.glevel = g;\r\n    this.charset = this.charsets[g];\r\n  }\r\n\r\n  /**\r\n   * Set the charset for the given G level of the terminal\r\n   * @param g\r\n   * @param charset\r\n   */\r\n  public setgCharset(g: number, charset: ICharset): void {\r\n    this.charsets[g] = charset;\r\n    if (this.glevel === g) {\r\n      this.charset = charset;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle a keypress event.\r\n   * Key Resources:\r\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\r\n   * @param {KeyboardEvent} ev The keypress event to be handled.\r\n   */\r\n  protected _keyPress(ev: KeyboardEvent): boolean {\r\n    let key;\r\n\r\n    if (this.customKeyEventHandler && this.customKeyEventHandler(ev) === false) {\r\n      return false;\r\n    }\r\n\r\n    this.cancel(ev);\r\n\r\n    if (ev.charCode) {\r\n      key = ev.charCode;\r\n    } else if (ev.which == null) {\r\n      key = ev.keyCode;\r\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\r\n      key = ev.which;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n    if (!key || (\r\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\r\n    )) {\r\n      return false;\r\n    }\r\n\r\n    key = String.fromCharCode(key);\r\n\r\n    this.emit('keypress', key, ev);\r\n    this.emit('key', key, ev);\r\n    this.showCursor();\r\n    this.handler(key);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Send data for handling to the terminal\r\n   * @param {string} data\r\n   */\r\n  public send(data: string): void {\r\n    if (!this.sendDataQueue) {\r\n      setTimeout(() => {\r\n        this.handler(this.sendDataQueue);\r\n        this.sendDataQueue = '';\r\n      }, 1);\r\n    }\r\n\r\n    this.sendDataQueue += data;\r\n  }\r\n\r\n  /**\r\n   * Ring the bell.\r\n   * Note: We could do sweet things with webaudio here\r\n   */\r\n  public bell(): void {\r\n    this.emit('bell');\r\n    if (this.soundBell()) {\r\n      this.soundManager.playBellSound();\r\n    }\r\n\r\n    if (this.visualBell()) {\r\n      this.element.classList.add('visual-bell-active');\r\n      clearTimeout(this.visualBellTimer);\r\n      this.visualBellTimer = window.setTimeout(() => {\r\n        this.element.classList.remove('visual-bell-active');\r\n      }, 200);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log the current state to the console.\r\n   */\r\n  public log(text: string, data?: any): void {\r\n    if (!this.options.debug) return;\r\n    if (!this.context.console || !this.context.console.log) return;\r\n    this.context.console.log(text, data);\r\n  }\r\n\r\n  /**\r\n   * Log the current state as error to the console.\r\n   */\r\n  public error(text: string, data?: any): void {\r\n    if (!this.options.debug) return;\r\n    if (!this.context.console || !this.context.console.error) return;\r\n    this.context.console.error(text, data);\r\n  }\r\n\r\n  /**\r\n   * Resizes the terminal.\r\n   *\r\n   * @param {number} x The number of columns to resize to.\r\n   * @param {number} y The number of rows to resize to.\r\n   */\r\n  public resize(x: number, y: number): void {\r\n    if (isNaN(x) || isNaN(y)) {\r\n      return;\r\n    }\r\n\r\n    if (x === this.cols && y === this.rows) {\r\n      // Check if we still need to measure the char size (fixes #785).\r\n      if (!this.charMeasure.width || !this.charMeasure.height) {\r\n        this.charMeasure.measure(this.options);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (x < 1) x = 1;\r\n    if (y < 1) y = 1;\r\n\r\n    this.buffers.resize(x, y);\r\n\r\n    this.cols = x;\r\n    this.rows = y;\r\n    this.buffers.setupTabStops(this.cols);\r\n\r\n    if (this.charMeasure) {\r\n      this.charMeasure.measure(this.options);\r\n    }\r\n\r\n    this.refresh(0, this.rows - 1);\r\n    this.emit('resize', {cols: x, rows: y});\r\n  }\r\n\r\n  /**\r\n   * Updates the range of rows to refresh\r\n   * @param {number} y The number of rows to refresh next.\r\n   */\r\n  public updateRange(y: number): void {\r\n    if (y < this.refreshStart) this.refreshStart = y;\r\n    if (y > this.refreshEnd) this.refreshEnd = y;\r\n    // if (y > this.refreshEnd) {\r\n    //   this.refreshEnd = y;\r\n    //   if (y > this.rows - 1) {\r\n    //     this.refreshEnd = this.rows - 1;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Set the range of refreshing to the maximum value\r\n   */\r\n  public maxRange(): void {\r\n    this.refreshStart = 0;\r\n    this.refreshEnd = this.rows - 1;\r\n  }\r\n\r\n  /**\r\n   * Erase in the identified line everything from \"x\" to the end of the line (right).\r\n   * @param {number} x The column from which to start erasing to the end of the line.\r\n   * @param {number} y The line in which to operate.\r\n   */\r\n  public eraseRight(x: number, y: number): void {\r\n    const line = this.buffer.lines.get(this.buffer.ybase + y);\r\n    if (!line) {\r\n      return;\r\n    }\r\n    const ch: CharData = [this.eraseAttr(), ' ', 1, 32 /* ' '.charCodeAt(0) */]; // xterm\r\n    for (; x < this.cols; x++) {\r\n      line[x] = ch;\r\n    }\r\n    this.updateRange(y);\r\n  }\r\n\r\n  /**\r\n   * Erase in the identified line everything from \"x\" to the start of the line (left).\r\n   * @param {number} x The column from which to start erasing to the start of the line.\r\n   * @param {number} y The line in which to operate.\r\n   */\r\n  public eraseLeft(x: number, y: number): void {\r\n    const line = this.buffer.lines.get(this.buffer.ybase + y);\r\n    if (!line) {\r\n      return;\r\n    }\r\n    const ch: CharData = [this.eraseAttr(), ' ', 1, 32 /* ' '.charCodeAt(0) */]; // xterm\r\n    x++;\r\n    while (x--) {\r\n      line[x] = ch;\r\n    }\r\n    this.updateRange(y);\r\n  }\r\n\r\n  /**\r\n   * Clear the entire buffer, making the prompt line the new first line.\r\n   */\r\n  public clear(): void {\r\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\r\n      // Don't clear if it's already clear\r\n      return;\r\n    }\r\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y));\r\n    this.buffer.lines.length = 1;\r\n    this.buffer.ydisp = 0;\r\n    this.buffer.ybase = 0;\r\n    this.buffer.y = 0;\r\n    for (let i = 1; i < this.rows; i++) {\r\n      this.buffer.lines.push(this.blankLine());\r\n    }\r\n    this.refresh(0, this.rows - 1);\r\n    this.emit('scroll', this.buffer.ydisp);\r\n  }\r\n\r\n  /**\r\n   * Erase all content in the given line\r\n   * @param {number} y The line to erase all of its contents.\r\n   */\r\n  public eraseLine(y: number): void {\r\n    this.eraseRight(0, y);\r\n  }\r\n\r\n  /**\r\n   * Return the data array of a blank line\r\n   * @param {boolean} cur First bunch of data for each \"blank\" character.\r\n   * @param {boolean} isWrapped Whether the new line is wrapped from the previous line.\r\n   * @param {boolean} cols The number of columns in the terminal, if this is not\r\n   * set, the terminal's current column count would be used.\r\n   */\r\n  public blankLine(cur?: boolean, isWrapped?: boolean, cols?: number): LineData {\r\n    const attr = cur ? this.eraseAttr() : this.defAttr;\r\n\r\n    const ch: CharData = [attr, ' ', 1, 32 /* ' '.charCodeAt(0) */]; // width defaults to 1 halfwidth character\r\n    const line: LineData = [];\r\n\r\n    // TODO: It is not ideal that this is a property on an array, a buffer line\r\n    // class should be added that will hold this data and other useful functions.\r\n    if (isWrapped) {\r\n      (<any>line).isWrapped = isWrapped;\r\n    }\r\n\r\n    cols = cols || this.cols;\r\n    for (let i = 0; i < cols; i++) {\r\n      line[i] = ch;\r\n    }\r\n\r\n    return line;\r\n  }\r\n\r\n  /**\r\n   * If cur return the back color xterm feature attribute. Else return defAttr.\r\n   * @param cur\r\n   */\r\n  public ch(cur?: boolean): CharData {\r\n    if (cur) {\r\n      return [this.eraseAttr(), ' ', 1, 32 /* ' '.charCodeAt(0) */];\r\n    }\r\n    return [this.defAttr, ' ', 1, 32 /* ' '.charCodeAt(0) */];\r\n  }\r\n\r\n  /**\r\n   * Evaluate if the current terminal is the given argument.\r\n   * @param term The terminal name to evaluate\r\n   */\r\n  public is(term: string): boolean {\r\n    return (this.options.termName + '').indexOf(term) === 0;\r\n  }\r\n\r\n  /**\r\n   * Emit the 'data' event and populate the given data.\r\n   * @param {string} data The data to populate in the event.\r\n   */\r\n  public handler(data: string): void {\r\n    // Prevents all events to pty process if stdin is disabled\r\n    if (this.options.disableStdin) {\r\n      return;\r\n    }\r\n\r\n    // Clear the selection if the selection manager is available and has an active selection\r\n    if (this.selectionManager && this.selectionManager.hasSelection) {\r\n      this.selectionManager.clearSelection();\r\n    }\r\n\r\n    // Input is being sent to the terminal, the terminal should focus the prompt.\r\n    if (this.buffer.ybase !== this.buffer.ydisp) {\r\n      this.scrollToBottom();\r\n    }\r\n    this.emit('data', data);\r\n  }\r\n\r\n  /**\r\n   * Emit the 'title' event and populate the given title.\r\n   * @param {string} title The title to populate in the event.\r\n   */\r\n  private handleTitle(title: string): void {\r\n    /**\r\n     * This event is emitted when the title of the terminal is changed\r\n     * from inside the terminal. The parameter is the new title.\r\n     *\r\n     * @event title\r\n     */\r\n    this.emit('title', title);\r\n  }\r\n\r\n  /**\r\n   * ESC\r\n   */\r\n\r\n  /**\r\n   * ESC D Index (IND is 0x84).\r\n   */\r\n  public index(): void {\r\n    this.buffer.y++;\r\n    if (this.buffer.y > this.buffer.scrollBottom) {\r\n      this.buffer.y--;\r\n      this.scroll();\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this.buffer.x >= this.cols) {\r\n      this.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ESC M Reverse Index (RI is 0x8d).\r\n   *\r\n   * Move the cursor up one row, inserting a new blank line if necessary.\r\n   */\r\n  public reverseIndex(): void {\r\n    if (this.buffer.y === this.buffer.scrollTop) {\r\n      // possibly move the code below to term.reverseScroll();\r\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\r\n      // blankLine(true) is xterm/linux behavior\r\n      const scrollRegionHeight = this.buffer.scrollBottom - this.buffer.scrollTop;\r\n      this.buffer.lines.shiftElements(this.buffer.y + this.buffer.ybase, scrollRegionHeight, 1);\r\n      this.buffer.lines.set(this.buffer.y + this.buffer.ybase, this.blankLine(true));\r\n      this.updateRange(this.buffer.scrollTop);\r\n      this.updateRange(this.buffer.scrollBottom);\r\n    } else {\r\n      this.buffer.y--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ESC c Full Reset (RIS).\r\n   */\r\n  public reset(): void {\r\n    this.options.rows = this.rows;\r\n    this.options.cols = this.cols;\r\n    const customKeyEventHandler = this.customKeyEventHandler;\r\n    const inputHandler = this.inputHandler;\r\n    this.setup();\r\n    this.customKeyEventHandler = customKeyEventHandler;\r\n    this.inputHandler = inputHandler;\r\n    this.refresh(0, this.rows - 1);\r\n    this.viewport.syncScrollArea();\r\n  }\r\n\r\n\r\n  /**\r\n   * ESC H Tab Set (HTS is 0x88).\r\n   */\r\n  private tabSet(): void {\r\n    this.buffer.tabs[this.buffer.x] = true;\r\n  }\r\n\r\n  // TODO: Remove cancel function and cancelEvents option\r\n  public cancel(ev: Event, force?: boolean): boolean {\r\n    if (!this.options.cancelEvents && !force) {\r\n      return;\r\n    }\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n    return false;\r\n  }\r\n\r\n  // TODO: Remove when true color is implemented\r\n  public matchColor(r1: number, g1: number, b1: number): number {\r\n    return matchColor_(r1, g1, b1);\r\n  }\r\n\r\n  private visualBell(): boolean {\r\n    return false;\r\n    // return this.options.bellStyle === 'visual' ||\r\n    //     this.options.bellStyle === 'both';\r\n  }\r\n\r\n  private soundBell(): boolean {\r\n    return this.options.bellStyle === 'sound';\r\n    // return this.options.bellStyle === 'sound' ||\r\n    //     this.options.bellStyle === 'both';\r\n  }\r\n}\r\n\r\n/**\r\n * Helpers\r\n */\r\n\r\nfunction globalOn(el: any, type: string, handler: (event: Event) => any, capture?: boolean): void {\r\n  if (!Array.isArray(el)) {\r\n    el = [el];\r\n  }\r\n  el.forEach((element: HTMLElement) => {\r\n    element.addEventListener(type, handler, capture || false);\r\n  });\r\n}\r\n// TODO: Remove once everything is typed\r\nconst on = globalOn;\r\n\r\nfunction off(el: any, type: string, handler: (event: Event) => any, capture: boolean = false): void {\r\n  el.removeEventListener(type, handler, capture);\r\n}\r\n\r\nfunction wasMondifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\r\n  return ev.keyCode === 16 || // Shift\r\n    ev.keyCode === 17 || // Ctrl\r\n    ev.keyCode === 18; // Alt\r\n}\r\n\r\n/**\r\n * TODO:\r\n * The below color-related code can be removed when true color is implemented.\r\n * It's only purpose is to match true color requests with the closest matching\r\n * ANSI color code.\r\n */\r\n\r\n// Colors 0-15 + 16-255\r\n// Much thanks to TooTallNate for writing this.\r\nconst vcolors: number[][] = (function(): number[][] {\r\n  const result = DEFAULT_ANSI_COLORS.map(c => {\r\n    c = c.substring(1);\r\n    return [\r\n      parseInt(c.substring(0, 2), 16),\r\n      parseInt(c.substring(2, 4), 16),\r\n      parseInt(c.substring(4, 6), 16)\r\n    ];\r\n  });\r\n  const r = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\r\n\r\n  // 16-231\r\n  for (let i = 0; i < 216; i++) {\r\n    result.push([\r\n      r[(i / 36) % 6 | 0],\r\n      r[(i / 6) % 6 | 0],\r\n      r[i % 6]\r\n    ]);\r\n  }\r\n\r\n  // 232-255 (grey)\r\n  let c: number;\r\n  for (let i = 0; i < 24; i++) {\r\n    c = 8 + i * 10;\r\n    result.push([c, c, c]);\r\n  }\r\n\r\n  return result;\r\n})();\r\n\r\nconst matchColorCache: {[colorRGBHash: number]: number} = {};\r\n\r\n// http://stackoverflow.com/questions/1633828\r\nfunction matchColorDistance(r1: number, g1: number, b1: number, r2: number, g2: number, b2: number): number {\r\n  return Math.pow(30 * (r1 - r2), 2)\r\n    + Math.pow(59 * (g1 - g2), 2)\r\n    + Math.pow(11 * (b1 - b2), 2);\r\n}\r\n\r\n\r\nfunction matchColor_(r1: number, g1: number, b1: number): number {\r\n  const hash = (r1 << 16) | (g1 << 8) | b1;\r\n\r\n  if (matchColorCache[hash] != null) {\r\n    return matchColorCache[hash];\r\n  }\r\n\r\n  let ldiff = Infinity;\r\n  let li = -1;\r\n  let i = 0;\r\n  let c: number[];\r\n  let r2: number;\r\n  let g2: number;\r\n  let b2: number;\r\n  let diff: number;\r\n\r\n  for (; i < vcolors.length; i++) {\r\n    c = vcolors[i];\r\n    r2 = c[0];\r\n    g2 = c[1];\r\n    b2 = c[2];\r\n\r\n    diff = matchColorDistance(r1, g1, b1, r2, g2, b2);\r\n\r\n    if (diff === 0) {\r\n      li = i;\r\n      break;\r\n    }\r\n\r\n    if (diff < ldiff) {\r\n      ldiff = diff;\r\n      li = i;\r\n    }\r\n  }\r\n\r\n  return matchColorCache[hash] = li;\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nexport let blankLine = 'Blank line';\r\nexport let promptLabel = 'Terminal input';\r\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, ISoundManager } from './Types';\r\n\r\n// Source: https://freesound.org/people/altemark/sounds/45759/\r\n// This sound is released under the Creative Commons Attribution 3.0 Unported\r\n// (CC BY 3.0) license. It was created by 'altemark'. No modifications have been\r\n// made, apart from the conversion to base64.\r\nexport const DEFAULT_BELL_SOUND = 'data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZoG/wdmCcoKRAypDQ8PbRDBEQQTOxRtFYcWlBePGIUZXhoiG88bcBz7HHIdzh0WHlMeZx51HmkeUx4WHs8dah0AHXwc3hs9G4saxRnyGBIYGBcQFv8U4RPAEoYRQBACD70NWwwHC6gJOwjWBloF7gOBAhABkf8b/qv8R/ve+Xf4Ife79W/0JfPZ8Z/wde9N7ijtE+wU6xvqM+lb6H7nw+YX5mrlxuQz5Mzje+Ma49fioeKD4nXiYeJy4pHitOL04j/jn+MN5IPkFOWs5U3mDefM55/ogOl36m7rdOyE7abuyu8D8Unyj/Pg9D/2qfcb+Yn6/vuK/Qj/lAAlAg==';\r\n\r\nexport class SoundManager implements ISoundManager {\r\n  private _audioContext: AudioContext;\r\n\r\n  constructor(\r\n    private _terminal: ITerminal\r\n  ) {\r\n  }\r\n\r\n  public playBellSound(): void {\r\n    const audioContextCtor: typeof AudioContext = (<any>window).AudioContext || (<any>window).webkitAudioContext;\r\n    if (!this._audioContext && audioContextCtor) {\r\n      this._audioContext = new audioContextCtor();\r\n    }\r\n\r\n    if (this._audioContext) {\r\n      const bellAudioSource = this._audioContext.createBufferSource();\r\n      const context = this._audioContext;\r\n      this._audioContext.decodeAudioData(this.base64ToArrayBuffer(this.removeMimeType(this._terminal.options.bellSound)), (buffer) => {\r\n        bellAudioSource.buffer = buffer;\r\n        bellAudioSource.connect(context.destination);\r\n        bellAudioSource.start(0);\r\n      });\r\n    } else {\r\n      console.warn('Sorry, but the Web Audio API is not supported by your browser. Please, consider upgrading to the latest version');\r\n    }\r\n  }\r\n\r\n  private base64ToArrayBuffer(base64: string): ArrayBuffer {\r\n    const binaryString = window.atob(base64);\r\n    const len = binaryString.length;\r\n    const bytes = new Uint8Array(len);\r\n\r\n    for (let i = 0; i < len; i++) {\r\n      bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n\r\n    return bytes.buffer;\r\n  }\r\n\r\n  private removeMimeType(dataURI: string): string {\r\n    // Split the input to get the mime-type and the data itself\r\n    const splitUri = dataURI.split(',');\r\n\r\n    // Return only the data\r\n    return splitUri[1];\r\n  }\r\n}\r\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal } from './Types';\n\n/**\n * Represents a selection within the buffer. This model only cares about column\n * and row coordinates, not wide characters.\n */\nexport class SelectionModel {\n  /**\n   * Whether select all is currently active.\n   */\n  public isSelectAllActive: boolean;\n\n  /**\n   * The [x, y] position the selection starts at.\n   */\n  public selectionStart: [number, number];\n\n  /**\n   * The minimal length of the selection from the start position. When double\n   * clicking on a word, the word will be selected which makes the selection\n   * start at the start of the word and makes this variable the length.\n   */\n  public selectionStartLength: number;\n\n  /**\n   * The [x, y] position the selection ends at.\n   */\n  public selectionEnd: [number, number];\n\n  constructor(\n    private _terminal: ITerminal\n  ) {\n    this.clearSelection();\n  }\n\n  /**\n   * Clears the current selection.\n   */\n  public clearSelection(): void {\n    this.selectionStart = null;\n    this.selectionEnd = null;\n    this.isSelectAllActive = false;\n    this.selectionStartLength = 0;\n  }\n\n  /**\n   * The final selection start, taking into consideration select all.\n   */\n  public get finalSelectionStart(): [number, number] {\n    if (this.isSelectAllActive) {\n      return [0, 0];\n    }\n\n    if (!this.selectionEnd || !this.selectionStart) {\n      return this.selectionStart;\n    }\n\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n  }\n\n  /**\n   * The final selection end, taking into consideration select all, double click\n   * word selection and triple click line selection.\n   */\n  public get finalSelectionEnd(): [number, number] {\n    if (this.isSelectAllActive) {\n      return [this._terminal.cols, this._terminal.buffer.ybase + this._terminal.rows - 1];\n    }\n\n    if (!this.selectionStart) {\n      return null;\n    }\n\n    // Use the selection start if the end doesn't exist or they're reversed\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n      return [this.selectionStart[0] + this.selectionStartLength, this.selectionStart[1]];\n    }\n\n    // Ensure the the word/line is selected after a double/triple click\n    if (this.selectionStartLength) {\n      // Select the larger of the two when start and end are on the same line\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\n        return [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]];\n      }\n    }\n    return this.selectionEnd;\n  }\n\n  /**\n   * Returns whether the selection start and end are reversed.\n   */\n  public areSelectionValuesReversed(): boolean {\n    const start = this.selectionStart;\n    const end = this.selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   * @return Whether a refresh is necessary.\n   */\n  public onTrim(amount: number): boolean {\n    // Adjust the selection position based on the trimmed amount.\n    if (this.selectionStart) {\n      this.selectionStart[1] -= amount;\n    }\n    if (this.selectionEnd) {\n      this.selectionEnd[1] -= amount;\n    }\n\n    // The selection has moved off the buffer, clear it.\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\n      this.clearSelection();\n      return true;\n    }\n\n    // If the selection start is trimmed, ensure the start column is 0.\n    if (this.selectionStart && this.selectionStart[1] < 0) {\n      this.selectionStart[1] = 0;\n    }\n    return false;\n  }\n}\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, ICircularList, ISelectionManager, IBuffer, LineData, CharData, XtermListener } from './Types';\r\nimport { MouseHelper } from './utils/MouseHelper';\r\nimport * as Browser from './shared/utils/Browser';\r\nimport { CharMeasure } from './utils/CharMeasure';\r\nimport { CircularList } from './utils/CircularList';\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { SelectionModel } from './SelectionModel';\r\nimport { CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from './Buffer';\r\nimport { AltClickHandler } from './handlers/AltClickHandler';\r\n\r\n/**\r\n * The number of pixels the mouse needs to be above or below the viewport in\r\n * order to scroll at the maximum speed.\r\n */\r\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\r\n\r\n/**\r\n * The maximum scrolling speed\r\n */\r\nconst DRAG_SCROLL_MAX_SPEED = 15;\r\n\r\n/**\r\n * The number of milliseconds between drag scroll updates.\r\n */\r\nconst DRAG_SCROLL_INTERVAL = 50;\r\n\r\n/**\r\n * The maximum amount of time that can have elapsed for an alt click to move the\r\n * cursor.\r\n */\r\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\r\n\r\n/**\r\n * A string containing all characters that are considered word separated by the\r\n * double click to select work logic.\r\n */\r\nconst WORD_SEPARATORS = ' ()[]{}\\'\"';\r\n\r\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\r\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\r\n\r\n/**\r\n * Represents a position of a word on a line.\r\n */\r\ninterface IWordPosition {\r\n  start: number;\r\n  length: number;\r\n}\r\n\r\n/**\r\n * A selection mode, this drives how the selection behaves on mouse move.\r\n */\r\nenum SelectionMode {\r\n  NORMAL,\r\n  WORD,\r\n  LINE\r\n}\r\n\r\n/**\r\n * A class that manages the selection of the terminal. With help from\r\n * SelectionModel, SelectionManager handles with all logic associated with\r\n * dealing with the selection, including handling mouse interaction, wide\r\n * characters and fetching the actual text within the selection. Rendering is\r\n * not handled by the SelectionManager but a 'refresh' event is fired when the\r\n * selection is ready to be redrawn.\r\n */\r\nexport class SelectionManager extends EventEmitter implements ISelectionManager {\r\n  protected _model: SelectionModel;\r\n\r\n  /**\r\n   * The amount to scroll every drag scroll update (depends on how far the mouse\r\n   * drag is above or below the terminal).\r\n   */\r\n  private _dragScrollAmount: number;\r\n\r\n  /**\r\n   * The current selection mode.\r\n   */\r\n  private _activeSelectionMode: SelectionMode;\r\n\r\n  /**\r\n   * A setInterval timer that is active while the mouse is down whose callback\r\n   * scrolls the viewport when necessary.\r\n   */\r\n  private _dragScrollIntervalTimer: NodeJS.Timer;\r\n\r\n  /**\r\n   * The animation frame ID used for refreshing the selection.\r\n   */\r\n  private _refreshAnimationFrame: number;\r\n\r\n  /**\r\n   * Whether selection is enabled.\r\n   */\r\n  private _enabled = true;\r\n\r\n  private _mouseMoveListener: EventListener;\r\n  private _mouseUpListener: EventListener;\r\n  private _trimListener: XtermListener;\r\n\r\n  private _mouseDownTimeStamp: number;\r\n\r\n  constructor(\r\n    private _terminal: ITerminal,\r\n    private _charMeasure: CharMeasure\r\n  ) {\r\n    super();\r\n    this._initListeners();\r\n    this.enable();\r\n\r\n    this._model = new SelectionModel(_terminal);\r\n    this._activeSelectionMode = SelectionMode.NORMAL;\r\n  }\r\n\r\n  private get _buffer(): IBuffer {\r\n    return this._terminal.buffers.active;\r\n  }\r\n\r\n  /**\r\n   * Initializes listener variables.\r\n   */\r\n  private _initListeners(): void {\r\n    this._mouseMoveListener = event => this._onMouseMove(<MouseEvent>event);\r\n    this._mouseUpListener = event => this._onMouseUp(<MouseEvent>event);\r\n    this._trimListener = (amount: number) => this._onTrim(amount);\r\n\r\n    this.initBuffersListeners();\r\n  }\r\n\r\n  public initBuffersListeners(): void {\r\n    this._terminal.buffer.lines.on('trim', this._trimListener);\r\n    this._terminal.buffers.on('activate', e => this._onBufferActivate(e));\r\n  }\r\n\r\n  /**\r\n   * Disables the selection manager. This is useful for when terminal mouse\r\n   * are enabled.\r\n   */\r\n  public disable(): void {\r\n    this.clearSelection();\r\n    this._enabled = false;\r\n  }\r\n\r\n  /**\r\n   * Enable the selection manager.\r\n   */\r\n  public enable(): void {\r\n    this._enabled = true;\r\n  }\r\n\r\n  public get selectionStart(): [number, number] { return this._model.finalSelectionStart; }\r\n  public get selectionEnd(): [number, number] { return this._model.finalSelectionEnd; }\r\n\r\n  /**\r\n   * Gets whether there is an active text selection.\r\n   */\r\n  public get hasSelection(): boolean {\r\n    const start = this._model.finalSelectionStart;\r\n    const end = this._model.finalSelectionEnd;\r\n    if (!start || !end) {\r\n      return false;\r\n    }\r\n    return start[0] !== end[0] || start[1] !== end[1];\r\n  }\r\n\r\n  /**\r\n   * Gets the text currently selected.\r\n   */\r\n  public get selectionText(): string {\r\n    const start = this._model.finalSelectionStart;\r\n    const end = this._model.finalSelectionEnd;\r\n    if (!start || !end) {\r\n      return '';\r\n    }\r\n\r\n    // Get first row\r\n    const startRowEndCol = start[1] === end[1] ? end[0] : null;\r\n    let result: string[] = [];\r\n    result.push(this._buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\r\n\r\n    // Get middle rows\r\n    for (let i = start[1] + 1; i <= end[1] - 1; i++) {\r\n      const bufferLine = this._buffer.lines.get(i);\r\n      const lineText = this._buffer.translateBufferLineToString(i, true);\r\n      if ((<any>bufferLine).isWrapped) {\r\n        result[result.length - 1] += lineText;\r\n      } else {\r\n        result.push(lineText);\r\n      }\r\n    }\r\n\r\n    // Get final row\r\n    if (start[1] !== end[1]) {\r\n      const bufferLine = this._buffer.lines.get(end[1]);\r\n      const lineText = this._buffer.translateBufferLineToString(end[1], true, 0, end[0]);\r\n      if ((<any>bufferLine).isWrapped) {\r\n        result[result.length - 1] += lineText;\r\n      } else {\r\n        result.push(lineText);\r\n      }\r\n    }\r\n\r\n    // Format string by replacing non-breaking space chars with regular spaces\r\n    // and joining the array into a multi-line string.\r\n    const formattedResult = result.map(line => {\r\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\r\n    }).join(Browser.isMSWindows ? '\\r\\n' : '\\n');\r\n\r\n    return formattedResult;\r\n  }\r\n\r\n  /**\r\n   * Clears the current terminal selection.\r\n   */\r\n  public clearSelection(): void {\r\n    this._model.clearSelection();\r\n    this._removeMouseDownListeners();\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Queues a refresh, redrawing the selection on the next opportunity.\r\n   * @param isNewSelection Whether the selection should be registered as a new\r\n   * selection on Linux.\r\n   */\r\n  public refresh(isNewSelection?: boolean): void {\r\n    // Queue the refresh for the renderer\r\n    if (!this._refreshAnimationFrame) {\r\n      this._refreshAnimationFrame = window.requestAnimationFrame(() => this._refresh());\r\n    }\r\n\r\n    // If the platform is Linux and the refresh call comes from a mouse event,\r\n    // we need to update the selection for middle click to paste selection.\r\n    if (Browser.isLinux && isNewSelection) {\r\n      const selectionText = this.selectionText;\r\n      if (selectionText.length) {\r\n        this.emit('newselection', this.selectionText);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fires the refresh event, causing consumers to pick it up and redraw the\r\n   * selection state.\r\n   */\r\n  private _refresh(): void {\r\n    this._refreshAnimationFrame = null;\r\n    this.emit('refresh', { start: this._model.finalSelectionStart, end: this._model.finalSelectionEnd });\r\n  }\r\n\r\n  /**\r\n   * Checks if the current click was inside the current selection\r\n   * @param event The mouse event\r\n   */\r\n  public isClickInSelection(event: MouseEvent): boolean {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    const start = this._model.finalSelectionStart;\r\n    const end = this._model.finalSelectionEnd;\r\n\r\n    if (!start || !end) {\r\n      return false;\r\n    }\r\n\r\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\r\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] > start[0] && coords[0] < end[0]) ||\r\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]);\r\n  }\r\n\r\n  /**\r\n   * Selects word at the current mouse event coordinates.\r\n   * @param event The mouse event.\r\n   */\r\n  public selectWordAtCursor(event: MouseEvent): void {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    if (coords) {\r\n      this._selectWordAt(coords, false);\r\n      this._model.selectionEnd = null;\r\n      this.refresh(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects all text within the terminal.\r\n   */\r\n  public selectAll(): void {\r\n    this._model.isSelectAllActive = true;\r\n    this.refresh();\r\n    this._terminal.emit('selection');\r\n  }\r\n\r\n  /**\r\n   * Handle the buffer being trimmed, adjust the selection position.\r\n   * @param amount The amount the buffer is being trimmed.\r\n   */\r\n  private _onTrim(amount: number): void {\r\n    const needsRefresh = this._model.onTrim(amount);\r\n    if (needsRefresh) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\r\n   * @param event The mouse event.\r\n   */\r\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] {\r\n    const coords = this._terminal.mouseHelper.getCoords(event, this._terminal.screenElement, this._charMeasure, this._terminal.options.lineHeight, this._terminal.cols, this._terminal.rows, true);\r\n    if (!coords) {\r\n      return null;\r\n    }\r\n\r\n    // Convert to 0-based\r\n    coords[0]--;\r\n    coords[1]--;\r\n\r\n    // Convert viewport coords to buffer coords\r\n    coords[1] += this._terminal.buffer.ydisp;\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * Gets the amount the viewport should be scrolled based on how far out of the\r\n   * terminal the mouse is.\r\n   * @param event The mouse event.\r\n   */\r\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\r\n    let offset = MouseHelper.getCoordsRelativeToElement(event, this._terminal.screenElement)[1];\r\n    const terminalHeight = this._terminal.rows * Math.ceil(this._charMeasure.height * this._terminal.options.lineHeight);\r\n    if (offset >= 0 && offset <= terminalHeight) {\r\n      return 0;\r\n    }\r\n    if (offset > terminalHeight) {\r\n      offset -= terminalHeight;\r\n    }\r\n\r\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\r\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\r\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\r\n  }\r\n\r\n  /**\r\n   * Returns whether the selection manager should force selection, regardless of\r\n   * whether the terminal is in mouse events mode.\r\n   * @param event The mouse event.\r\n   */\r\n  public shouldForceSelection(event: MouseEvent): boolean {\r\n    return Browser.isMac ? event.altKey : event.shiftKey;\r\n  }\r\n\r\n  /**\r\n   * Handles te mousedown event, setting up for a new selection.\r\n   * @param event The mousedown event.\r\n   */\r\n  public onMouseDown(event: MouseEvent): void {\r\n    this._mouseDownTimeStamp = event.timeStamp;\r\n    // If we have selection, we want the context menu on right click even if the\r\n    // terminal is in mouse mode.\r\n    if (event.button === 2 && this.hasSelection) {\r\n      return;\r\n    }\r\n\r\n    // Only action the primary button\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    // Allow selection when using a specific modifier key, even when disabled\r\n    if (!this._enabled) {\r\n      if (!this.shouldForceSelection(event)) {\r\n        return;\r\n      }\r\n\r\n      // Don't send the mouse down event to the current process, we want to select\r\n      event.stopPropagation();\r\n    }\r\n\r\n    // Tell the browser not to start a regular selection\r\n    event.preventDefault();\r\n\r\n    // Reset drag scroll state\r\n    this._dragScrollAmount = 0;\r\n\r\n    if (this._enabled && event.shiftKey) {\r\n      this._onIncrementalClick(event);\r\n    } else {\r\n      if (event.detail === 1) {\r\n        this._onSingleClick(event);\r\n      } else if (event.detail === 2) {\r\n        this._onDoubleClick(event);\r\n      } else if (event.detail === 3) {\r\n        this._onTripleClick(event);\r\n      }\r\n    }\r\n\r\n    this._addMouseDownListeners();\r\n    this.refresh(true);\r\n  }\r\n\r\n  /**\r\n   * Adds listeners when mousedown is triggered.\r\n   */\r\n  private _addMouseDownListeners(): void {\r\n    // Listen on the document so that dragging outside of viewport works\r\n    this._terminal.element.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\r\n    this._terminal.element.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\r\n    this._dragScrollIntervalTimer = setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\r\n  }\r\n\r\n  /**\r\n   * Removes the listeners that are registered when mousedown is triggered.\r\n   */\r\n  private _removeMouseDownListeners(): void {\r\n    this._terminal.element.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\r\n    this._terminal.element.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\r\n    clearInterval(this._dragScrollIntervalTimer);\r\n    this._dragScrollIntervalTimer = null;\r\n  }\r\n\r\n  /**\r\n   * Performs an incremental click, setting the selection end position to the mouse\r\n   * position.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onIncrementalClick(event: MouseEvent): void {\r\n    if (this._model.selectionStart) {\r\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a single click, resetting relevant state and setting the selection\r\n   * start position.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onSingleClick(event: MouseEvent): void {\r\n    this._model.selectionStartLength = 0;\r\n    this._model.isSelectAllActive = false;\r\n    this._activeSelectionMode = SelectionMode.NORMAL;\r\n\r\n    // Initialize the new selection\r\n    this._model.selectionStart = this._getMouseBufferCoords(event);\r\n    if (!this._model.selectionStart) {\r\n      return;\r\n    }\r\n    this._model.selectionEnd = null;\r\n\r\n    // Ensure the line exists\r\n    const line = this._buffer.lines.get(this._model.selectionStart[1]);\r\n    if (!line) {\r\n      return;\r\n    }\r\n\r\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\r\n    if (line.length >= this._model.selectionStart[0]) {\r\n      return;\r\n    }\r\n\r\n    // If the mouse is over the second half of a wide character, adjust the\r\n    // selection to cover the whole character\r\n    const char = line[this._model.selectionStart[0]];\r\n    if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n      this._model.selectionStart[0]++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a double click, selecting the current work.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onDoubleClick(event: MouseEvent): void {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    if (coords) {\r\n      this._activeSelectionMode = SelectionMode.WORD;\r\n      this._selectWordAt(coords, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a triple click, selecting the current line and activating line\r\n   * select mode.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onTripleClick(event: MouseEvent): void {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    if (coords) {\r\n      this._activeSelectionMode = SelectionMode.LINE;\r\n      this._selectLineAt(coords[1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the mousemove event when the mouse button is down, recording the\r\n   * end of the selection and refreshing the selection.\r\n   * @param event The mousemove event.\r\n   */\r\n  private _onMouseMove(event: MouseEvent): void {\r\n    // If the mousemove listener is active it means that a selection is\r\n    // currently being made, we should stop propogation to prevent mouse events\r\n    // to be sent to the pty.\r\n    event.stopImmediatePropagation();\r\n\r\n    // Record the previous position so we know whether to redraw the selection\r\n    // at the end.\r\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\r\n\r\n    // Set the initial selection end based on the mouse coordinates\r\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\r\n    if (!this._model.selectionEnd) {\r\n      this.refresh(true);\r\n      return;\r\n    }\r\n\r\n    // Select the entire line if line select mode is active.\r\n    if (this._activeSelectionMode === SelectionMode.LINE) {\r\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\r\n        this._model.selectionEnd[0] = 0;\r\n      } else {\r\n        this._model.selectionEnd[0] = this._terminal.cols;\r\n      }\r\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\r\n      this._selectToWordAt(this._model.selectionEnd);\r\n    }\r\n\r\n    // Determine the amount of scrolling that will happen.\r\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\r\n\r\n    // If the cursor was above or below the viewport, make sure it's at the\r\n    // start or end of the viewport respectively.\r\n    if (this._dragScrollAmount > 0) {\r\n      this._model.selectionEnd[0] = this._terminal.cols;\r\n    } else if (this._dragScrollAmount < 0) {\r\n      this._model.selectionEnd[0] = 0;\r\n    }\r\n\r\n    // If the character is a wide character include the cell to the right in the\r\n    // selection. Note that selections at the very end of the line will never\r\n    // have a character.\r\n    if (this._model.selectionEnd[1] < this._buffer.lines.length) {\r\n      const char = this._buffer.lines.get(this._model.selectionEnd[1])[this._model.selectionEnd[0]];\r\n      if (char && char[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n        this._model.selectionEnd[0]++;\r\n      }\r\n    }\r\n\r\n    // Only draw here if the selection changes.\r\n    if (!previousSelectionEnd ||\r\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\r\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\r\n      this.refresh(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\r\n   * scrolling of the viewport.\r\n   */\r\n  private _dragScroll(): void {\r\n    if (this._dragScrollAmount) {\r\n      this._terminal.scrollLines(this._dragScrollAmount, false);\r\n      // Re-evaluate selection\r\n      if (this._dragScrollAmount > 0) {\r\n        this._model.selectionEnd = [this._terminal.cols - 1, Math.min(this._terminal.buffer.ydisp + this._terminal.rows, this._terminal.buffer.lines.length - 1)];\r\n      } else {\r\n        this._model.selectionEnd = [0, this._terminal.buffer.ydisp];\r\n      }\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the mouseup event, removing the mousedown listeners.\r\n   * @param event The mouseup event.\r\n   */\r\n  private _onMouseUp(event: MouseEvent): void {\r\n    let timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\r\n\r\n    this._removeMouseDownListeners();\r\n\r\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME) {\r\n      (new AltClickHandler(event, this._terminal)).move();\r\n    } else if (this.hasSelection) {\r\n      this._terminal.emit('selection');\r\n    }\r\n  }\r\n\r\n  private _onBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\r\n    this.clearSelection();\r\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\r\n    // reverseIndex) and delete in a splice is only ever used when the same\r\n    // number of elements was just added. Given this is could actually be\r\n    // beneficial to leave the selection as is for these cases.\r\n    e.inactiveBuffer.lines.off('trim', this._trimListener);\r\n    e.activeBuffer.lines.on('trim', this._trimListener);\r\n  }\r\n\r\n  /**\r\n   * Converts a viewport column to the character index on the buffer line, the\r\n   * latter takes into account wide characters.\r\n   * @param coords The coordinates to find the 2 index for.\r\n   */\r\n  private _convertViewportColToCharacterIndex(bufferLine: any, coords: [number, number]): number {\r\n    let charIndex = coords[0];\r\n    for (let i = 0; coords[0] >= i; i++) {\r\n      const char = bufferLine[i];\r\n      if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n        // Wide characters aren't included in the line string so decrement the\r\n        // index so the index is back on the wide character.\r\n        charIndex--;\r\n      } else if (char[CHAR_DATA_CHAR_INDEX].length > 1 && coords[0] !== i) {\r\n        // Emojis take up multiple characters, so adjust accordingly. For these\r\n        // we don't want ot include the character at the column as we're\r\n        // returning the start index in the string, not the end index.\r\n        charIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n      }\r\n    }\r\n    return charIndex;\r\n  }\r\n\r\n  public setSelection(col: number, row: number, length: number): void {\r\n    this._model.clearSelection();\r\n    this._removeMouseDownListeners();\r\n    this._model.selectionStart = [col, row];\r\n    this._model.selectionStartLength = length;\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Gets positional information for the word at the coordinated specified.\r\n   * @param coords The coordinates to get the word at.\r\n   */\r\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): IWordPosition {\r\n    const bufferLine = this._buffer.lines.get(coords[1]);\r\n    if (!bufferLine) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._buffer.translateBufferLineToString(coords[1], false);\r\n\r\n    // Get actual index, taking into consideration wide characters\r\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\r\n    let endIndex = startIndex;\r\n\r\n    // Record offset to be used later\r\n    const charOffset = coords[0] - startIndex;\r\n    let leftWideCharCount = 0;\r\n    let rightWideCharCount = 0;\r\n    let leftLongCharOffset = 0;\r\n    let rightLongCharOffset = 0;\r\n\r\n    if (line.charAt(startIndex) === ' ') {\r\n      // Expand until non-whitespace is hit\r\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\r\n        startIndex--;\r\n      }\r\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\r\n        endIndex++;\r\n      }\r\n    } else {\r\n      // Expand until whitespace is hit. This algorithm works by scanning left\r\n      // and right from the starting position, keeping both the index format\r\n      // (line) and the column format (bufferLine) in sync. When a wide\r\n      // character is hit, it is recorded and the column index is adjusted.\r\n      let startCol = coords[0];\r\n      let endCol = coords[0];\r\n\r\n      // Consider the initial position, skip it and increment the wide char\r\n      // variable\r\n      if (bufferLine[startCol][CHAR_DATA_WIDTH_INDEX] === 0) {\r\n        leftWideCharCount++;\r\n        startCol--;\r\n      }\r\n      if (bufferLine[endCol][CHAR_DATA_WIDTH_INDEX] === 2) {\r\n        rightWideCharCount++;\r\n        endCol++;\r\n      }\r\n\r\n      // Adjust the end index for characters whose length are > 1 (emojis)\r\n      if (bufferLine[endCol][CHAR_DATA_CHAR_INDEX].length > 1) {\r\n        rightLongCharOffset += bufferLine[endCol][CHAR_DATA_CHAR_INDEX].length - 1;\r\n        endIndex += bufferLine[endCol][CHAR_DATA_CHAR_INDEX].length - 1;\r\n      }\r\n\r\n      // Expand the string in both directions until a space is hit\r\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine[startCol - 1])) {\r\n        const char = bufferLine[startCol - 1];\r\n        if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n          // If the next character is a wide char, record it and skip the column\r\n          leftWideCharCount++;\r\n          startCol--;\r\n        } else if (char[CHAR_DATA_CHAR_INDEX].length > 1) {\r\n          // If the next character's string is longer than 1 char (eg. emoji),\r\n          // adjust the index\r\n          leftLongCharOffset += char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n          startIndex -= char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n        }\r\n        startIndex--;\r\n        startCol--;\r\n      }\r\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine[endCol + 1])) {\r\n        const char = bufferLine[endCol + 1];\r\n        if (char[CHAR_DATA_WIDTH_INDEX] === 2) {\r\n          // If the next character is a wide char, record it and skip the column\r\n          rightWideCharCount++;\r\n          endCol++;\r\n        } else if (char[CHAR_DATA_CHAR_INDEX].length > 1) {\r\n          // If the next character's string is longer than 1 char (eg. emoji),\r\n          // adjust the index\r\n          rightLongCharOffset += char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n          endIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n        }\r\n        endIndex++;\r\n        endCol++;\r\n      }\r\n    }\r\n\r\n    // Incremenet the end index so it is at the start of the next character\r\n    endIndex++;\r\n\r\n    // Calculate the start _column_, converting the the string indexes back to\r\n    // column coordinates.\r\n    const start =\r\n        startIndex // The index of the selection's start char in the line string\r\n        + charOffset // The difference between the initial char's column and index\r\n        - leftWideCharCount // The number of wide chars left of the initial char\r\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\r\n\r\n    // Calculate the length in _columns_, converting the the string indexes back\r\n    // to column coordinates.\r\n    const length = Math.min(this._terminal.cols, // Disallow lengths larger than the terminal cols\r\n        endIndex // The index of the selection's end char in the line string\r\n        - startIndex // The index of the selection's start char in the line string\r\n        + leftWideCharCount // The number of wide chars left of the initial char\r\n        + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\r\n        - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\r\n        - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\r\n\r\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\r\n      return null;\r\n    }\r\n\r\n    return { start, length };\r\n  }\r\n\r\n  /**\r\n   * Selects the word at the coordinates specified.\r\n   * @param coords The coordinates to get the word at.\r\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\r\n   */\r\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\r\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\r\n    if (wordPosition) {\r\n      this._model.selectionStart = [wordPosition.start, coords[1]];\r\n      this._model.selectionStartLength = wordPosition.length;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selection end to the word at the coordinated specified.\r\n   * @param coords The coordinates to get the word at.\r\n   */\r\n  private _selectToWordAt(coords: [number, number]): void {\r\n    const wordPosition = this._getWordAt(coords, true);\r\n    if (wordPosition) {\r\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : (wordPosition.start + wordPosition.length), coords[1]];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets whether the character is considered a word separator by the select\r\n   * word logic.\r\n   * @param char The character to check.\r\n   */\r\n  private _isCharWordSeparator(charData: CharData): boolean {\r\n    // Zero width characters are never separators as they are always to the\r\n    // right of wide characters\r\n    if (charData[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n      return false;\r\n    }\r\n    return WORD_SEPARATORS.indexOf(charData[CHAR_DATA_CHAR_INDEX]) >= 0;\r\n  }\r\n\r\n  /**\r\n   * Selects the line specified.\r\n   * @param line The line index.\r\n   */\r\n  protected _selectLineAt(line: number): void {\r\n    this._model.selectionStart = [0, line];\r\n    this._model.selectionStartLength = this._terminal.cols;\r\n  }\r\n}\r\n","/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { C0 } from './EscapeSequences';\nimport { IInputHandler } from './Types';\nimport { CHARSETS, DEFAULT_CHARSET } from './Charsets';\n\nconst normalStateHandler: {[key: string]: (parser: Parser, handler: IInputHandler) => void} = {};\nnormalStateHandler[C0.BEL] = (parser, handler) => handler.bell();\nnormalStateHandler[C0.LF] = (parser, handler) => handler.lineFeed();\nnormalStateHandler[C0.VT] = normalStateHandler[C0.LF];\nnormalStateHandler[C0.FF] = normalStateHandler[C0.LF];\nnormalStateHandler[C0.CR] = (parser, handler) => handler.carriageReturn();\nnormalStateHandler[C0.BS] = (parser, handler) => handler.backspace();\nnormalStateHandler[C0.HT] = (parser, handler) => handler.tab();\nnormalStateHandler[C0.SO] = (parser, handler) => handler.shiftOut();\nnormalStateHandler[C0.SI] = (parser, handler) => handler.shiftIn();\nnormalStateHandler[C0.ESC] = (parser, handler) => parser.setState(ParserState.ESCAPED);\n\n// TODO: Remove terminal when parser owns params and currentParam\nconst escapedStateHandler: {[key: string]: (parser: Parser, terminal: any) => void} = {};\nescapedStateHandler['['] = (parser, terminal) => {\n  // ESC [ Control Sequence Introducer (CSI  is 0x9b)\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.CSI_PARAM);\n};\nescapedStateHandler[']'] = (parser, terminal) => {\n  // ESC ] Operating System Command (OSC is 0x9d)\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.OSC);\n};\nescapedStateHandler['P'] = (parser, terminal) => {\n  // ESC P Device Control String (DCS is 0x90)\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.DCS);\n};\nescapedStateHandler['_'] = (parser, terminal) => {\n  // ESC _ Application Program Command ( APC is 0x9f).\n  parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['^'] = (parser, terminal) => {\n  // ESC ^ Privacy Message ( PM is 0x9e).\n  parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['c'] = (parser, terminal) => {\n  // ESC c Full Reset (RIS).\n  terminal.reset();\n};\nescapedStateHandler['E'] = (parser, terminal) => {\n  // ESC E Next Line ( NEL is 0x85).\n  terminal.buffer.x = 0;\n  terminal.index();\n  parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['D'] = (parser, terminal) => {\n  // ESC D Index ( IND is 0x84).\n  terminal.index();\n  parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['M'] = (parser, terminal) => {\n  // ESC M Reverse Index ( RI is 0x8d).\n  terminal.reverseIndex();\n  parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['%'] = (parser, terminal) => {\n  // ESC % Select default/utf-8 character set.\n  // @ = default, G = utf-8\n  terminal.setgLevel(0);\n  terminal.setgCharset(0, DEFAULT_CHARSET); // US (default)\n  parser.setState(ParserState.NORMAL);\n  parser.skipNextChar();\n};\nescapedStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\n\nconst csiParamStateHandler: {[key: string]: (parser: Parser) => void} = {};\ncsiParamStateHandler['?'] = (parser) => parser.setPrefix('?');\ncsiParamStateHandler['>'] = (parser) => parser.setPrefix('>');\ncsiParamStateHandler['!'] = (parser) => parser.setPrefix('!');\ncsiParamStateHandler['0'] = (parser) => parser.setParam(parser.getParam() * 10);\ncsiParamStateHandler['1'] = (parser) => parser.setParam(parser.getParam() * 10 + 1);\ncsiParamStateHandler['2'] = (parser) => parser.setParam(parser.getParam() * 10 + 2);\ncsiParamStateHandler['3'] = (parser) => parser.setParam(parser.getParam() * 10 + 3);\ncsiParamStateHandler['4'] = (parser) => parser.setParam(parser.getParam() * 10 + 4);\ncsiParamStateHandler['5'] = (parser) => parser.setParam(parser.getParam() * 10 + 5);\ncsiParamStateHandler['6'] = (parser) => parser.setParam(parser.getParam() * 10 + 6);\ncsiParamStateHandler['7'] = (parser) => parser.setParam(parser.getParam() * 10 + 7);\ncsiParamStateHandler['8'] = (parser) => parser.setParam(parser.getParam() * 10 + 8);\ncsiParamStateHandler['9'] = (parser) => parser.setParam(parser.getParam() * 10 + 9);\ncsiParamStateHandler['$'] = (parser) => parser.setPostfix('$');\ncsiParamStateHandler['\"'] = (parser) => parser.setPostfix('\"');\ncsiParamStateHandler[' '] = (parser) => parser.setPostfix(' ');\ncsiParamStateHandler['\\''] = (parser) => parser.setPostfix('\\'');\ncsiParamStateHandler[';'] = (parser) => parser.finalizeParam();\ncsiParamStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\n\nconst csiStateHandler: {[key: string]: (handler: IInputHandler, params: number[], prefix: string, postfix: string, parser: Parser) => void} = {};\ncsiStateHandler['@'] = (handler, params, prefix) => handler.insertChars(params);\ncsiStateHandler['A'] = (handler, params, prefix) => handler.cursorUp(params);\ncsiStateHandler['B'] = (handler, params, prefix) => handler.cursorDown(params);\ncsiStateHandler['C'] = (handler, params, prefix) => handler.cursorForward(params);\ncsiStateHandler['D'] = (handler, params, prefix) => handler.cursorBackward(params);\ncsiStateHandler['E'] = (handler, params, prefix) => handler.cursorNextLine(params);\ncsiStateHandler['F'] = (handler, params, prefix) => handler.cursorPrecedingLine(params);\ncsiStateHandler['G'] = (handler, params, prefix) => handler.cursorCharAbsolute(params);\ncsiStateHandler['H'] = (handler, params, prefix) => handler.cursorPosition(params);\ncsiStateHandler['I'] = (handler, params, prefix) => handler.cursorForwardTab(params);\ncsiStateHandler['J'] = (handler, params, prefix) => handler.eraseInDisplay(params);\ncsiStateHandler['K'] = (handler, params, prefix) => handler.eraseInLine(params);\ncsiStateHandler['L'] = (handler, params, prefix) => handler.insertLines(params);\ncsiStateHandler['M'] = (handler, params, prefix) => handler.deleteLines(params);\ncsiStateHandler['P'] = (handler, params, prefix) => handler.deleteChars(params);\ncsiStateHandler['S'] = (handler, params, prefix) => handler.scrollUp(params);\ncsiStateHandler['T'] = (handler, params, prefix) => {\n  if (params.length < 2 && !prefix) {\n    handler.scrollDown(params);\n  }\n};\ncsiStateHandler['X'] = (handler, params, prefix) => handler.eraseChars(params);\ncsiStateHandler['Z'] = (handler, params, prefix) => handler.cursorBackwardTab(params);\ncsiStateHandler['`'] = (handler, params, prefix) => handler.charPosAbsolute(params);\ncsiStateHandler['a'] = (handler, params, prefix) => handler.HPositionRelative(params);\ncsiStateHandler['b'] = (handler, params, prefix) => handler.repeatPrecedingCharacter(params);\ncsiStateHandler['c'] = (handler, params, prefix) => handler.sendDeviceAttributes(params);\ncsiStateHandler['d'] = (handler, params, prefix) => handler.linePosAbsolute(params);\ncsiStateHandler['e'] = (handler, params, prefix) => handler.VPositionRelative(params);\ncsiStateHandler['f'] = (handler, params, prefix) => handler.HVPosition(params);\ncsiStateHandler['g'] = (handler, params, prefix) => handler.tabClear(params);\ncsiStateHandler['h'] = (handler, params, prefix) => handler.setMode(params);\ncsiStateHandler['l'] = (handler, params, prefix) => handler.resetMode(params);\ncsiStateHandler['m'] = (handler, params, prefix) => handler.charAttributes(params);\ncsiStateHandler['n'] = (handler, params, prefix) => handler.deviceStatus(params);\ncsiStateHandler['p'] = (handler, params, prefix) => {\n  switch (prefix) {\n    case '!': handler.softReset(params); break;\n  }\n};\ncsiStateHandler['q'] = (handler, params, prefix, postfix) => {\n  if (postfix === ' ') {\n    handler.setCursorStyle(params);\n  }\n};\ncsiStateHandler['r'] = (handler, params) => handler.setScrollRegion(params);\ncsiStateHandler['s'] = (handler, params) => handler.saveCursor(params);\ncsiStateHandler['u'] = (handler, params) => handler.restoreCursor(params);\ncsiStateHandler[C0.CAN] = (handler, params, prefix, postfix, parser) => parser.setState(ParserState.NORMAL);\n\nexport enum ParserState {\n  NORMAL = 0,\n  ESCAPED = 1,\n  CSI_PARAM = 2,\n  CSI = 3,\n  OSC = 4,\n  CHARSET = 5,\n  DCS = 6,\n  IGNORE = 7\n}\n\n/**\n * The terminal's parser, all input into the terminal goes through the parser\n * which parses and defers the actual input handling the the IInputHandler\n * specified in the constructor.\n */\nexport class Parser {\n  private _state: ParserState;\n  private _position: number;\n\n  // TODO: Remove terminal when handler can do everything\n  constructor(\n    private _inputHandler: IInputHandler,\n    private _terminal: any\n  ) {\n    this._state = ParserState.NORMAL;\n  }\n\n  /**\n   * Parse and handle data.\n   *\n   * @param data The data to parse.\n   */\n  public parse(data: string): ParserState {\n    const l = data.length;\n    let j;\n    let cs;\n    let ch;\n    let code;\n    let low;\n\n    const cursorStartX = this._terminal.buffer.x;\n    const cursorStartY = this._terminal.buffer.y;\n\n    if (this._terminal.debug) {\n      this._terminal.log('data: ' + data);\n    }\n\n    this._position = 0;\n    // apply leftover surrogate high from last write\n    if (this._terminal.surrogate_high) {\n      data = this._terminal.surrogate_high + data;\n      this._terminal.surrogate_high = '';\n    }\n\n    for (; this._position < l; this._position++) {\n      ch = data[this._position];\n\n      // FIXME: higher chars than 0xa0 are not allowed in escape sequences\n      //        --> maybe move to default\n      code = data.charCodeAt(this._position);\n      if (0xD800 <= code && code <= 0xDBFF) {\n        // we got a surrogate high\n        // get surrogate low (next 2 bytes)\n        low = data.charCodeAt(this._position + 1);\n        if (isNaN(low)) {\n          // end of data stream, save surrogate high\n          this._terminal.surrogate_high = ch;\n          continue;\n        }\n        code = ((code - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n        ch += data.charAt(this._position + 1);\n      }\n      // surrogate low - already handled above\n      if (0xDC00 <= code && code <= 0xDFFF) {\n        continue;\n      }\n\n      switch (this._state) {\n        case ParserState.NORMAL:\n          if (ch in normalStateHandler) {\n            normalStateHandler[ch](this, this._inputHandler);\n          } else {\n            this._inputHandler.addChar(ch, code);\n          }\n          break;\n        case ParserState.ESCAPED:\n          if (ch in escapedStateHandler) {\n            escapedStateHandler[ch](this, this._terminal);\n            // Skip switch as it was just handled\n            break;\n          }\n          switch (ch) {\n\n            // ESC (,),*,+,-,. Designate G0-G2 Character Set.\n            case '(': // <-- this seems to get all the attention\n            case ')':\n            case '*':\n            case '+':\n            case '-':\n            case '.':\n              switch (ch) {\n                case '(':\n                  this._terminal.gcharset = 0;\n                  break;\n                case ')':\n                  this._terminal.gcharset = 1;\n                  break;\n                case '*':\n                  this._terminal.gcharset = 2;\n                  break;\n                case '+':\n                  this._terminal.gcharset = 3;\n                  break;\n                case '-':\n                  this._terminal.gcharset = 1;\n                  break;\n                case '.':\n                  this._terminal.gcharset = 2;\n                  break;\n              }\n              this._state = ParserState.CHARSET;\n              break;\n\n            // Designate G3 Character Set (VT300).\n            // A = ISO Latin-1 Supplemental.\n            // Not implemented.\n            case '/':\n              this._terminal.gcharset = 3;\n              this._state = ParserState.CHARSET;\n              this._position--;\n              break;\n\n            // ESC N\n            // Single Shift Select of G2 Character Set\n            // ( SS2 is 0x8e). This affects next character only.\n            case 'N':\n              this._state = ParserState.NORMAL;\n              break;\n            // ESC O\n            // Single Shift Select of G3 Character Set\n            // ( SS3 is 0x8f). This affects next character only.\n            case 'O':\n              this._state = ParserState.NORMAL;\n              break;\n            // ESC n\n            // Invoke the G2 Character Set as GL (LS2).\n            case 'n':\n              this._terminal.setgLevel(2);\n              this._state = ParserState.NORMAL;\n              break;\n            // ESC o\n            // Invoke the G3 Character Set as GL (LS3).\n            case 'o':\n              this._terminal.setgLevel(3);\n              this._state = ParserState.NORMAL;\n              break;\n            // ESC |\n            // Invoke the G3 Character Set as GR (LS3R).\n            case '|':\n              this._terminal.setgLevel(3);\n              this._state = ParserState.NORMAL;\n              break;\n            // ESC }\n            // Invoke the G2 Character Set as GR (LS2R).\n            case '}':\n              this._terminal.setgLevel(2);\n              this._state = ParserState.NORMAL;\n              break;\n            // ESC ~\n            // Invoke the G1 Character Set as GR (LS1R).\n            case '~':\n              this._terminal.setgLevel(1);\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC 7 Save Cursor (DECSC).\n            case '7':\n              this._inputHandler.saveCursor();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC 8 Restore Cursor (DECRC).\n            case '8':\n              this._inputHandler.restoreCursor();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC # 3 DEC line height/width\n            case '#':\n              this._state = ParserState.NORMAL;\n              this._position++;\n              break;\n\n            // ESC H Tab Set (HTS is 0x88).\n            case 'H':\n              this._terminal.tabSet();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC = Application Keypad (DECKPAM).\n            case '=':\n              this._terminal.log('Serial port requested application keypad.');\n              this._terminal.applicationKeypad = true;\n              if (this._terminal.viewport) {\n                this._terminal.viewport.syncScrollArea();\n              }\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC > Normal Keypad (DECKPNM).\n            case '>':\n              this._terminal.log('Switching back to normal keypad.');\n              this._terminal.applicationKeypad = false;\n              if (this._terminal.viewport) {\n                this._terminal.viewport.syncScrollArea();\n              }\n              this._state = ParserState.NORMAL;\n              break;\n\n            default:\n              this._state = ParserState.NORMAL;\n              this._terminal.error('Unknown ESC control: %s.', ch);\n              break;\n          }\n          break;\n\n        case ParserState.CHARSET:\n          if (ch in CHARSETS) {\n            cs = CHARSETS[ch];\n            if (ch === '/') { // ISOLatin is actually /A\n              this.skipNextChar();\n            }\n          } else {\n            cs = DEFAULT_CHARSET;\n          }\n          this._terminal.setgCharset(this._terminal.gcharset, cs);\n          this._terminal.gcharset = null;\n          this._state = ParserState.NORMAL;\n          break;\n\n        case ParserState.OSC:\n          // OSC Ps ; Pt ST\n          // OSC Ps ; Pt BEL\n          //   Set Text Parameters.\n          if (ch === C0.ESC || ch === C0.BEL) {\n            if (ch === C0.ESC) this._position++;\n\n            this._terminal.params.push(this._terminal.currentParam);\n\n            switch (this._terminal.params[0]) {\n              case 0:\n              case 1:\n              case 2:\n                if (this._terminal.params[1]) {\n                  this._terminal.title = this._terminal.params[1];\n                  this._terminal.handleTitle(this._terminal.title);\n                }\n                break;\n              case 3:\n                // set X property\n                break;\n              case 4:\n              case 5:\n                // change dynamic colors\n                break;\n              case 10:\n              case 11:\n              case 12:\n              case 13:\n              case 14:\n              case 15:\n              case 16:\n              case 17:\n              case 18:\n              case 19:\n                // change dynamic ui colors\n                break;\n              case 46:\n                // change log file\n                break;\n              case 50:\n                // dynamic font\n                break;\n              case 51:\n                // emacs shell\n                break;\n              case 52:\n                // manipulate selection data\n                break;\n              case 104:\n              case 105:\n              case 110:\n              case 111:\n              case 112:\n              case 113:\n              case 114:\n              case 115:\n              case 116:\n              case 117:\n              case 118:\n                // reset colors\n                break;\n            }\n\n            this._terminal.params = [];\n            this._terminal.currentParam = 0;\n            this._state = ParserState.NORMAL;\n          } else {\n            if (!this._terminal.params.length) {\n              if (ch >= '0' && ch <= '9') {\n                this._terminal.currentParam =\n                  this._terminal.currentParam * 10 + ch.charCodeAt(0) - 48;\n              } else if (ch === ';') {\n                this._terminal.params.push(this._terminal.currentParam);\n                this._terminal.currentParam = '';\n              }\n            } else {\n              this._terminal.currentParam += ch;\n            }\n          }\n          break;\n\n        case ParserState.CSI_PARAM:\n          if (ch in csiParamStateHandler) {\n            csiParamStateHandler[ch](this);\n            break;\n          }\n          this.finalizeParam();\n          // Fall through the CSI as this character should be the CSI code.\n          this._state = ParserState.CSI;\n\n        case ParserState.CSI:\n          if (ch in csiStateHandler) {\n            if (this._terminal.debug) {\n              this._terminal.log(`CSI ${this._terminal.prefix ? this._terminal.prefix : ''} ${this._terminal.params ? this._terminal.params.join(';') : ''} ${this._terminal.postfix ? this._terminal.postfix : ''} ${ch}`);\n            }\n            csiStateHandler[ch](this._inputHandler, this._terminal.params, this._terminal.prefix, this._terminal.postfix, this);\n          } else {\n            this._terminal.error('Unknown CSI code: %s.', ch);\n          }\n\n          this._state = ParserState.NORMAL;\n          this._terminal.prefix = '';\n          this._terminal.postfix = '';\n          break;\n\n        case ParserState.DCS:\n          if (ch === C0.ESC || ch === C0.BEL) {\n            if (ch === C0.ESC) this._position++;\n            let pt;\n            let valid: boolean;\n\n            switch (this._terminal.prefix) {\n              // User-Defined Keys (DECUDK).\n              case '':\n                break;\n\n              // Request Status String (DECRQSS).\n              // test: echo -e '\\eP$q\"p\\e\\\\'\n              case '$q':\n                pt = this._terminal.currentParam;\n                valid = false;\n\n                switch (pt) {\n                  // DECSCA\n                  case '\"q':\n                    pt = '0\"q';\n                    break;\n\n                  // DECSCL\n                  case '\"p':\n                    pt = '61\"p';\n                    break;\n\n                  // DECSTBM\n                  case 'r':\n                    pt = ''\n                      + (this._terminal.buffer.scrollTop + 1)\n                      + ';'\n                      + (this._terminal.buffer.scrollBottom + 1)\n                      + 'r';\n                    break;\n\n                  // SGR\n                  case 'm':\n                    pt = '0m';\n                    break;\n\n                  default:\n                    this._terminal.error('Unknown DCS Pt: %s.', pt);\n                    pt = '';\n                    break;\n                }\n\n                this._terminal.send(C0.ESC + 'P' + +valid + '$r' + pt + C0.ESC + '\\\\');\n                break;\n\n              // Set Termcap/Terminfo Data (xterm, experimental).\n              case '+p':\n                break;\n\n              // Request Termcap/Terminfo String (xterm, experimental)\n              // Regular xterm does not even respond to this sequence.\n              // This can cause a small glitch in vim.\n              // test: echo -ne '\\eP+q6b64\\e\\\\'\n              case '+q':\n                pt = this._terminal.currentParam;\n                valid = false;\n\n                this._terminal.send(C0.ESC + 'P' + +valid + '+r' + pt + C0.ESC + '\\\\');\n                break;\n\n              default:\n                this._terminal.error('Unknown DCS prefix: %s.', this._terminal.prefix);\n                break;\n            }\n\n            this._terminal.currentParam = 0;\n            this._terminal.prefix = '';\n            this._state = ParserState.NORMAL;\n          } else if (!this._terminal.currentParam) {\n            if (!this._terminal.prefix && ch !== '$' && ch !== '+') {\n              this._terminal.currentParam = ch;\n            } else if (this._terminal.prefix.length === 2) {\n              this._terminal.currentParam = ch;\n            } else {\n              this._terminal.prefix += ch;\n            }\n          } else {\n            this._terminal.currentParam += ch;\n          }\n          break;\n\n        case ParserState.IGNORE:\n          // For PM and APC.\n          if (ch === C0.ESC || ch === C0.BEL) {\n            if (ch === C0.ESC) this._position++;\n            this._state = ParserState.NORMAL;\n          }\n          break;\n      }\n    }\n\n    // Fire the cursormove event if it's moved. This is done inside the parser\n    // as a render cannot happen in the middle of a parsing round.\n    if (this._terminal.buffer.x !== cursorStartX || this._terminal.buffer.y !== cursorStartY) {\n      this._terminal.emit('cursormove');\n    }\n\n    return this._state;\n  }\n\n  /**\n   * Set the parser's current parsing state.\n   *\n   * @param state The new state.\n   */\n  public setState(state: ParserState): void {\n    this._state = state;\n  }\n\n  /**\n   * Sets the parsier's current prefix. CSI codes can have prefixes of '?', '>'\n   * or '!'.\n   *\n   * @param prefix The prefix.\n   */\n  public setPrefix(prefix: string): void {\n    this._terminal.prefix = prefix;\n  }\n\n  /**\n   * Sets the parsier's current prefix. CSI codes can have postfixes of '$',\n   * '\"', ' ', '\\''.\n   *\n   * @param postfix The postfix.\n   */\n  public setPostfix(postfix: string): void {\n    this._terminal.postfix = postfix;\n  }\n\n  /**\n   * Sets the parser's current parameter.\n   *\n   * @param param the parameter.\n   */\n  public setParam(param: number): void {\n    this._terminal.currentParam = param;\n  }\n\n  /**\n   * Gets the parser's current parameter.\n   */\n  public getParam(): number {\n    return this._terminal.currentParam;\n  }\n\n  /**\n   * Finalizes the parser's current parameter, adding it to the list of\n   * parameters and setting the new current parameter to 0.\n   */\n  public finalizeParam(): void {\n    this._terminal.params.push(this._terminal.currentParam);\n    this._terminal.currentParam = 0;\n  }\n\n  /**\n   * Tell the parser to skip the next character.\n   */\n  public skipNextChar(): void {\n    this._position++;\n  }\n\n  /**\n   * Tell the parser to repeat parsing the current character (for example if it\n   * needs parsing using a different state.\n   */\n  // public repeatChar(): void {\n  //   this._position--;\n  // }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IMouseZoneManager } from './input/Types';\nimport { ILinkHoverEvent, ILinkMatcher, LinkMatcherHandler, LinkMatcherValidationCallback, LineData, LinkHoverEventTypes, ILinkMatcherOptions, ITerminal, IBufferAccessor, ILinkifier, IElementAccessor } from './Types';\nimport { MouseZone } from './input/MouseZoneManager';\nimport { EventEmitter } from './EventEmitter';\n\nconst protocolClause = '(https?:\\\\/\\\\/)';\nconst domainCharacterSet = '[\\\\da-z\\\\.-]+';\nconst negatedDomainCharacterSet = '[^\\\\da-z\\\\.-]+';\nconst domainBodyClause = '(' + domainCharacterSet + ')';\nconst tldClause = '([a-z\\\\.]{2,6})';\nconst ipClause = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})';\nconst localHostClause = '(localhost)';\nconst portClause = '(:\\\\d{1,5})';\nconst hostClause = '((' + domainBodyClause + '\\\\.' + tldClause + ')|' + ipClause + '|' + localHostClause + ')' + portClause + '?';\nconst pathClause = '(\\\\/[\\\\/\\\\w\\\\.\\\\-%~]*)*';\nconst queryStringHashFragmentCharacterSet = '[0-9\\\\w\\\\[\\\\]\\\\(\\\\)\\\\/\\\\?\\\\!#@$%&\\'*+,:;~\\\\=\\\\.\\\\-]*';\nconst queryStringClause = '(\\\\?' + queryStringHashFragmentCharacterSet + ')?';\nconst hashFragmentClause = '(#' + queryStringHashFragmentCharacterSet + ')?';\nconst negatedPathCharacterSet = '[^\\\\/\\\\w\\\\.\\\\-%]+';\nconst bodyClause = hostClause + pathClause + queryStringClause + hashFragmentClause;\nconst start = '(?:^|' + negatedDomainCharacterSet + ')(';\nconst end = ')($|' + negatedPathCharacterSet + ')';\nconst strictUrlRegex = new RegExp(start + protocolClause + bodyClause + end);\n\n/**\n * The ID of the built in http(s) link matcher.\n */\nconst HYPERTEXT_LINK_MATCHER_ID = 0;\n\n/**\n * The Linkifier applies links to rows shortly after they have been refreshed.\n */\nexport class Linkifier extends EventEmitter implements ILinkifier {\n  /**\n   * The time to wait after a row is changed before it is linkified. This prevents\n   * the costly operation of searching every row multiple times, potentially a\n   * huge amount of times.\n   */\n  protected static TIME_BEFORE_LINKIFY = 200;\n\n  protected _linkMatchers: ILinkMatcher[] = [];\n\n  private _mouseZoneManager: IMouseZoneManager;\n  private _rowsTimeoutId: number;\n  private _nextLinkMatcherId = HYPERTEXT_LINK_MATCHER_ID;\n  private _rowsToLinkify: {start: number, end: number};\n\n  constructor(\n    protected _terminal: IBufferAccessor & IElementAccessor\n  ) {\n    super();\n    this._rowsToLinkify = {\n      start: null,\n      end: null\n    };\n    this.registerLinkMatcher(strictUrlRegex, null, { matchIndex: 1 });\n  }\n\n  /**\n   * Attaches the linkifier to the DOM, enabling linkification.\n   * @param mouseZoneManager The mouse zone manager to register link zones with.\n   */\n  public attachToDom(mouseZoneManager: IMouseZoneManager): void {\n    this._mouseZoneManager = mouseZoneManager;\n  }\n\n  /**\n   * Queue linkification on a set of rows.\n   * @param start The row to linkify from (inclusive).\n   * @param end The row to linkify to (inclusive).\n   */\n  public linkifyRows(start: number, end: number): void {\n    // Don't attempt linkify if not yet attached to DOM\n    if (!this._mouseZoneManager) {\n      return;\n    }\n\n    // Increase range to linkify\n    if (this._rowsToLinkify.start === null) {\n      this._rowsToLinkify.start = start;\n      this._rowsToLinkify.end = end;\n    } else {\n      this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, start);\n      this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, end);\n    }\n\n    // Clear out any existing links on this row range\n    this._mouseZoneManager.clearAll(start, end);\n\n    // Restart timer\n    if (this._rowsTimeoutId) {\n      clearTimeout(this._rowsTimeoutId);\n    }\n    this._rowsTimeoutId = <number><any>setTimeout(() => this._linkifyRows(), Linkifier.TIME_BEFORE_LINKIFY);\n  }\n\n  /**\n   * Linkifies the rows requested.\n   */\n  private _linkifyRows(): void {\n    this._rowsTimeoutId = null;\n    for (let i = this._rowsToLinkify.start; i <= this._rowsToLinkify.end; i++) {\n      this._linkifyRow(i);\n    }\n    this._rowsToLinkify.start = null;\n    this._rowsToLinkify.end = null;\n  }\n\n  /**\n   * Attaches a handler for hypertext links, overriding default <a> behavior for\n   * tandard http(s) links.\n   * @param handler The handler to use, this can be cleared with null.\n   */\n  public setHypertextLinkHandler(handler: LinkMatcherHandler): void {\n    this._linkMatchers[HYPERTEXT_LINK_MATCHER_ID].handler = handler;\n  }\n\n  /**\n   * Attaches a validation callback for hypertext links.\n   * @param callback The callback to use, this can be cleared with null.\n   */\n  public setHypertextValidationCallback(callback: LinkMatcherValidationCallback): void {\n    this._linkMatchers[HYPERTEXT_LINK_MATCHER_ID].validationCallback = callback;\n  }\n\n  /**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param regex The regular expression to search for. Specifically, this\n   * searches the textContent of the rows. You will want to use \\s to match a\n   * space ' ' character for example.\n   * @param handler The callback when the link is called.\n   * @param options Options for the link matcher.\n   * @return The ID of the new matcher, this can be used to deregister.\n   */\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options: ILinkMatcherOptions = {}): number {\n    if (this._nextLinkMatcherId !== HYPERTEXT_LINK_MATCHER_ID && !handler) {\n      throw new Error('handler must be defined');\n    }\n    const matcher: ILinkMatcher = {\n      id: this._nextLinkMatcherId++,\n      regex,\n      handler,\n      matchIndex: options.matchIndex,\n      validationCallback: options.validationCallback,\n      hoverTooltipCallback: options.tooltipCallback,\n      hoverLeaveCallback: options.leaveCallback,\n      willLinkActivate: options.willLinkActivate,\n      priority: options.priority || 0\n    };\n    this._addLinkMatcherToList(matcher);\n    return matcher.id;\n  }\n\n  /**\n   * Inserts a link matcher to the list in the correct position based on the\n   * priority of each link matcher. New link matchers of equal priority are\n   * considered after older link matchers.\n   * @param matcher The link matcher to be added.\n   */\n  private _addLinkMatcherToList(matcher: ILinkMatcher): void {\n    if (this._linkMatchers.length === 0) {\n      this._linkMatchers.push(matcher);\n      return;\n    }\n\n    for (let i = this._linkMatchers.length - 1; i >= 0; i--) {\n      if (matcher.priority <= this._linkMatchers[i].priority) {\n        this._linkMatchers.splice(i + 1, 0, matcher);\n        return;\n      }\n    }\n\n    this._linkMatchers.splice(0, 0, matcher);\n  }\n\n  /**\n   * Deregisters a link matcher if it has been registered.\n   * @param matcherId The link matcher's ID (returned after register)\n   * @return Whether a link matcher was found and deregistered.\n   */\n  public deregisterLinkMatcher(matcherId: number): boolean {\n    // ID 0 is the hypertext link matcher which cannot be deregistered\n    for (let i = 1; i < this._linkMatchers.length; i++) {\n      if (this._linkMatchers[i].id === matcherId) {\n        this._linkMatchers.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Linkifies a row.\n   * @param rowIndex The index of the row to linkify.\n   */\n  private _linkifyRow(rowIndex: number): void {\n    const absoluteRowIndex = this._terminal.buffer.ydisp + rowIndex;\n    if (absoluteRowIndex >= this._terminal.buffer.lines.length) {\n      return;\n    }\n    const text = this._terminal.buffer.translateBufferLineToString(absoluteRowIndex, false);\n    for (let i = 0; i < this._linkMatchers.length; i++) {\n      this._doLinkifyRow(rowIndex, text, this._linkMatchers[i]);\n    }\n  }\n\n  /**\n   * Linkifies a row given a specific handler.\n   * @param rowIndex The row index to linkify.\n   * @param text The text of the row (excludes text in the row that's already\n   * linkified).\n   * @param matcher The link matcher for this line.\n   * @param offset The how much of the row has already been linkified.\n   * @return The link element(s) that were added.\n   */\n  private _doLinkifyRow(rowIndex: number, text: string, matcher: ILinkMatcher, offset: number = 0): void {\n    // Iterate over nodes as we want to consider text nodes\n    let result = [];\n    const isHttpLinkMatcher = matcher.id === HYPERTEXT_LINK_MATCHER_ID;\n\n    // Find the first match\n    let match = text.match(matcher.regex);\n    if (!match || match.length === 0) {\n      return;\n    }\n    let uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n\n    // Get index, match.index is for the outer match which includes negated chars\n    const index = text.indexOf(uri);\n\n    // Ensure the link is valid before registering\n    if (matcher.validationCallback) {\n      matcher.validationCallback(uri, isValid => {\n        // Discard link if the line has already changed\n        if (this._rowsTimeoutId) {\n          return;\n        }\n        if (isValid) {\n          this._addLink(offset + index, rowIndex, uri, matcher);\n        }\n      });\n    } else {\n      this._addLink(offset + index, rowIndex, uri, matcher);\n    }\n\n    // Recursively check for links in the rest of the text\n    const remainingStartIndex = index + uri.length;\n    const remainingText = text.substr(remainingStartIndex);\n    if (remainingText.length > 0) {\n      this._doLinkifyRow(rowIndex, remainingText, matcher, offset + remainingStartIndex);\n    }\n  }\n\n  /**\n   * Registers a link to the mouse zone manager.\n   * @param x The column the link starts.\n   * @param y The row the link is on.\n   * @param uri The URI of the link.\n   * @param matcher The link matcher for the link.\n   */\n  private _addLink(x: number, y: number, uri: string, matcher: ILinkMatcher): void {\n    this._mouseZoneManager.add(new MouseZone(\n      x + 1,\n      x + 1 + uri.length,\n      y + 1,\n      e => {\n        if (matcher.handler) {\n          return matcher.handler(e, uri);\n        }\n        window.open(uri, '_blank');\n      },\n      e => {\n        this.emit(LinkHoverEventTypes.HOVER, <ILinkHoverEvent>{ x, y, length: uri.length});\n        this._terminal.element.style.cursor = 'pointer';\n      },\n      e => {\n        this.emit(LinkHoverEventTypes.TOOLTIP, <ILinkHoverEvent>{ x, y, length: uri.length});\n        if (matcher.hoverTooltipCallback) {\n          matcher.hoverTooltipCallback(e, uri);\n        }\n      },\n      () => {\n        this.emit(LinkHoverEventTypes.LEAVE, <ILinkHoverEvent>{ x, y, length: uri.length});\n        this._terminal.element.style.cursor = '';\n        if (matcher.hoverLeaveCallback) {\n          matcher.hoverLeaveCallback();\n        }\n      },\n      e => {\n        if (matcher.willLinkActivate) {\n          return matcher.willLinkActivate(e, uri);\n        }\n        return true;\n      }\n    ));\n  }\n}\n","/**\r\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\r\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\r\n * @license MIT\r\n */\r\n\r\nimport { CharData, IInputHandler, IInputHandlingTerminal, ITerminal } from './Types';\r\nimport { C0 } from './EscapeSequences';\r\nimport { DEFAULT_CHARSET } from './Charsets';\r\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX } from './Buffer';\r\nimport { FLAGS } from './renderer/Types';\r\nimport { wcwidth } from './CharWidth';\r\n\r\n/**\r\n * The terminal's standard implementation of IInputHandler, this handles all\r\n * input from the Parser.\r\n *\r\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\r\n * each function's header comment.\r\n */\r\nexport class InputHandler implements IInputHandler {\r\n  constructor(private _terminal: IInputHandlingTerminal) { }\r\n\r\n  public addChar(char: string, code: number): void {\r\n    if (char >= ' ') {\r\n      // calculate print space\r\n      // expensive call, therefore we save width in line buffer\r\n      const chWidth = wcwidth(code);\r\n\r\n      if (this._terminal.charset && this._terminal.charset[char]) {\r\n        char = this._terminal.charset[char];\r\n      }\r\n\r\n      if (this._terminal.options.screenReaderMode) {\r\n        this._terminal.emit('a11y.char', char);\r\n      }\r\n\r\n      let row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n\r\n      // insert combining char in last cell\r\n      // FIXME: needs handling after cursor jumps\r\n      if (!chWidth && this._terminal.buffer.x) {\r\n        // dont overflow left\r\n        if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1]) {\r\n          if (!this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][CHAR_DATA_WIDTH_INDEX]) {\r\n            // found empty cell after fullwidth, need to go 2 cells back\r\n            if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2]) {\r\n              this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2][CHAR_DATA_CHAR_INDEX] += char;\r\n              this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2][3] = char.charCodeAt(0);\r\n            }\r\n          } else {\r\n            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][CHAR_DATA_CHAR_INDEX] += char;\r\n            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][3] = char.charCodeAt(0);\r\n          }\r\n          this._terminal.updateRange(this._terminal.buffer.y);\r\n        }\r\n        return;\r\n      }\r\n\r\n      // goto next line if ch would overflow\r\n      // TODO: needs a global min terminal width of 2\r\n      if (this._terminal.buffer.x + chWidth - 1 >= this._terminal.cols) {\r\n        // autowrap - DECAWM\r\n        if (this._terminal.wraparoundMode) {\r\n          this._terminal.buffer.x = 0;\r\n          this._terminal.buffer.y++;\r\n          if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\r\n            this._terminal.buffer.y--;\r\n            this._terminal.scroll(true);\r\n          } else {\r\n            // The line already exists (eg. the initial viewport), mark it as a\r\n            // wrapped line\r\n            (<any>this._terminal.buffer.lines.get(this._terminal.buffer.y)).isWrapped = true;\r\n          }\r\n        } else {\r\n          if (chWidth === 2) { // FIXME: check for xterm behavior\r\n            return;\r\n          }\r\n        }\r\n      }\r\n      row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n\r\n      // insert mode: move characters to right\r\n      if (this._terminal.insertMode) {\r\n        // do this twice for a fullwidth char\r\n        for (let moves = 0; moves < chWidth; ++moves) {\r\n          // remove last cell, if it's width is 0\r\n          // we have to adjust the second last cell as well\r\n          const removed = this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).pop();\r\n          if (removed[CHAR_DATA_WIDTH_INDEX] === 0\r\n              && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2]\r\n              && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2][CHAR_DATA_WIDTH_INDEX] === 2) {\r\n            this._terminal.buffer.lines.get(row)[this._terminal.cols - 2] = [this._terminal.curAttr, ' ', 1, ' '.charCodeAt(0)];\r\n          }\r\n\r\n          // insert empty cell at cursor\r\n          this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 0, [this._terminal.curAttr, ' ', 1, ' '.charCodeAt(0)]);\r\n        }\r\n      }\r\n\r\n      this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, char, chWidth, char.charCodeAt(0)];\r\n      this._terminal.buffer.x++;\r\n      this._terminal.updateRange(this._terminal.buffer.y);\r\n\r\n      // fullwidth char - set next cell width to zero and advance cursor\r\n      if (chWidth === 2) {\r\n        this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, '', 0, undefined];\r\n        this._terminal.buffer.x++;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * BEL\r\n   * Bell (Ctrl-G).\r\n   */\r\n  public bell(): void {\r\n    this._terminal.bell();\r\n  }\r\n\r\n  /**\r\n   * LF\r\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\r\n   */\r\n  public lineFeed(): void {\r\n    if (this._terminal.convertEol) {\r\n      this._terminal.buffer.x = 0;\r\n    }\r\n    this._terminal.buffer.y++;\r\n    if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\r\n      this._terminal.buffer.y--;\r\n      this._terminal.scroll();\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n    /**\r\n     * This event is emitted whenever the terminal outputs a LF or NL.\r\n     *\r\n     * @event linefeed\r\n     */\r\n    this._terminal.emit('linefeed');\r\n  }\r\n\r\n  /**\r\n   * CR\r\n   * Carriage Return (Ctrl-M).\r\n   */\r\n  public carriageReturn(): void {\r\n    this._terminal.buffer.x = 0;\r\n  }\r\n\r\n  /**\r\n   * BS\r\n   * Backspace (Ctrl-H).\r\n   */\r\n  public backspace(): void {\r\n    if (this._terminal.buffer.x > 0) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TAB\r\n   * Horizontal Tab (HT) (Ctrl-I).\r\n   */\r\n  public tab(): void {\r\n    const originalX = this._terminal.buffer.x;\r\n    this._terminal.buffer.x = this._terminal.buffer.nextStop();\r\n    if (this._terminal.options.screenReaderMode) {\r\n      this._terminal.emit('a11y.tab', this._terminal.buffer.x - originalX);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * SO\r\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\r\n   * G1 character set.\r\n   */\r\n  public shiftOut(): void {\r\n    this._terminal.setgLevel(1);\r\n  }\r\n\r\n  /**\r\n   * SI\r\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\r\n   * character set (the default).\r\n   */\r\n  public shiftIn(): void {\r\n    this._terminal.setgLevel(0);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps @\r\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\r\n   */\r\n  public insertChars(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) param = 1;\r\n\r\n    const row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n    let j = this._terminal.buffer.x;\r\n    const ch: CharData = [this._terminal.eraseAttr(), ' ', 1, 32]; // xterm\r\n\r\n    while (param-- && j < this._terminal.cols) {\r\n      this._terminal.buffer.lines.get(row).splice(j++, 0, ch);\r\n      this._terminal.buffer.lines.get(row).pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps A\r\n   * Cursor Up Ps Times (default = 1) (CUU).\r\n   */\r\n  public cursorUp(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y -= param;\r\n    if (this._terminal.buffer.y < 0) {\r\n      this._terminal.buffer.y = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps B\r\n   * Cursor Down Ps Times (default = 1) (CUD).\r\n   */\r\n  public cursorDown(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y += param;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps C\r\n   * Cursor Forward Ps Times (default = 1) (CUF).\r\n   */\r\n  public cursorForward(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x += param;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps D\r\n   * Cursor Backward Ps Times (default = 1) (CUB).\r\n   */\r\n  public cursorBackward(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n    this._terminal.buffer.x -= param;\r\n    if (this._terminal.buffer.x < 0) {\r\n      this._terminal.buffer.x = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps E\r\n   * Cursor Next Line Ps Times (default = 1) (CNL).\r\n   * same as CSI Ps B ?\r\n   */\r\n  public cursorNextLine(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y += param;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n    this._terminal.buffer.x = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI Ps F\r\n   * Cursor Preceding Line Ps Times (default = 1) (CNL).\r\n   * reuse CSI Ps A ?\r\n   */\r\n  public cursorPrecedingLine(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y -= param;\r\n    if (this._terminal.buffer.y < 0) {\r\n      this._terminal.buffer.y = 0;\r\n    }\r\n    this._terminal.buffer.x = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI Ps G\r\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\r\n   */\r\n  public cursorCharAbsolute(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x = param - 1;\r\n  }\r\n\r\n  /**\r\n   * CSI Ps ; Ps H\r\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\r\n   */\r\n  public cursorPosition(params: number[]): void {\r\n    let col: number;\r\n    let row: number = params[0] - 1;\r\n\r\n    if (params.length >= 2) {\r\n      col = params[1] - 1;\r\n    } else {\r\n      col = 0;\r\n    }\r\n\r\n    if (row < 0) {\r\n      row = 0;\r\n    } else if (row >= this._terminal.rows) {\r\n      row = this._terminal.rows - 1;\r\n    }\r\n\r\n    if (col < 0) {\r\n      col = 0;\r\n    } else if (col >= this._terminal.cols) {\r\n      col = this._terminal.cols - 1;\r\n    }\r\n\r\n    this._terminal.buffer.x = col;\r\n    this._terminal.buffer.y = row;\r\n  }\r\n\r\n  /**\r\n   * CSI Ps I\r\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\r\n   */\r\n  public cursorForwardTab(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    while (param--) {\r\n      this._terminal.buffer.x = this._terminal.buffer.nextStop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps J  Erase in Display (ED).\r\n   *     Ps = 0  -> Erase Below (default).\r\n   *     Ps = 1  -> Erase Above.\r\n   *     Ps = 2  -> Erase All.\r\n   *     Ps = 3  -> Erase Saved Lines (xterm).\r\n   * CSI ? Ps J\r\n   *   Erase in Display (DECSED).\r\n   *     Ps = 0  -> Selective Erase Below (default).\r\n   *     Ps = 1  -> Selective Erase Above.\r\n   *     Ps = 2  -> Selective Erase All.\r\n   */\r\n  public eraseInDisplay(params: number[]): void {\r\n    let j;\r\n    switch (params[0]) {\r\n      case 0:\r\n        this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\r\n        j = this._terminal.buffer.y + 1;\r\n        for (; j < this._terminal.rows; j++) {\r\n          this._terminal.eraseLine(j);\r\n        }\r\n        break;\r\n      case 1:\r\n        this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\r\n        j = this._terminal.buffer.y;\r\n        while (j--) {\r\n          this._terminal.eraseLine(j);\r\n        }\r\n        break;\r\n      case 2:\r\n        j = this._terminal.rows;\r\n        while (j--) this._terminal.eraseLine(j);\r\n        break;\r\n      case 3:\r\n        // Clear scrollback (everything not in viewport)\r\n        const scrollBackSize = this._terminal.buffer.lines.length - this._terminal.rows;\r\n        if (scrollBackSize > 0) {\r\n          this._terminal.buffer.lines.trimStart(scrollBackSize);\r\n          this._terminal.buffer.ybase = Math.max(this._terminal.buffer.ybase - scrollBackSize, 0);\r\n          this._terminal.buffer.ydisp = Math.max(this._terminal.buffer.ydisp - scrollBackSize, 0);\r\n          // Force a scroll event to refresh viewport\r\n          this._terminal.emit('scroll', 0);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps K  Erase in Line (EL).\r\n   *     Ps = 0  -> Erase to Right (default).\r\n   *     Ps = 1  -> Erase to Left.\r\n   *     Ps = 2  -> Erase All.\r\n   * CSI ? Ps K\r\n   *   Erase in Line (DECSEL).\r\n   *     Ps = 0  -> Selective Erase to Right (default).\r\n   *     Ps = 1  -> Selective Erase to Left.\r\n   *     Ps = 2  -> Selective Erase All.\r\n   */\r\n  public eraseInLine(params: number[]): void {\r\n    switch (params[0]) {\r\n      case 0:\r\n        this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\r\n        break;\r\n      case 1:\r\n        this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\r\n        break;\r\n      case 2:\r\n        this._terminal.eraseLine(this._terminal.buffer.y);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps L\r\n   * Insert Ps Line(s) (default = 1) (IL).\r\n   */\r\n  public insertLines(params: number[]): void {\r\n    let param: number = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    let row: number = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n\r\n    let scrollBottomRowsOffset = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\r\n    let scrollBottomAbsolute = this._terminal.rows - 1 + this._terminal.buffer.ybase - scrollBottomRowsOffset + 1;\r\n    while (param--) {\r\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\r\n      // blankLine(true) - xterm/linux behavior\r\n      this._terminal.buffer.lines.splice(scrollBottomAbsolute - 1, 1);\r\n      this._terminal.buffer.lines.splice(row, 0, this._terminal.blankLine(true));\r\n    }\r\n\r\n    // this.maxRange();\r\n    this._terminal.updateRange(this._terminal.buffer.y);\r\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps M\r\n   * Delete Ps Line(s) (default = 1) (DL).\r\n   */\r\n  public deleteLines(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    const row: number = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n\r\n    let j: number;\r\n    j = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\r\n    j = this._terminal.rows - 1 + this._terminal.buffer.ybase - j;\r\n    while (param--) {\r\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\r\n      // blankLine(true) - xterm/linux behavior\r\n      this._terminal.buffer.lines.splice(row, 1);\r\n      this._terminal.buffer.lines.splice(j, 0, this._terminal.blankLine(true));\r\n    }\r\n\r\n    // this.maxRange();\r\n    this._terminal.updateRange(this._terminal.buffer.y);\r\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps P\r\n   * Delete Ps Character(s) (default = 1) (DCH).\r\n   */\r\n  public deleteChars(params: number[]): void {\r\n    let param: number = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n\r\n    const row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n    const ch: CharData = [this._terminal.eraseAttr(), ' ', 1, 32]; // xterm\r\n\r\n    while (param--) {\r\n      this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 1);\r\n      this._terminal.buffer.lines.get(row).push(ch);\r\n    }\r\n    this._terminal.updateRange(this._terminal.buffer.y);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\r\n   */\r\n  public scrollUp(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    while (param--) {\r\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 1);\r\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 0, this._terminal.blankLine());\r\n    }\r\n    // this.maxRange();\r\n    this._terminal.updateRange(this._terminal.buffer.scrollTop);\r\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\r\n   */\r\n  public scrollDown(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    while (param--) {\r\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 1);\r\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 0, this._terminal.blankLine());\r\n    }\r\n    // this.maxRange();\r\n    this._terminal.updateRange(this._terminal.buffer.scrollTop);\r\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps X\r\n   * Erase Ps Character(s) (default = 1) (ECH).\r\n   */\r\n  public eraseChars(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n\r\n    const row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n    let j = this._terminal.buffer.x;\r\n    const ch: CharData = [this._terminal.eraseAttr(), ' ', 1, 32]; // xterm\r\n\r\n    while (param-- && j < this._terminal.cols) {\r\n      this._terminal.buffer.lines.get(row)[j++] = ch;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\r\n   */\r\n  public cursorBackwardTab(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    while (param--) {\r\n      this._terminal.buffer.x = this._terminal.buffer.prevStop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm `  Character Position Absolute\r\n   *   [column] (default = [row,1]) (HPA).\r\n   */\r\n  public charPosAbsolute(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x = param - 1;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm a  Character Position Relative\r\n   *   [columns] (default = [row,col+1]) (HPR)\r\n   * reuse CSI Ps C ?\r\n   */\r\n  public HPositionRelative(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x += param;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\r\n   */\r\n  public repeatPrecedingCharacter(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    const line = this._terminal.buffer.lines.get(this._terminal.buffer.ybase + this._terminal.buffer.y);\r\n    const ch = line[this._terminal.buffer.x - 1] || [this._terminal.defAttr, ' ', 1, 32];\r\n\r\n    while (param--) {\r\n      line[this._terminal.buffer.x++] = ch;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps c  Send Device Attributes (Primary DA).\r\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\r\n   *     response depends on the decTerminalID resource setting.\r\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\r\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\r\n   *     -> CSI ? 6 c  (``VT102'')\r\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\r\n   *   The VT100-style response parameters do not mean anything by\r\n   *   themselves.  VT220 parameters do, telling the host what fea-\r\n   *   tures the terminal supports:\r\n   *     Ps = 1  -> 132-columns.\r\n   *     Ps = 2  -> Printer.\r\n   *     Ps = 6  -> Selective erase.\r\n   *     Ps = 8  -> User-defined keys.\r\n   *     Ps = 9  -> National replacement character sets.\r\n   *     Ps = 1 5  -> Technical characters.\r\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\r\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\r\n   * CSI > Ps c\r\n   *   Send Device Attributes (Secondary DA).\r\n   *     Ps = 0  or omitted -> request the terminal's identification\r\n   *     code.  The response depends on the decTerminalID resource set-\r\n   *     ting.  It should apply only to VT220 and up, but xterm extends\r\n   *     this to VT100.\r\n   *     -> CSI  > Pp ; Pv ; Pc c\r\n   *   where Pp denotes the terminal type\r\n   *     Pp = 0  -> ``VT100''.\r\n   *     Pp = 1  -> ``VT220''.\r\n   *   and Pv is the firmware version (for xterm, this was originally\r\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\r\n   *   nal, Pc indicates the ROM cartridge registration number and is\r\n   *   always zero.\r\n   * More information:\r\n   *   xterm/charproc.c - line 2012, for more information.\r\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\r\n   */\r\n  public sendDeviceAttributes(params: number[]): void {\r\n    if (params[0] > 0) {\r\n      return;\r\n    }\r\n\r\n    if (!this._terminal.prefix) {\r\n      if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\r\n        this._terminal.send(C0.ESC + '[?1;2c');\r\n      } else if (this._terminal.is('linux')) {\r\n        this._terminal.send(C0.ESC + '[?6c');\r\n      }\r\n    } else if (this._terminal.prefix === '>') {\r\n      // xterm and urxvt\r\n      // seem to spit this\r\n      // out around ~370 times (?).\r\n      if (this._terminal.is('xterm')) {\r\n        this._terminal.send(C0.ESC + '[>0;276;0c');\r\n      } else if (this._terminal.is('rxvt-unicode')) {\r\n        this._terminal.send(C0.ESC + '[>85;95;0c');\r\n      } else if (this._terminal.is('linux')) {\r\n        // not supported by linux console.\r\n        // linux console echoes parameters.\r\n        this._terminal.send(params[0] + 'c');\r\n      } else if (this._terminal.is('screen')) {\r\n        this._terminal.send(C0.ESC + '[>83;40003;0c');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm d  Vertical Position Absolute (VPA)\r\n   *   [row] (default = [1,column])\r\n   */\r\n  public linePosAbsolute(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y = param - 1;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm e  Vertical Position Relative (VPR)\r\n   *   [rows] (default = [row+1,column])\r\n   * reuse CSI Ps B ?\r\n   */\r\n  public VPositionRelative(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y += param;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps ; Ps f\r\n   *   Horizontal and Vertical Position [row;column] (default =\r\n   *   [1,1]) (HVP).\r\n   */\r\n  public HVPosition(params: number[]): void {\r\n    if (params[0] < 1) params[0] = 1;\r\n    if (params[1] < 1) params[1] = 1;\r\n\r\n    this._terminal.buffer.y = params[0] - 1;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n\r\n    this._terminal.buffer.x = params[1] - 1;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps g  Tab Clear (TBC).\r\n   *     Ps = 0  -> Clear Current Column (default).\r\n   *     Ps = 3  -> Clear All.\r\n   * Potentially:\r\n   *   Ps = 2  -> Clear Stops on Line.\r\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\r\n   */\r\n  public tabClear(params: number[]): void {\r\n    let param = params[0];\r\n    if (param <= 0) {\r\n      delete this._terminal.buffer.tabs[this._terminal.buffer.x];\r\n    } else if (param === 3) {\r\n      this._terminal.buffer.tabs = {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm h  Set Mode (SM).\r\n   *     Ps = 2  -> Keyboard Action Mode (AM).\r\n   *     Ps = 4  -> Insert Mode (IRM).\r\n   *     Ps = 1 2  -> Send/receive (SRM).\r\n   *     Ps = 2 0  -> Automatic Newline (LNM).\r\n   * CSI ? Pm h\r\n   *   DEC Private Mode Set (DECSET).\r\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\r\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\r\n   *     (DECANM), and set VT100 mode.\r\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\r\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\r\n   *     Ps = 5  -> Reverse Video (DECSCNM).\r\n   *     Ps = 6  -> Origin Mode (DECOM).\r\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\r\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\r\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\r\n   *     tion Mouse Tracking.\r\n   *     Ps = 1 0  -> Show toolbar (rxvt).\r\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\r\n   *     Ps = 1 8  -> Print form feed (DECPFF).\r\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\r\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\r\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\r\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\r\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\r\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\r\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\r\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\r\n   *     RCM).\r\n   *     Ps = 4 4  -> Turn On Margin Bell.\r\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\r\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\r\n   *     compile-time option.\r\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\r\n   *     abled by the titeInhibit resource).\r\n   *     Ps = 6 6  -> Application keypad (DECNKM).\r\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\r\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\r\n   *     release.  See the section Mouse Tracking.\r\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\r\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\r\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\r\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\r\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\r\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\r\n   *     (enables the eightBitInput resource).\r\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\r\n   *     Lock keys.  (This enables the numLock resource).\r\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\r\n   *     enables the metaSendsEscape resource).\r\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\r\n   *     key.\r\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\r\n   *     enables the altSendsEscape resource).\r\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\r\n   *     (This enables the keepSelection resource).\r\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\r\n   *     the selectToClipboard resource).\r\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\r\n   *     Control-G is received.  (This enables the bellIsUrgent\r\n   *     resource).\r\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\r\n   *     is received.  (enables the popOnBell resource).\r\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\r\n   *     disabled by the titeInhibit resource).\r\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\r\n   *     abled by the titeInhibit resource).\r\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\r\n   *     Screen Buffer, clearing it first.  (This may be disabled by\r\n   *     the titeInhibit resource).  This combines the effects of the 1\r\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\r\n   *     applications rather than the 4 7  mode.\r\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\r\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\r\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\r\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\r\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\r\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\r\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\r\n   * Modes:\r\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\r\n   */\r\n  public setMode(params: number[]): void {\r\n    if (params.length > 1) {\r\n      for (let i = 0; i < params.length; i++) {\r\n        this.setMode([params[i]]);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!this._terminal.prefix) {\r\n      switch (params[0]) {\r\n        case 4:\r\n          this._terminal.insertMode = true;\r\n          break;\r\n        case 20:\r\n          // this._t.convertEol = true;\r\n          break;\r\n      }\r\n    } else if (this._terminal.prefix === '?') {\r\n      switch (params[0]) {\r\n        case 1:\r\n          this._terminal.applicationCursor = true;\r\n          break;\r\n        case 2:\r\n          this._terminal.setgCharset(0, DEFAULT_CHARSET);\r\n          this._terminal.setgCharset(1, DEFAULT_CHARSET);\r\n          this._terminal.setgCharset(2, DEFAULT_CHARSET);\r\n          this._terminal.setgCharset(3, DEFAULT_CHARSET);\r\n          // set VT100 mode here\r\n          break;\r\n        case 3: // 132 col mode\r\n          this._terminal.savedCols = this._terminal.cols;\r\n          this._terminal.resize(132, this._terminal.rows);\r\n          break;\r\n        case 6:\r\n          this._terminal.originMode = true;\r\n          break;\r\n        case 7:\r\n          this._terminal.wraparoundMode = true;\r\n          break;\r\n        case 12:\r\n          // this.cursorBlink = true;\r\n          break;\r\n        case 66:\r\n          this._terminal.log('Serial port requested application keypad.');\r\n          this._terminal.applicationKeypad = true;\r\n          this._terminal.viewport.syncScrollArea();\r\n          break;\r\n        case 9: // X10 Mouse\r\n          // no release, no motion, no wheel, no modifiers.\r\n        case 1000: // vt200 mouse\r\n          // no motion.\r\n          // no modifiers, except control on the wheel.\r\n        case 1002: // button event mouse\r\n        case 1003: // any event mouse\r\n          // any event - sends motion events,\r\n          // even if there is no button held down.\r\n\r\n          // TODO: Why are params[0] compares nested within a switch for params[0]?\r\n\r\n          this._terminal.x10Mouse = params[0] === 9;\r\n          this._terminal.vt200Mouse = params[0] === 1000;\r\n          this._terminal.normalMouse = params[0] > 1000;\r\n          this._terminal.mouseEvents = true;\r\n          this._terminal.element.classList.add('enable-mouse-events');\r\n          this._terminal.selectionManager.disable();\r\n          this._terminal.log('Binding to mouse events.');\r\n          break;\r\n        case 1004: // send focusin/focusout events\r\n          // focusin: ^[[I\r\n          // focusout: ^[[O\r\n          this._terminal.sendFocus = true;\r\n          break;\r\n        case 1005: // utf8 ext mode mouse\r\n          this._terminal.utfMouse = true;\r\n          // for wide terminals\r\n          // simply encodes large values as utf8 characters\r\n          break;\r\n        case 1006: // sgr ext mode mouse\r\n          this._terminal.sgrMouse = true;\r\n          // for wide terminals\r\n          // does not add 32 to fields\r\n          // press: ^[[<b;x;yM\r\n          // release: ^[[<b;x;ym\r\n          break;\r\n        case 1015: // urxvt ext mode mouse\r\n          this._terminal.urxvtMouse = true;\r\n          // for wide terminals\r\n          // numbers for fields\r\n          // press: ^[[b;x;yM\r\n          // motion: ^[[b;x;yT\r\n          break;\r\n        case 25: // show cursor\r\n          this._terminal.cursorHidden = false;\r\n          break;\r\n        case 1049: // alt screen buffer cursor\r\n          // TODO: Not sure if we need to save/restore after switching the buffer\r\n          // this.saveCursor(params);\r\n          // FALL-THROUGH\r\n        case 47: // alt screen buffer\r\n        case 1047: // alt screen buffer\r\n          this._terminal.buffers.activateAltBuffer();\r\n          this._terminal.viewport.syncScrollArea();\r\n          this._terminal.showCursor();\r\n          break;\r\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\r\n          this._terminal.bracketedPasteMode = true;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm l  Reset Mode (RM).\r\n   *     Ps = 2  -> Keyboard Action Mode (AM).\r\n   *     Ps = 4  -> Replace Mode (IRM).\r\n   *     Ps = 1 2  -> Send/receive (SRM).\r\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\r\n   * CSI ? Pm l\r\n   *   DEC Private Mode Reset (DECRST).\r\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\r\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\r\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\r\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\r\n   *     Ps = 5  -> Normal Video (DECSCNM).\r\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\r\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\r\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\r\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\r\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\r\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\r\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\r\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\r\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\r\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\r\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\r\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\r\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\r\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\r\n   *     NRCM).\r\n   *     Ps = 4 4  -> Turn Off Margin Bell.\r\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\r\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\r\n   *     compile-time option).\r\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\r\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\r\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\r\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\r\n   *     release.  See the section Mouse Tracking.\r\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\r\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\r\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\r\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\r\n   *     (rxvt).\r\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\r\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\r\n   *     the eightBitInput resource).\r\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\r\n   *     Lock keys.  (This disables the numLock resource).\r\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\r\n   *     (This disables the metaSendsEscape resource).\r\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\r\n   *     Delete key.\r\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\r\n   *     (This disables the altSendsEscape resource).\r\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\r\n   *     (This disables the keepSelection resource).\r\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\r\n   *     the selectToClipboard resource).\r\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\r\n   *     Control-G is received.  (This disables the bellIsUrgent\r\n   *     resource).\r\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\r\n   *     G is received.  (This disables the popOnBell resource).\r\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\r\n   *     first if in the Alternate Screen.  (This may be disabled by\r\n   *     the titeInhibit resource).\r\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\r\n   *     disabled by the titeInhibit resource).\r\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\r\n   *     as in DECRC.  (This may be disabled by the titeInhibit\r\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\r\n   *     4 8  modes.  Use this with terminfo-based applications rather\r\n   *     than the 4 7  mode.\r\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\r\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\r\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\r\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\r\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\r\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\r\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\r\n   */\r\n  public resetMode(params: number[]): void {\r\n    if (params.length > 1) {\r\n      for (let i = 0; i < params.length; i++) {\r\n        this.resetMode([params[i]]);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!this._terminal.prefix) {\r\n      switch (params[0]) {\r\n        case 4:\r\n          this._terminal.insertMode = false;\r\n          break;\r\n        case 20:\r\n          // this._t.convertEol = false;\r\n          break;\r\n      }\r\n    } else if (this._terminal.prefix === '?') {\r\n      switch (params[0]) {\r\n        case 1:\r\n          this._terminal.applicationCursor = false;\r\n          break;\r\n        case 3:\r\n          if (this._terminal.cols === 132 && this._terminal.savedCols) {\r\n            this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\r\n          }\r\n          delete this._terminal.savedCols;\r\n          break;\r\n        case 6:\r\n          this._terminal.originMode = false;\r\n          break;\r\n        case 7:\r\n          this._terminal.wraparoundMode = false;\r\n          break;\r\n        case 12:\r\n          // this.cursorBlink = false;\r\n          break;\r\n        case 66:\r\n          this._terminal.log('Switching back to normal keypad.');\r\n          this._terminal.applicationKeypad = false;\r\n          this._terminal.viewport.syncScrollArea();\r\n          break;\r\n        case 9: // X10 Mouse\r\n        case 1000: // vt200 mouse\r\n        case 1002: // button event mouse\r\n        case 1003: // any event mouse\r\n          this._terminal.x10Mouse = false;\r\n          this._terminal.vt200Mouse = false;\r\n          this._terminal.normalMouse = false;\r\n          this._terminal.mouseEvents = false;\r\n          this._terminal.element.classList.remove('enable-mouse-events');\r\n          this._terminal.selectionManager.enable();\r\n          break;\r\n        case 1004: // send focusin/focusout events\r\n          this._terminal.sendFocus = false;\r\n          break;\r\n        case 1005: // utf8 ext mode mouse\r\n          this._terminal.utfMouse = false;\r\n          break;\r\n        case 1006: // sgr ext mode mouse\r\n          this._terminal.sgrMouse = false;\r\n          break;\r\n        case 1015: // urxvt ext mode mouse\r\n          this._terminal.urxvtMouse = false;\r\n          break;\r\n        case 25: // hide cursor\r\n          this._terminal.cursorHidden = true;\r\n          break;\r\n        case 1049: // alt screen buffer cursor\r\n           // FALL-THROUGH\r\n        case 47: // normal screen buffer\r\n        case 1047: // normal screen buffer - clearing it first\r\n          // Ensure the selection manager has the correct buffer\r\n          this._terminal.buffers.activateNormalBuffer();\r\n          // TODO: Not sure if we need to save/restore after switching the buffer\r\n          // if (params[0] === 1049) {\r\n          //   this.restoreCursor(params);\r\n          // }\r\n          this._terminal.refresh(0, this._terminal.rows - 1);\r\n          this._terminal.viewport.syncScrollArea();\r\n          this._terminal.showCursor();\r\n          break;\r\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\r\n          this._terminal.bracketedPasteMode = false;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm m  Character Attributes (SGR).\r\n   *     Ps = 0  -> Normal (default).\r\n   *     Ps = 1  -> Bold.\r\n   *     Ps = 2  -> Faint, decreased intensity (ISO 6429).\r\n   *     Ps = 4  -> Underlined.\r\n   *     Ps = 5  -> Blink (appears as Bold).\r\n   *     Ps = 7  -> Inverse.\r\n   *     Ps = 8  -> Invisible, i.e., hidden (VT300).\r\n   *     Ps = 2 2  -> Normal (neither bold nor faint).\r\n   *     Ps = 2 4  -> Not underlined.\r\n   *     Ps = 2 5  -> Steady (not blinking).\r\n   *     Ps = 2 7  -> Positive (not inverse).\r\n   *     Ps = 2 8  -> Visible, i.e., not hidden (VT300).\r\n   *     Ps = 3 0  -> Set foreground color to Black.\r\n   *     Ps = 3 1  -> Set foreground color to Red.\r\n   *     Ps = 3 2  -> Set foreground color to Green.\r\n   *     Ps = 3 3  -> Set foreground color to Yellow.\r\n   *     Ps = 3 4  -> Set foreground color to Blue.\r\n   *     Ps = 3 5  -> Set foreground color to Magenta.\r\n   *     Ps = 3 6  -> Set foreground color to Cyan.\r\n   *     Ps = 3 7  -> Set foreground color to White.\r\n   *     Ps = 3 9  -> Set foreground color to default (original).\r\n   *     Ps = 4 0  -> Set background color to Black.\r\n   *     Ps = 4 1  -> Set background color to Red.\r\n   *     Ps = 4 2  -> Set background color to Green.\r\n   *     Ps = 4 3  -> Set background color to Yellow.\r\n   *     Ps = 4 4  -> Set background color to Blue.\r\n   *     Ps = 4 5  -> Set background color to Magenta.\r\n   *     Ps = 4 6  -> Set background color to Cyan.\r\n   *     Ps = 4 7  -> Set background color to White.\r\n   *     Ps = 4 9  -> Set background color to default (original).\r\n   *\r\n   *   If 16-color support is compiled, the following apply.  Assume\r\n   *   that xterm's resources are set so that the ISO color codes are\r\n   *   the first 8 of a set of 16.  Then the aixterm colors are the\r\n   *   bright versions of the ISO colors:\r\n   *     Ps = 9 0  -> Set foreground color to Black.\r\n   *     Ps = 9 1  -> Set foreground color to Red.\r\n   *     Ps = 9 2  -> Set foreground color to Green.\r\n   *     Ps = 9 3  -> Set foreground color to Yellow.\r\n   *     Ps = 9 4  -> Set foreground color to Blue.\r\n   *     Ps = 9 5  -> Set foreground color to Magenta.\r\n   *     Ps = 9 6  -> Set foreground color to Cyan.\r\n   *     Ps = 9 7  -> Set foreground color to White.\r\n   *     Ps = 1 0 0  -> Set background color to Black.\r\n   *     Ps = 1 0 1  -> Set background color to Red.\r\n   *     Ps = 1 0 2  -> Set background color to Green.\r\n   *     Ps = 1 0 3  -> Set background color to Yellow.\r\n   *     Ps = 1 0 4  -> Set background color to Blue.\r\n   *     Ps = 1 0 5  -> Set background color to Magenta.\r\n   *     Ps = 1 0 6  -> Set background color to Cyan.\r\n   *     Ps = 1 0 7  -> Set background color to White.\r\n   *\r\n   *   If xterm is compiled with the 16-color support disabled, it\r\n   *   supports the following, from rxvt:\r\n   *     Ps = 1 0 0  -> Set foreground and background color to\r\n   *     default.\r\n   *\r\n   *   If 88- or 256-color support is compiled, the following apply.\r\n   *     Ps = 3 8  ; 5  ; Ps -> Set foreground color to the second\r\n   *     Ps.\r\n   *     Ps = 4 8  ; 5  ; Ps -> Set background color to the second\r\n   *     Ps.\r\n   */\r\n  public charAttributes(params: number[]): void {\r\n    // Optimize a single SGR0.\r\n    if (params.length === 1 && params[0] === 0) {\r\n      this._terminal.curAttr = this._terminal.defAttr;\r\n      return;\r\n    }\r\n\r\n    const l = params.length;\r\n    let flags = this._terminal.curAttr >> 18;\r\n    let fg = (this._terminal.curAttr >> 9) & 0x1ff;\r\n    let bg = this._terminal.curAttr & 0x1ff;\r\n    let p;\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      p = params[i];\r\n      if (p >= 30 && p <= 37) {\r\n        // fg color 8\r\n        fg = p - 30;\r\n      } else if (p >= 40 && p <= 47) {\r\n        // bg color 8\r\n        bg = p - 40;\r\n      } else if (p >= 90 && p <= 97) {\r\n        // fg color 16\r\n        p += 8;\r\n        fg = p - 90;\r\n      } else if (p >= 100 && p <= 107) {\r\n        // bg color 16\r\n        p += 8;\r\n        bg = p - 100;\r\n      } else if (p === 0) {\r\n        // default\r\n        flags = this._terminal.defAttr >> 18;\r\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\r\n        bg = this._terminal.defAttr & 0x1ff;\r\n        // flags = 0;\r\n        // fg = 0x1ff;\r\n        // bg = 0x1ff;\r\n      } else if (p === 1) {\r\n        // bold text\r\n        flags |= FLAGS.BOLD;\r\n      } else if (p === 4) {\r\n        // underlined text\r\n        flags |= FLAGS.UNDERLINE;\r\n      } else if (p === 5) {\r\n        // blink\r\n        flags |= FLAGS.BLINK;\r\n      } else if (p === 7) {\r\n        // inverse and positive\r\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\r\n        flags |= FLAGS.INVERSE;\r\n      } else if (p === 8) {\r\n        // invisible\r\n        flags |= FLAGS.INVISIBLE;\r\n      } else if (p === 2) {\r\n        // dimmed text\r\n        flags |= FLAGS.DIM;\r\n      } else if (p === 22) {\r\n        // not bold nor faint\r\n        flags &= ~FLAGS.BOLD;\r\n        flags &= ~FLAGS.DIM;\r\n      } else if (p === 24) {\r\n        // not underlined\r\n        flags &= ~FLAGS.UNDERLINE;\r\n      } else if (p === 25) {\r\n        // not blink\r\n        flags &= ~FLAGS.BLINK;\r\n      } else if (p === 27) {\r\n        // not inverse\r\n        flags &= ~FLAGS.INVERSE;\r\n      } else if (p === 28) {\r\n        // not invisible\r\n        flags &= ~FLAGS.INVISIBLE;\r\n      } else if (p === 39) {\r\n        // reset fg\r\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\r\n      } else if (p === 49) {\r\n        // reset bg\r\n        bg = this._terminal.defAttr & 0x1ff;\r\n      } else if (p === 38) {\r\n        // fg color 256\r\n        if (params[i + 1] === 2) {\r\n          i += 2;\r\n          fg = this._terminal.matchColor(\r\n            params[i] & 0xff,\r\n            params[i + 1] & 0xff,\r\n            params[i + 2] & 0xff);\r\n          if (fg === -1) fg = 0x1ff;\r\n          i += 2;\r\n        } else if (params[i + 1] === 5) {\r\n          i += 2;\r\n          p = params[i] & 0xff;\r\n          fg = p;\r\n        }\r\n      } else if (p === 48) {\r\n        // bg color 256\r\n        if (params[i + 1] === 2) {\r\n          i += 2;\r\n          bg = this._terminal.matchColor(\r\n            params[i] & 0xff,\r\n            params[i + 1] & 0xff,\r\n            params[i + 2] & 0xff);\r\n          if (bg === -1) bg = 0x1ff;\r\n          i += 2;\r\n        } else if (params[i + 1] === 5) {\r\n          i += 2;\r\n          p = params[i] & 0xff;\r\n          bg = p;\r\n        }\r\n      } else if (p === 100) {\r\n        // reset fg/bg\r\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\r\n        bg = this._terminal.defAttr & 0x1ff;\r\n      } else {\r\n        this._terminal.error('Unknown SGR attribute: %d.', p);\r\n      }\r\n    }\r\n\r\n    this._terminal.curAttr = (flags << 18) | (fg << 9) | bg;\r\n  }\r\n\r\n  /**\r\n   * CSI Ps n  Device Status Report (DSR).\r\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\r\n   *   CSI 0 n\r\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\r\n   *   Result is\r\n   *   CSI r ; c R\r\n   * CSI ? Ps n\r\n   *   Device Status Report (DSR, DEC-specific).\r\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\r\n   *     ? r ; c R (assumes page is zero).\r\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\r\n   *     or CSI ? 1 1  n  (not ready).\r\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\r\n   *     or CSI ? 2 1  n  (locked).\r\n   *     Ps = 2 6  -> Report Keyboard status as\r\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\r\n   *   The last two parameters apply to VT400 & up, and denote key-\r\n   *   board ready and LK01 respectively.\r\n   *     Ps = 5 3  -> Report Locator status as\r\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\r\n   *   CSI ? 5 0  n  No Locator, if not.\r\n   */\r\n  public deviceStatus(params: number[]): void {\r\n    if (!this._terminal.prefix) {\r\n      switch (params[0]) {\r\n        case 5:\r\n          // status report\r\n          this._terminal.send(C0.ESC + '[0n');\r\n          break;\r\n        case 6:\r\n          // cursor position\r\n          this._terminal.send(C0.ESC + '['\r\n                    + (this._terminal.buffer.y + 1)\r\n                    + ';'\r\n                    + (this._terminal.buffer.x + 1)\r\n                    + 'R');\r\n          break;\r\n      }\r\n    } else if (this._terminal.prefix === '?') {\r\n      // modern xterm doesnt seem to\r\n      // respond to any of these except ?6, 6, and 5\r\n      switch (params[0]) {\r\n        case 6:\r\n          // cursor position\r\n          this._terminal.send(C0.ESC + '[?'\r\n                    + (this._terminal.buffer.y + 1)\r\n                    + ';'\r\n                    + (this._terminal.buffer.x + 1)\r\n                    + 'R');\r\n          break;\r\n        case 15:\r\n          // no printer\r\n          // this.send(C0.ESC + '[?11n');\r\n          break;\r\n        case 25:\r\n          // dont support user defined keys\r\n          // this.send(C0.ESC + '[?21n');\r\n          break;\r\n        case 26:\r\n          // north american keyboard\r\n          // this.send(C0.ESC + '[?27;1;0;0n');\r\n          break;\r\n        case 53:\r\n          // no dec locator/mouse\r\n          // this.send(C0.ESC + '[?50n');\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI ! p   Soft terminal reset (DECSTR).\r\n   * http://vt100.net/docs/vt220-rm/table4-10.html\r\n   */\r\n  public softReset(params: number[]): void {\r\n    this._terminal.cursorHidden = false;\r\n    this._terminal.insertMode = false;\r\n    this._terminal.originMode = false;\r\n    this._terminal.wraparoundMode = true;  // defaults: xterm - true, vt100 - false\r\n    this._terminal.applicationKeypad = false; // ?\r\n    this._terminal.viewport.syncScrollArea();\r\n    this._terminal.applicationCursor = false;\r\n    this._terminal.buffer.scrollTop = 0;\r\n    this._terminal.buffer.scrollBottom = this._terminal.rows - 1;\r\n    this._terminal.curAttr = this._terminal.defAttr;\r\n    this._terminal.buffer.x = this._terminal.buffer.y = 0; // ?\r\n    this._terminal.charset = null;\r\n    this._terminal.glevel = 0; // ??\r\n    this._terminal.charsets = [null]; // ??\r\n  }\r\n\r\n  /**\r\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\r\n   *   Ps = 0  -> blinking block.\r\n   *   Ps = 1  -> blinking block (default).\r\n   *   Ps = 2  -> steady block.\r\n   *   Ps = 3  -> blinking underline.\r\n   *   Ps = 4  -> steady underline.\r\n   *   Ps = 5  -> blinking bar (xterm).\r\n   *   Ps = 6  -> steady bar (xterm).\r\n   */\r\n  public setCursorStyle(params?: number[]): void {\r\n    const param = params[0] < 1 ? 1 : params[0];\r\n    switch (param) {\r\n      case 1:\r\n      case 2:\r\n        this._terminal.setOption('cursorStyle', 'block');\r\n        break;\r\n      case 3:\r\n      case 4:\r\n        this._terminal.setOption('cursorStyle', 'underline');\r\n        break;\r\n      case 5:\r\n      case 6:\r\n        this._terminal.setOption('cursorStyle', 'bar');\r\n        break;\r\n    }\r\n    const isBlinking = param % 2 === 1;\r\n    this._terminal.setOption('cursorBlink', isBlinking);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps ; Ps r\r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\r\n   *   dow) (DECSTBM).\r\n   * CSI ? Pm r\r\n   */\r\n  public setScrollRegion(params: number[]): void {\r\n    if (this._terminal.prefix) return;\r\n    this._terminal.buffer.scrollTop = (params[0] || 1) - 1;\r\n    this._terminal.buffer.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\r\n    this._terminal.buffer.x = 0;\r\n    this._terminal.buffer.y = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI s\r\n   *   Save cursor (ANSI.SYS).\r\n   */\r\n  public saveCursor(params: number[]): void {\r\n    this._terminal.buffer.savedX = this._terminal.buffer.x;\r\n    this._terminal.buffer.savedY = this._terminal.buffer.y;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI u\r\n   *   Restore cursor (ANSI.SYS).\r\n   */\r\n  public restoreCursor(params: number[]): void {\r\n    this._terminal.buffer.x = this._terminal.buffer.savedX || 0;\r\n    this._terminal.buffer.y = this._terminal.buffer.savedY || 0;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { XtermListener } from './Types';\r\nimport { IEventEmitter, IDisposable } from 'xterm';\r\n\r\nexport class EventEmitter implements IEventEmitter {\r\n  private _events: {[type: string]: XtermListener[]};\r\n\r\n  constructor() {\r\n    // Restore the previous events if available, this will happen if the\r\n    // constructor is called multiple times on the same object (terminal reset).\r\n    this._events = this._events || {};\r\n  }\r\n\r\n  public on(type: string, listener: XtermListener): void {\r\n    this._events[type] = this._events[type] || [];\r\n    this._events[type].push(listener);\r\n  }\r\n\r\n  /**\r\n   * Adds a disposabe listener to the EventEmitter, returning the disposable.\r\n   * @param type The event type.\r\n   * @param handler The handler for the listener.\r\n   */\r\n  public addDisposableListener(type: string, handler: XtermListener): IDisposable {\r\n    this.on(type, handler);\r\n    return {\r\n      dispose: () => {\r\n        if (!handler) {\r\n          // Already disposed\r\n          return;\r\n        }\r\n        this.off(type, handler);\r\n        handler = null;\r\n      }\r\n    };\r\n  }\r\n\r\n  public off(type: string, listener: XtermListener): void {\r\n    if (!this._events[type]) {\r\n      return;\r\n    }\r\n\r\n    let obj = this._events[type];\r\n    let i = obj.length;\r\n\r\n    while (i--) {\r\n      if (obj[i] === listener) {\r\n        obj.splice(i, 1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public removeAllListeners(type: string): void {\r\n    if (this._events[type]) {\r\n       delete this._events[type];\r\n    }\r\n  }\r\n\r\n  public emit(type: string, ...args: any[]): void {\r\n    if (!this._events[type]) {\r\n      return;\r\n    }\r\n    let obj = this._events[type];\r\n    for (let i = 0; i < obj.length; i++) {\r\n      obj[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  public listeners(type: string): XtermListener[] {\r\n    return this._events[type] || [];\r\n  }\r\n\r\n  protected destroy(): void {\r\n    this._events = {};\r\n  }\r\n}\r\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal } from './Types';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private isComposing: boolean;\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private isSendingComposition: boolean;\n\n  /**\n   * Creates a new CompositionHelper.\n   * @param textarea The textarea that xterm uses for input.\n   * @param compositionView The element to display the in-progress composition in.\n   * @param terminal The Terminal to forward the finished composition to.\n   */\n  constructor(\n    private textarea: HTMLTextAreaElement,\n    private compositionView: HTMLElement,\n    private terminal: ITerminal\n  ) {\n    this.isComposing = false;\n    this.isSendingComposition = false;\n    this.compositionPosition = { start: null, end: null };\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart(): void {\n    this.isComposing = true;\n    this.compositionPosition.start = this.textarea.value.length;\n    this.compositionView.textContent = '';\n    this.compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param {CompositionEvent} ev The event.\n   */\n  public compositionupdate(ev: CompositionEvent): void {\n    this.compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this.compositionPosition.end = this.textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend(): void {\n    this.finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @return Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent): boolean {\n    if (this.isComposing || this.isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      } else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      } else {\n        // Finish composition immediately. This is mainly here for the case where enter is\n        // pressed and the handler needs to be triggered before the command is executed.\n        this.finalizeComposition(false);\n      }\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this.handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropogation Whether to wait for events to propogate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is send before\n   *   the command is executed.\n   */\n  private finalizeComposition(waitForPropogation: boolean): void {\n    this.compositionView.classList.remove('active');\n    this.isComposing = false;\n    this.clearTextareaPosition();\n\n    if (!waitForPropogation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this.isSendingComposition = false;\n      const input = this.textarea.value.substring(this.compositionPosition.start, this.compositionPosition.end);\n      this.terminal.handler(input);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this.compositionPosition.start,\n        end: this.compositionPosition.end,\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved, this solution was used\n      // because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this.isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this.isSendingComposition) {\n          this.isSendingComposition = false;\n          let input;\n          if (this.isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this.textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this.textarea.value.substring(currentCompositionPosition.start);\n          }\n          this.terminal.handler(input);\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private handleAnyTextareaChanges(): void {\n    const oldValue = this.textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this.isComposing) {\n        const newValue = this.textarea.value;\n        const diff = newValue.replace(oldValue, '');\n        if (diff.length > 0) {\n          this.terminal.handler(diff);\n        }\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean): void {\n    if (!this.isComposing) {\n      return;\n    }\n\n    if (this.terminal.buffer.isCursorInViewport) {\n      const cellHeight = Math.ceil(this.terminal.charMeasure.height * this.terminal.options.lineHeight);\n      const cursorTop = this.terminal.buffer.y * cellHeight;\n      const cursorLeft = this.terminal.buffer.x * this.terminal.charMeasure.width;\n\n      this.compositionView.style.left = cursorLeft + 'px';\n      this.compositionView.style.top = cursorTop + 'px';\n      this.compositionView.style.height = cellHeight + 'px';\n      this.compositionView.style.lineHeight = cellHeight + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this.compositionView.getBoundingClientRect();\n      this.textarea.style.left = cursorLeft + 'px';\n      this.textarea.style.top = cursorTop + 'px';\n      this.textarea.style.width = compositionViewBounds.width + 'px';\n      this.textarea.style.height = compositionViewBounds.height + 'px';\n      this.textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  }\n\n  /**\n   * Clears the textarea's position so that the cursor does not blink on IE.\n   * @private\n   */\n  private clearTextareaPosition(): void {\n    this.textarea.style.left = '';\n    this.textarea.style.top = '';\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from './Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u0009', // '\\t'\n  'c': '\\u000c', // '\\f'\n  'd': '\\u000d', // '\\r'\n  'e': '\\u000a', // '\\n'\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '\\u2424' (NL)\n  'i': '\\u000b', // '\\v'\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = null;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const wcwidth = (function(opts: {nul: number, control: number}): (ucs: number) => number {\n    // extracted from https://www.cl.cam.ac.uk/%7Emgk25/ucs/wcwidth.c\n    // combining characters\n    const COMBINING_BMP = [\n      [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n      [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n      [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n      [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n      [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n      [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n      [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n      [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n      [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n      [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n      [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n      [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n      [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n      [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n      [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n      [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n      [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n      [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n      [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n      [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n      [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n      [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n      [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n      [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n      [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n      [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n      [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n      [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n      [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n      [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n      [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n      [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n      [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n      [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n      [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n      [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n      [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n      [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n      [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n      [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n      [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n      [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n      [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB],\n    ];\n    const COMBINING_HIGH = [\n      [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n      [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n      [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n      [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n      [0xE0100, 0xE01EF]\n    ];\n    // binary search\n    function bisearch(ucs: number, data: number[][]): boolean {\n      let min = 0;\n      let max = data.length - 1;\n      let mid;\n      if (ucs < data[0][0] || ucs > data[max][1]) {\n        return false;\n      }\n      while (max >= min) {\n        mid = (min + max) >> 1;\n        if (ucs > data[mid][1]) {\n          min = mid + 1;\n        } else if (ucs < data[mid][0]) {\n          max = mid - 1;\n        } else {\n          return true;\n        }\n      }\n      return false;\n    }\n    function wcwidthBMP(ucs: number): number {\n      // test for 8-bit control characters\n      if (ucs === 0) {\n        return opts.nul;\n      }\n      if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) {\n        return opts.control;\n      }\n      // binary search in table of non-spacing characters\n      if (bisearch(ucs, COMBINING_BMP)) {\n        return 0;\n      }\n      // if we arrive here, ucs is not a combining or C0/C1 control character\n      if (isWideBMP(ucs)) {\n        return 2;\n      }\n      return 1;\n    }\n    function isWideBMP(ucs: number): boolean {\n      return (\n        ucs >= 0x1100 && (\n        ucs <= 0x115f ||                // Hangul Jamo init. consonants\n        ucs === 0x2329 ||\n        ucs === 0x232a ||\n        (ucs >= 0x2e80 && ucs <= 0xa4cf && ucs !== 0x303f) ||  // CJK..Yi\n        (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables\n        (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compat Ideographs\n        (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms\n        (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compat Forms\n        (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms\n        (ucs >= 0xffe0 && ucs <= 0xffe6)));\n    }\n    function wcwidthHigh(ucs: number): 0 | 1 | 2 {\n      if (bisearch(ucs, COMBINING_HIGH)) {\n        return 0;\n      }\n      if ((ucs >= 0x20000 && ucs <= 0x2fffd) || (ucs >= 0x30000 && ucs <= 0x3fffd)) {\n        return 2;\n      }\n      return 1;\n    }\n    const control = opts.control | 0;\n    let table: number[] | Uint32Array = null;\n    function init_table(): number[] | Uint32Array {\n      // lookup table for BMP\n      const CODEPOINTS = 65536;  // BMP holds 65536 codepoints\n      const BITWIDTH = 2;        // a codepoint can have a width of 0, 1 or 2\n      const ITEMSIZE = 32;       // using uint32_t\n      const CONTAINERSIZE = CODEPOINTS * BITWIDTH / ITEMSIZE;\n      const CODEPOINTS_PER_ITEM = ITEMSIZE / BITWIDTH;\n      table = (typeof Uint32Array === 'undefined')\n        ? new Array(CONTAINERSIZE)\n        : new Uint32Array(CONTAINERSIZE);\n      for (let i = 0; i < CONTAINERSIZE; ++i) {\n        let num = 0;\n        let pos = CODEPOINTS_PER_ITEM;\n        while (pos--) {\n          num = (num << 2) | wcwidthBMP(CODEPOINTS_PER_ITEM * i + pos);\n        }\n        table[i] = num;\n      }\n      return table;\n    }\n    // get width from lookup table\n    //   position in container   : num / CODEPOINTS_PER_ITEM\n    //     ==> n = table[Math.floor(num / 16)]\n    //     ==> n = table[num >> 4]\n    //   16 codepoints per number:       FFEEDDCCBBAA99887766554433221100\n    //   position in number      : (num % CODEPOINTS_PER_ITEM) * BITWIDTH\n    //     ==> m = (n % 16) * 2\n    //     ==> m = (num & 15) << 1\n    //   right shift to position m\n    //     ==> n = n >> m     e.g. m=12  000000000000FFEEDDCCBBAA99887766\n    //   we are only interested in 2 LSBs, cut off higher bits\n    //     ==> n = n & 3      e.g.       000000000000000000000000000000XX\n    return function (num: number): number {\n      num = num | 0;  // get asm.js like optimization under V8\n      if (num < 32) {\n        return control | 0;\n      }\n      if (num < 127) {\n        return 1;\n      }\n      let t = table || init_table();\n      if (num < 65536) {\n        return t[num >> 4] >> ((num & 15) << 1) & 3;\n      }\n      // do a full search for high codepoints\n      return wcwidthHigh(num);\n    };\n})({nul: 0, control: 0});  // configurable options\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal, IBufferSet } from './Types';\nimport { Buffer } from './Buffer';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends EventEmitter implements IBufferSet {\n  private _normal: Buffer;\n  private _alt: Buffer;\n  private _activeBuffer: Buffer;\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   * @param {Terminal} terminal - The terminal the BufferSet will belong to\n   */\n  constructor(private _terminal: ITerminal) {\n    super();\n    this._normal = new Buffer(this._terminal, true);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(this._terminal, false);\n    this._activeBuffer = this._normal;\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   * @returns {Buffer}\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   * @returns {Buffer}\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   * @returns {Buffer}\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this.emit('activate', {\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows();\n    this._activeBuffer = this._alt;\n    this.emit('activate', {\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList } from './utils/CircularList';\nimport { LineData, CharData, ITerminal, IBuffer } from './Types';\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  private _lines: CircularList<LineData>;\n\n  public ydisp: number;\n  public ybase: number;\n  public y: number;\n  public x: number;\n  public scrollBottom: number;\n  public scrollTop: number;\n  public tabs: any;\n  public savedY: number;\n  public savedX: number;\n\n  /**\n   * Create a new Buffer.\n   * @param _terminal The terminal the Buffer will belong to.\n   * @param _hasScrollback Whether the buffer should respect the scrollback of\n   * the terminal.\n   */\n  constructor(\n    private _terminal: ITerminal,\n    private _hasScrollback: boolean\n  ) {\n    this.clear();\n  }\n\n  public get lines(): CircularList<LineData> {\n    return this._lines;\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._terminal.rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._terminal.rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._terminal.options.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(): void {\n    if (this._lines.length === 0) {\n      let i = this._terminal.rows;\n      while (i--) {\n        this.lines.push(this._terminal.blankLine());\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this._lines = new CircularList<LineData>(this._getCorrectBufferLength(this._terminal.rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._terminal.rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this._lines.maxLength) {\n      this._lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this._lines.length > 0) {\n      // Deal with columns increasing (we don't do anything when columns reduce)\n      if (this._terminal.cols < newCols) {\n        const ch: CharData = [this._terminal.defAttr, ' ', 1, 32]; // does xterm use the default attr?\n        for (let i = 0; i < this._lines.length; i++) {\n          while (this._lines.get(i).length < newCols) {\n            this._lines.get(i).push(ch);\n          }\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._terminal.rows < newRows) {\n        for (let y = this._terminal.rows; y < newRows; y++) {\n          if (this._lines.length < newRows + this.ybase) {\n            if (this.ybase > 0 && this._lines.length <= this.ybase + this.y + addToY + 1) {\n              // There is room above the buffer and there are no empty elements below the line,\n              // scroll up\n              this.ybase--;\n              addToY++;\n              if (this.ydisp > 0) {\n                // Viewport is at the top of the buffer, must increase downwards\n                this.ydisp--;\n              }\n            } else {\n              // Add a blank line if there is no buffer left at the top to scroll to, or if there\n              // are blank lines after the cursor\n              this._lines.push(this._terminal.blankLine(undefined, undefined, newCols));\n            }\n          }\n        }\n      } else { // (this._terminal.rows >= newRows)\n        for (let y = this._terminal.rows; y > newRows; y--) {\n          if (this._lines.length > newRows + this.ybase) {\n            if (this._lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this._lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this._lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this._lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this._lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n        }\n        this._lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedY = Math.min(this.savedY, newRows - 1);\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol: number = null): string {\n    // Get full line\n    let lineString = '';\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n\n    // Initialize column and index values. Column values represent the actual\n    // cell column, indexes represent the index in the string. Indexes are\n    // needed here because some chars are 0 characters long (eg. after wide\n    // chars) and some chars are longer than 1 characters long (eg. emojis).\n    let startIndex = startCol;\n    // Only set endCol to the line length when it is null. 0 is a valid column.\n    if (endCol === null) {\n      endCol = line.length;\n    }\n    let endIndex = endCol;\n\n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      lineString += char[CHAR_DATA_CHAR_INDEX];\n      // Adjust start and end cols for wide characters if they affect their\n      // column indexes\n      if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\n        if (startCol >= i) {\n          startIndex--;\n        }\n        if (endCol >= i) {\n          endIndex--;\n        }\n      } else {\n        // Adjust the columns to take glyphs that are represented by multiple\n        // code points into account.\n        if (char[CHAR_DATA_CHAR_INDEX].length > 1) {\n          if (startCol > i) {\n            startIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\n          }\n          if (endCol > i) {\n            endIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\n          }\n        }\n      }\n    }\n\n    // Calculate the final end col by trimming whitespace on the right of the\n    // line if needed.\n    if (trimRight) {\n      const rightWhitespaceIndex = lineString.search(/\\s+$/);\n      if (rightWhitespaceIndex !== -1) {\n        endIndex = Math.min(endIndex, rightWhitespaceIndex);\n      }\n      // Return the empty string if only trimmed whitespace is selected\n      if (endIndex <= startIndex) {\n        return '';\n      }\n    }\n\n    return lineString.substring(startIndex, endIndex);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i != null) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._terminal.cols; i += this._terminal.options.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x == null) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x == null) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._terminal.cols);\n    return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\n  }\n}\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport * as Strings from './Strings';\r\nimport { ITerminal, IBuffer } from './Types';\r\nimport { isMac } from './shared/utils/Browser';\r\nimport { RenderDebouncer } from './utils/RenderDebouncer';\r\nimport { addDisposableListener } from './utils/Dom';\r\nimport { IDisposable } from 'xterm';\r\n\r\nconst MAX_ROWS_TO_READ = 20;\r\nconst ACTIVE_ITEM_ID_PREFIX = 'xterm-active-item-';\r\n\r\nenum BoundaryPosition {\r\n  Top,\r\n  Bottom\r\n}\r\n\r\nexport class AccessibilityManager implements IDisposable {\r\n  private _accessibilityTreeRoot: HTMLElement;\r\n  private _rowContainer: HTMLElement;\r\n  private _rowElements: HTMLElement[] = [];\r\n  private _liveRegion: HTMLElement;\r\n  private _liveRegionLineCount: number = 0;\r\n\r\n  private _renderRowsDebouncer: RenderDebouncer;\r\n\r\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\r\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\r\n\r\n  private _disposables: IDisposable[] = [];\r\n\r\n  /**\r\n   * This queue has a character pushed to it for keys that are pressed, if the\r\n   * next character added to the terminal is equal to the key char then it is\r\n   * not announced (added to live region) because it has already been announced\r\n   * by the textarea event (which cannot be canceled). There are some race\r\n   * condition cases if there is typing while data is streaming, but this covers\r\n   * the main case of typing into the prompt and inputting the answer to a\r\n   * question (Y/N, etc.).\r\n   */\r\n  private _charsToConsume: string[] = [];\r\n\r\n  constructor(private _terminal: ITerminal) {\r\n    this._accessibilityTreeRoot = document.createElement('div');\r\n    this._accessibilityTreeRoot.classList.add('xterm-accessibility');\r\n\r\n    this._rowContainer = document.createElement('div');\r\n    this._rowContainer.classList.add('xterm-accessibility-tree');\r\n    for (let i = 0; i < this._terminal.rows; i++) {\r\n      this._rowElements[i] = this._createAccessibilityTreeNode();\r\n      this._rowContainer.appendChild(this._rowElements[i]);\r\n    }\r\n\r\n    this._topBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.Top);\r\n    this._bottomBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.Bottom);\r\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\r\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    this._refreshRowsDimensions();\r\n    this._accessibilityTreeRoot.appendChild(this._rowContainer);\r\n\r\n    this._renderRowsDebouncer = new RenderDebouncer(this._terminal, this._renderRows.bind(this));\r\n    this._refreshRows();\r\n\r\n    this._liveRegion = document.createElement('div');\r\n    this._liveRegion.classList.add('live-region');\r\n    this._liveRegion.setAttribute('aria-live', 'assertive');\r\n    this._accessibilityTreeRoot.appendChild(this._liveRegion);\r\n\r\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityTreeRoot);\r\n\r\n    this._disposables.push(this._renderRowsDebouncer);\r\n    this._disposables.push(this._terminal.addDisposableListener('resize', data => this._onResize(data.cols, data.rows)));\r\n    this._disposables.push(this._terminal.addDisposableListener('refresh', data => this._refreshRows(data.start, data.end)));\r\n    this._disposables.push(this._terminal.addDisposableListener('scroll', data => this._refreshRows()));\r\n    // Line feed is an issue as the prompt won't be read out after a command is run\r\n    this._disposables.push(this._terminal.addDisposableListener('a11y.char', (char) => this._onChar(char)));\r\n    this._disposables.push(this._terminal.addDisposableListener('linefeed', () => this._onChar('\\n')));\r\n    this._disposables.push(this._terminal.addDisposableListener('a11y.tab', spaceCount => this._onTab(spaceCount)));\r\n    this._disposables.push(this._terminal.addDisposableListener('key', keyChar => this._onKey(keyChar)));\r\n    this._disposables.push(this._terminal.addDisposableListener('blur', () => this._clearLiveRegion()));\r\n    // TODO: Maybe renderer should fire an event on terminal when the characters change and that\r\n    //       should be listened to instead? That would mean that the order of events are always\r\n    //       guarenteed\r\n    this._disposables.push(this._terminal.addDisposableListener('dprchange', () => this._refreshRowsDimensions()));\r\n    this._disposables.push(this._terminal.renderer.addDisposableListener('resize', () => this._refreshRowsDimensions()));\r\n    // This shouldn't be needed on modern browsers but is present in case the\r\n    // media query that drives the dprchange event isn't supported\r\n    this._disposables.push(addDisposableListener(window, 'resize', () => this._refreshRowsDimensions()));\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._terminal.element.removeChild(this._accessibilityTreeRoot);\r\n    this._disposables.forEach(d => d.dispose());\r\n    this._disposables = null;\r\n    this._accessibilityTreeRoot = null;\r\n    this._rowContainer = null;\r\n    this._liveRegion = null;\r\n    this._rowContainer = null;\r\n    this._rowElements = null;\r\n  }\r\n\r\n  private _onBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\r\n    const boundaryElement = <HTMLElement>e.target;\r\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.Top ? 1 : this._rowElements.length - 2];\r\n\r\n    // Don't scroll if the buffer top has reached the end in that direction\r\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\r\n    const lastRowPos = position === BoundaryPosition.Top ? '1' : `${this._terminal.buffer.lines.length}`;\r\n    if (posInSet === lastRowPos) {\r\n      return;\r\n    }\r\n\r\n    // Don't scroll when the last focused item was not the second row (focus is going the other\r\n    // direction)\r\n    if (e.relatedTarget !== beforeBoundaryElement) {\r\n      return;\r\n    }\r\n\r\n    // Remove old boundary element from array\r\n    let topBoundaryElement: HTMLElement;\r\n    let bottomBoundaryElement: HTMLElement;\r\n    if (position === BoundaryPosition.Top) {\r\n      topBoundaryElement = boundaryElement;\r\n      bottomBoundaryElement = this._rowElements.pop();\r\n      this._rowContainer.removeChild(bottomBoundaryElement);\r\n    } else {\r\n      topBoundaryElement = this._rowElements.shift();\r\n      bottomBoundaryElement = boundaryElement;\r\n      this._rowContainer.removeChild(topBoundaryElement);\r\n    }\r\n\r\n    // Remove listeners from old boundary elements\r\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\r\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    // Add new element to array/DOM\r\n    if (position === BoundaryPosition.Top) {\r\n      const newElement = this._createAccessibilityTreeNode();\r\n      this._rowElements.unshift(newElement);\r\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\r\n    } else {\r\n      const newElement = this._createAccessibilityTreeNode();\r\n      this._rowElements.push(newElement);\r\n      this._rowContainer.appendChild(newElement);\r\n    }\r\n\r\n    // Add listeners to new boundary elements\r\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\r\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    // Scroll up\r\n    this._terminal.scrollLines(position === BoundaryPosition.Top ? -1 : 1);\r\n\r\n    // Focus new boundary before element\r\n    this._rowElements[position === BoundaryPosition.Top ? 1 : this._rowElements.length - 2].focus();\r\n\r\n    // Prevent the standard behavior\r\n    e.preventDefault();\r\n    e.stopImmediatePropagation();\r\n  }\r\n\r\n  private _onResize(cols: number, rows: number): void {\r\n    // Remove bottom boundary listener\r\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    // Grow rows as required\r\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\r\n      this._rowElements[i] = this._createAccessibilityTreeNode();\r\n      this._rowContainer.appendChild(this._rowElements[i]);\r\n    }\r\n    // Shrink rows as required\r\n    while (this._rowElements.length > rows) {\r\n      this._rowContainer.removeChild(this._rowElements.pop());\r\n    }\r\n\r\n    // Add bottom boundary listener\r\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    this._refreshRowsDimensions();\r\n  }\r\n\r\n  public _createAccessibilityTreeNode(): HTMLElement {\r\n    const element = document.createElement('div');\r\n    element.setAttribute('role', 'listitem');\r\n    element.tabIndex = -1;\r\n    this._refreshRowDimensions(element);\r\n    return element;\r\n  }\r\n\r\n  private _onTab(spaceCount: number): void {\r\n    for (let i = 0; i < spaceCount; i++) {\r\n      this._onChar(' ');\r\n    }\r\n  }\r\n\r\n  private _onChar(char: string): void {\r\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\r\n      if (this._charsToConsume.length > 0) {\r\n        // Have the screen reader ignore the char if it was just input\r\n        const shiftedChar = this._charsToConsume.shift();\r\n        if (shiftedChar !== char) {\r\n          this._announceCharacter(char);\r\n        }\r\n      } else {\r\n        this._announceCharacter(char);\r\n      }\r\n\r\n      if (char === '\\n') {\r\n        this._liveRegionLineCount++;\r\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\r\n          this._liveRegion.textContent += Strings.tooMuchOutput;\r\n        }\r\n      }\r\n\r\n      // Only detach/attach on mac as otherwise messages can go unaccounced\r\n      if (isMac) {\r\n        if (this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\r\n          setTimeout(() => {\r\n            this._accessibilityTreeRoot.appendChild(this._liveRegion);\r\n          }, 0);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _clearLiveRegion(): void {\r\n    this._liveRegion.textContent = '';\r\n    this._liveRegionLineCount = 0;\r\n\r\n    // Only detach/attach on mac as otherwise messages can go unaccounced\r\n    if (isMac) {\r\n      if (this._liveRegion.parentNode) {\r\n        this._accessibilityTreeRoot.removeChild(this._liveRegion);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onKey(keyChar: string): void {\r\n    this._clearLiveRegion();\r\n    this._charsToConsume.push(keyChar);\r\n  }\r\n\r\n  private _refreshRows(start?: number, end?: number): void {\r\n    this._renderRowsDebouncer.refresh(start, end);\r\n  }\r\n\r\n  private _renderRows(start: number, end: number): void {\r\n    const buffer: IBuffer = this._terminal.buffer;\r\n    const setSize = buffer.lines.length.toString();\r\n    for (let i = start; i <= end; i++) {\r\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\r\n      const posInSet = (buffer.ydisp + i + 1).toString();\r\n      const element = this._rowElements[i];\r\n      element.textContent = lineData.length === 0 ? Strings.blankLine : lineData;\r\n      element.setAttribute('aria-posinset', posInSet);\r\n      element.setAttribute('aria-setsize', setSize);\r\n    }\r\n  }\r\n\r\n  private _refreshRowsDimensions(): void {\r\n    if (!this._terminal.renderer.dimensions.actualCellHeight) {\r\n      return;\r\n    }\r\n    const buffer: IBuffer = this._terminal.buffer;\r\n    for (let i = 0; i < this._terminal.rows; i++) {\r\n      this._refreshRowDimensions(this._rowElements[i]);\r\n    }\r\n  }\r\n\r\n  private _refreshRowDimensions(element: HTMLElement): void {\r\n    element.style.height = `${this._terminal.renderer.dimensions.actualCellHeight}px`;\r\n  }\r\n\r\n  private _announceCharacter(char: string): void {\r\n    if (char === ' ') {\r\n      // Always use nbsp for spaces in order to preserve the space between characters in\r\n      // voiceover's caption window\r\n      this._liveRegion.innerHTML += '&nbsp;';\r\n    } else {\r\n      this._liveRegion.textContent += char;\r\n    }\r\n  }\r\n}\r\n",null],"names":[],"mappings":"AwCAA;;;ADKA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAyBA;AAAA;AAAA;AAtBA;AAEA;AAOA;AAWA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AA1Qa;;;;;;;ADfb;AAGa;AACA;AACA;AACA;AACA;AASb;AAmBA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;;;AAAA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAYA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AA5Ra;;;;;;;;;;;;;;;;;ADfb;AACA;AAMA;AAAA;AASA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AAEA;;AACA;AAMA;AAAA;AACA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAnGa;;;;;;;ADRA;AAGbaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AD9Ja;AAKA;AAYbwBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAUA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AApNa;;;;;;;ADRb;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;;;;;;;ADtEA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAxEa;;;;;;;ADDb;AACA;AACA;AACA;AACA;AASA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAauCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAwFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmyBA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAh6Ca;;;;;;;;;;;;;;;;;ADdb;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAAA;AAeA;AAAA;AACA;AARA;AAIA;AAOA;AACA;AACA;AACA;AACA;;AACA;AAMA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAlQA;AAmQA;AAzQA;AAAa;;;;;;;AD/Bbzfa;;;;;;;;;;;;;;;;;ADlKb;AACA;AAGA;AACA;AACA;AACA;AAMA;AAKA;AAKA;AAMA;AAMA;AAEA;AACA;AAaA;AAAA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAoCA;AAAA;AACA;AACA;AAVA;AAaA;AACA;AAEA;AACA;;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAntBa;;;;;;;AD5Db;AAuBA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxHa;;;;;;;ADAA;AAEb;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAAA;AA9Ca;;;;;;;ADRF;AACA;AACA;;;;;;;;;;;;;;;;;ADmBX;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAgIA;AACA;AADA;AA5GA;AAgHA;AACA;;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAKA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAGA;AAGA;AAGA;AAIA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AAIA;AACA;AAKA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAQA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAMA;AAAA;AACA;AAKA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAWA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AASA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AASA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAAA;AAziEa;AA+iEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;ADrwEA;AAAA;AACA;AACA;AACA;AACA;;;;;;;ADdA;AAMA;AAeA;AAAA;AACA;AACA;AACA;AACA;AAlBA;AACA;AACA;AACA;AACA;AAmBA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAzIa;;;;;;;ADTb;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAUA;;AACA;AAKA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAWA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAtOa;AA8Ob;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ADhPA;AACA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AATA;AAgBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAgCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AA8BA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAVA;;;;;;;ADhrKa;AAuKb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAZa;;;;;;;ADlLb;AACA;AAEa;AACb;AAEA;AAYA;AACA;AAGA;AACA;AAdgBA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AASA;AAAA;AACA;AACA;AAIA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAIA;AACA;AAOA;AACA;AACA;AAKA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAAA;AA9VsB;;;;;;;ADLtB;AAEa;AAmBb;AAQA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AD/HA;AACA;AACA;AACA;AACA;AACa;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA1Ca;;;;;;;;;;;;;;;;;AD9Db;AAGA;AAcA;AAEA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AArMa;AAuMb;AAcA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;AD3VA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA3Ba;;;;;;;;;;;;;;;;;ADAb;AAIA;AAEA;AAAA;AAGA;AAAA;AAFA;AAIA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAnCa;;;;;;;;;;;;;;;;;ADLb;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAAA;AAYA;AAAA;AAAA;AANA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAGA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAMA;AAKA;AAMA;AAIA;AAGA;AAIA;AAIA;AACA;AAOA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAvOa;;;;;;;;;;;;;;;;;ADVb;AAEA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AA5Ea;;;;;;;;;;;;;;;;;ADNb;AACA;AAEA;AACA;AAOA;AAEA;AAAA;AAMA;AAAA;AAFA;AAIA;;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AAQA;AACA;AAMA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAKA;AAGA;AAGA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAvOa;;;;;;;ADPb;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ADZA;AAyBa;AAQb;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AApFA;AAyFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;ADvIA;AACA;AACA;AAEa;AACA;AAKA;AACA;AACA;AACA;AACA;AAOb;AACA;AACA;;;;;;;;;;;;;;;;;ADtBA;AAOA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA7Ca;;;;;;;;;;;;;;;;;ADRb;AAOA;AAAA;AAKA;AAAA;AACA;AAGA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjBA;AAmBA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AATA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAUA;AACA;AACA;AAUA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAxMa;;;;;;;ADAb;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;;;;;;ADJA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAtFa;;;;;;;ADFb;AAKA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AA5Ca;;;;;;;ADWb;AAAA;AAqCA;AA/BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AArCa;;;;;;;ADVb;AAEA;;;"}